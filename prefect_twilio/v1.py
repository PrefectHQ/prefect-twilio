"""
This is a module for interacting with Twilio REST tasks.
It was auto-generated using prefect-collection-generator so
manually editing this file is not recommended.
"""

from typing import TYPE_CHECKING, Any, Dict

from prefect import task

from prefect_twilio.rest import HTTPMethod, execute_endpoint

if TYPE_CHECKING:
    from prefect_twilio import TwilioCredentials


@task
async def post_v1_auth_tokens_promote(
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Promote the secondary Auth Token to primary. After promoting the new token, all
    requests to Twilio using your old primary Auth Token will result in an
    error.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://accounts.twilio.com/v1/AuthTokens/Promote?](
    https://accounts.twilio.com/v1/AuthTokens/Promote?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://accounts.twilio.com/v1/AuthTokens/Promote"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
    )
    return result


@task
async def delete_v1_auth_tokens_secondary(
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete the secondary Auth Token from your account.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://accounts.twilio.com/v1/AuthTokens/Secondary?](
    https://accounts.twilio.com/v1/AuthTokens/Secondary?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = "https://accounts.twilio.com/v1/AuthTokens/Secondary"  # noqa

    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def post_v1_auth_tokens_secondary(
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Create a new secondary Auth Token.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://accounts.twilio.com/v1/AuthTokens/Secondary?](
    https://accounts.twilio.com/v1/AuthTokens/Secondary?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://accounts.twilio.com/v1/AuthTokens/Secondary"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
    )
    return result


@task
async def get_v1_credentials_aws(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieves a collection of AWS Credentials belonging to the account used to make
    the request.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://accounts.twilio.com/v1/Credentials/AWS?&page_size=%s](
    https://accounts.twilio.com/v1/Credentials/AWS?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://accounts.twilio.com/v1/Credentials/AWS"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_credentials_aws(
    twilio_credentials: "TwilioCredentials",
    account_sid: str = None,
    credentials: str = None,
    friendly_name: str = None,
) -> Dict[str, Any]:
    """
    Create a new AWS Credential.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        account_sid:
            The SID of the Subaccount that this Credential should be associated
            with. Must be a valid Subaccount of the account issuing the
            request.
        credentials:
            A string that contains the AWS access credentials in the format
            `<AWS_ACCESS_KEY_ID>:<AWS_SECRET_ACCESS_KEY>`. For example,
            `AKIAIOSFODNN7EXAMPLE:wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY`.
        friendly_name:
            A descriptive string that you create to describe the resource. It can be
            up to 64 characters long.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://accounts.twilio.com/v1/Credentials/AWS?](
    https://accounts.twilio.com/v1/Credentials/AWS?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://accounts.twilio.com/v1/Credentials/AWS"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "account_sid": account_sid,
        "credentials": credentials,
        "friendly_name": friendly_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_credentials_aws_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete a Credential from your account.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://accounts.twilio.com/v1/Credentials/AWS/{sid}?](
    https://accounts.twilio.com/v1/Credentials/AWS/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://accounts.twilio.com/v1/Credentials/AWS/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_credentials_aws_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch the AWS credentials specified by the provided Credential Sid.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://accounts.twilio.com/v1/Credentials/AWS/{sid}?](
    https://accounts.twilio.com/v1/Credentials/AWS/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://accounts.twilio.com/v1/Credentials/AWS/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_credentials_aws_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    friendly_name: str = None,
) -> Dict[str, Any]:
    """
    Modify the properties of a given Account.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        friendly_name:
            A descriptive string that you create to describe the resource. It can be
            up to 64 characters long.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://accounts.twilio.com/v1/Credentials/AWS/{sid}?](
    https://accounts.twilio.com/v1/Credentials/AWS/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://accounts.twilio.com/v1/Credentials/AWS/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "friendly_name": friendly_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_credentials_public_keys(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieves a collection of Public Key Credentials belonging to the account used
    to make the request.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://accounts.twilio.com/v1/Credentials/PublicKeys?&page_size=%s](
    https://accounts.twilio.com/v1/Credentials/PublicKeys?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://accounts.twilio.com/v1/Credentials/PublicKeys"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_credentials_public_keys(
    twilio_credentials: "TwilioCredentials",
    account_sid: str = None,
    friendly_name: str = None,
    public_key: str = None,
) -> Dict[str, Any]:
    """
    Create a new Public Key Credential.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        account_sid:
            The SID of the Subaccount that this Credential should be associated
            with. Must be a valid Subaccount of the account issuing the
            request.
        friendly_name:
            A descriptive string that you create to describe the resource. It can be
            up to 64 characters long.
        public_key:
            A URL encoded representation of the public key. For example, `-----BEGIN
            PUBLIC KEY-----MIIBIjANB.pa9xQIDAQAB-----END PUBLIC
            KEY-----`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://accounts.twilio.com/v1/Credentials/PublicKeys?](
    https://accounts.twilio.com/v1/Credentials/PublicKeys?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://accounts.twilio.com/v1/Credentials/PublicKeys"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "account_sid": account_sid,
        "friendly_name": friendly_name,
        "public_key": public_key,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_credentials_public_keys_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete a Credential from your account.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://accounts.twilio.com/v1/Credentials/PublicKeys/{sid}?](
    https://accounts.twilio.com/v1/Credentials/PublicKeys/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://accounts.twilio.com/v1/Credentials/PublicKeys/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_credentials_public_keys_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch the public key specified by the provided Credential Sid.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://accounts.twilio.com/v1/Credentials/PublicKeys/{sid}?](
    https://accounts.twilio.com/v1/Credentials/PublicKeys/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://accounts.twilio.com/v1/Credentials/PublicKeys/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_credentials_public_keys_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    friendly_name: str = None,
) -> Dict[str, Any]:
    """
    Modify the properties of a given Account.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        friendly_name:
            A descriptive string that you create to describe the resource. It can be
            up to 64 characters long.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://accounts.twilio.com/v1/Credentials/PublicKeys/{sid}?](
    https://accounts.twilio.com/v1/Credentials/PublicKeys/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://accounts.twilio.com/v1/Credentials/PublicKeys/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "friendly_name": friendly_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_assistants(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants?&page_size=%s](
    https://autopilot.twilio.com/v1/Assistants?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://autopilot.twilio.com/v1/Assistants"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_assistants(
    twilio_credentials: "TwilioCredentials",
    callback_events: str = None,
    callback_url: str = None,
    defaults: str = None,
    friendly_name: str = None,
    log_queries: bool = None,
    style_sheet: str = None,
    unique_name: str = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        callback_events:
            Reserved.
        callback_url:
            Reserved.
        defaults:
            A JSON object that defines the Assistant's [default
            tasks](https://www.twilio.com/docs/autopilot/api/assistant/defaults)
            for various scenarios, including initiation actions and
            fallback tasks.
        friendly_name:
            A descriptive string that you create to describe the new resource. It is
            not unique and can be up to 255 characters long.
        log_queries:
            Whether queries should be logged and kept after training. Can be: `true`
            or `false` and defaults to `true`. If `true`, queries are
            stored for 30 days, and then deleted. If `false`, no queries
            are stored.
        style_sheet:
            The JSON string that defines the Assistant's [style
            sheet](https://www.twilio.com/docs/autopilot/api/assistant/stylesheet).
        unique_name:
            An application-defined string that uniquely identifies the new resource.
            It can be used as an alternative to the `sid` in the URL
            path to address the resource. The first 64 characters must
            be unique.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants?](
    https://autopilot.twilio.com/v1/Assistants?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://autopilot.twilio.com/v1/Assistants"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "callback_events": callback_events,
        "callback_url": callback_url,
        "defaults": defaults,
        "friendly_name": friendly_name,
        "log_queries": log_queries,
        "style_sheet": style_sheet,
        "unique_name": unique_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def post_v1_assistants_restore(
    twilio_credentials: "TwilioCredentials",
    assistant: str = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        assistant:
            The Twilio-provided string that uniquely identifies the Assistant
            resource to restore.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/Restore?](
    https://autopilot.twilio.com/v1/Assistants/Restore?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://autopilot.twilio.com/v1/Assistants/Restore"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "assistant": assistant,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_assistants_assistant_sid_defaults(
    assistant_sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Defaults?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Defaults?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Defaults"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_assistants_assistant_sid_defaults(
    assistant_sid: str,
    twilio_credentials: "TwilioCredentials",
    defaults: str = None,
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        defaults:
            A JSON string that describes the default task links for the
            `assistant_initiation`, `collect`, and `fallback`
            situations.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Defaults?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Defaults?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Defaults"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "defaults": defaults,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_assistants_assistant_sid_dialogues_sid(
    assistant_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Dialogues/{sid}?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Dialogues/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Dialogues/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_assistants_assistant_sid_field_types(
    assistant_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/FieldTypes?&page_size=%s](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/FieldTypes?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = (
        f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/FieldTypes"  # noqa
    )
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_assistants_assistant_sid_field_types(
    assistant_sid: str,
    twilio_credentials: "TwilioCredentials",
    friendly_name: str = None,
    unique_name: str = None,
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        friendly_name:
            A descriptive string that you create to describe the new resource. It is
            not unique and can be up to 255 characters long.
        unique_name:
            An application-defined string that uniquely identifies the new resource.
            It can be used as an alternative to the `sid` in the URL
            path to address the resource. The first 64 characters must
            be unique.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/FieldTypes?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/FieldTypes?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = (
        f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/FieldTypes"  # noqa
    )
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "friendly_name": friendly_name,
        "unique_name": unique_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_assistants_assistant_sid_field_types_field_type_sid_field_values(
    assistant_sid: str,
    field_type_sid: str,
    twilio_credentials: "TwilioCredentials",
    language: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        field_type_sid:
            Field type sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        language:
            The [ISO language-
            country](https://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html)
            tag that specifies the language of the value. Currently
            supported tags: `en-US`.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/FieldTypes/{field_type_sid}/FieldValues?&language=%s&page_size=%s](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/FieldTypes/{field_type_sid}/FieldValues?&language=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/FieldTypes/{field_type_sid}/FieldValues"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "language": language,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_assistants_assistant_sid_field_types_field_type_sid_field_values(
    assistant_sid: str,
    field_type_sid: str,
    twilio_credentials: "TwilioCredentials",
    language: str = None,
    synonym_of: str = None,
    value: str = None,
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        field_type_sid:
            Field type sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        language:
            The [ISO language-
            country](https://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html)
            tag that specifies the language of the value. Currently
            supported tags: `en-US`.
        synonym_of:
            The string value that indicates which word the field value is a synonym
            of.
        value:
            The Field Value data.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/FieldTypes/{field_type_sid}/FieldValues?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/FieldTypes/{field_type_sid}/FieldValues?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/FieldTypes/{field_type_sid}/FieldValues"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "language": language,
        "synonym_of": synonym_of,
        "value": value,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_assistants_assistant_sid_field_types_field_type_sid_field_values_sid(
    assistant_sid: str,
    field_type_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        field_type_sid:
            Field type sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/FieldTypes/{field_type_sid}/FieldValues/{sid}?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/FieldTypes/{field_type_sid}/FieldValues/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/FieldTypes/{field_type_sid}/FieldValues/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_assistants_assistant_sid_field_types_field_type_sid_field_values_sid(
    assistant_sid: str,
    field_type_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        field_type_sid:
            Field type sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/FieldTypes/{field_type_sid}/FieldValues/{sid}?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/FieldTypes/{field_type_sid}/FieldValues/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/FieldTypes/{field_type_sid}/FieldValues/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def delete_v1_assistants_assistant_sid_field_types_sid(
    assistant_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/FieldTypes/{sid}?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/FieldTypes/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/FieldTypes/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_assistants_assistant_sid_field_types_sid(
    assistant_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/FieldTypes/{sid}?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/FieldTypes/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/FieldTypes/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_assistants_assistant_sid_field_types_sid(
    assistant_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    friendly_name: str = None,
    unique_name: str = None,
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        friendly_name:
            A descriptive string that you create to describe the resource. It is not
            unique and can be up to 255 characters long.
        unique_name:
            An application-defined string that uniquely identifies the resource. It
            can be used as an alternative to the `sid` in the URL path
            to address the resource. The first 64 characters must be
            unique.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/FieldTypes/{sid}?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/FieldTypes/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/FieldTypes/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "friendly_name": friendly_name,
        "unique_name": unique_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_assistants_assistant_sid_model_builds(
    assistant_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/ModelBuilds?&page_size=%s](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/ModelBuilds?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/ModelBuilds"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_assistants_assistant_sid_model_builds(
    assistant_sid: str,
    twilio_credentials: "TwilioCredentials",
    status_callback: str = None,
    unique_name: str = None,
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        status_callback:
            The URL we should call using a POST method to send status information to
            your application.
        unique_name:
            An application-defined string that uniquely identifies the new resource.
            This value must be a unique string of no more than 64
            characters. It can be used as an alternative to the `sid` in
            the URL path to address the resource.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/ModelBuilds?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/ModelBuilds?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/ModelBuilds"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "status_callback": status_callback,
        "unique_name": unique_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_assistants_assistant_sid_model_builds_sid(
    assistant_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/ModelBuilds/{sid}?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/ModelBuilds/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/ModelBuilds/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_assistants_assistant_sid_model_builds_sid(
    assistant_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/ModelBuilds/{sid}?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/ModelBuilds/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/ModelBuilds/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_assistants_assistant_sid_model_builds_sid(
    assistant_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    unique_name: str = None,
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        unique_name:
            An application-defined string that uniquely identifies the resource.
            This value must be a unique string of no more than 64
            characters. It can be used as an alternative to the `sid` in
            the URL path to address the resource.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/ModelBuilds/{sid}?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/ModelBuilds/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/ModelBuilds/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "unique_name": unique_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_assistants_assistant_sid_queries(
    assistant_sid: str,
    twilio_credentials: "TwilioCredentials",
    language: str = None,
    model_build: str = None,
    status: str = None,
    dialogue_sid: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        language:
            The [ISO language-
            country](https://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html)
            string that specifies the language used by the Query
            resources to read. For example: `en-US`.
        model_build:
            The SID or unique name of the [Model
            Build](https://www.twilio.com/docs/autopilot/api/model-
            build) to be queried.
        status:
            The status of the resources to read. Can be: `pending-review`,
            `reviewed`, or `discarded`.
        dialogue_sid:
            The SID of the
            [Dialogue](https://www.twilio.com/docs/autopilot/api/dialogue).
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Queries?&language=%s&model_build=%s&status=%s&dialogue_sid=%s&page_size=%s](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Queries?&language=%s&model_build=%s&status=%s&dialogue_sid=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Queries"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "language": language,
        "model_build": model_build,
        "status": status,
        "dialogue_sid": dialogue_sid,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_assistants_assistant_sid_queries(
    assistant_sid: str,
    twilio_credentials: "TwilioCredentials",
    language: str = None,
    model_build: str = None,
    query: str = None,
    tasks: str = None,
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        language:
            The [ISO language-
            country](https://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html)
            string that specifies the language used for the new query.
            For example: `en-US`.
        model_build:
            The SID or unique name of the [Model
            Build](https://www.twilio.com/docs/autopilot/api/model-
            build) to be queried.
        query:
            The end-user's natural language input. It can be up to 2048 characters
            long.
        tasks:
            The list of tasks to limit the new query to. Tasks are expressed as a
            comma-separated list of task `unique_name` values. For
            example, `task-unique_name-1, task-unique_name-2`. Listing
            specific tasks is useful to constrain the paths that a user
            can take.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Queries?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Queries?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Queries"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "language": language,
        "model_build": model_build,
        "query": query,
        "tasks": tasks,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_assistants_assistant_sid_queries_sid(
    assistant_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Queries/{sid}?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Queries/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Queries/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_assistants_assistant_sid_queries_sid(
    assistant_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Queries/{sid}?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Queries/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Queries/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_assistants_assistant_sid_queries_sid(
    assistant_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    sample_sid: str = None,
    status: str = None,
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        sample_sid:
            The SID of an optional reference to the
            [Sample](https://www.twilio.com/docs/autopilot/api/task-
            sample) created from the query.
        status:
            The new status of the resource. Can be: `pending-review`, `reviewed`, or
            `discarded`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Queries/{sid}?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Queries/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Queries/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "sample_sid": sample_sid,
        "status": status,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_assistants_assistant_sid_style_sheet(
    assistant_sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Returns Style sheet JSON object for the Assistant.

    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/StyleSheet?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/StyleSheet?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = (
        f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/StyleSheet"  # noqa
    )
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_assistants_assistant_sid_style_sheet(
    assistant_sid: str,
    twilio_credentials: "TwilioCredentials",
    style_sheet: str = None,
) -> Dict[str, Any]:
    """
    Updates the style sheet for an Assistant identified by `assistant_sid`.

    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        style_sheet:
            The JSON string that describes the style sheet object.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/StyleSheet?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/StyleSheet?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = (
        f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/StyleSheet"  # noqa
    )
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "style_sheet": style_sheet,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_assistants_assistant_sid_tasks(
    assistant_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks?&page_size=%s](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_assistants_assistant_sid_tasks(
    assistant_sid: str,
    twilio_credentials: "TwilioCredentials",
    actions: str = None,
    actions_url: str = None,
    friendly_name: str = None,
    unique_name: str = None,
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        actions:
            The JSON string that specifies the
            [actions](https://www.twilio.com/docs/autopilot/actions)
            that instruct the Assistant on how to perform the task. It
            is optional and not unique.
        actions_url:
            The URL from which the Assistant can fetch actions.
        friendly_name:
            A descriptive string that you create to describe the new resource. It is
            not unique and can be up to 255 characters long.
        unique_name:
            An application-defined string that uniquely identifies the new resource.
            It can be used as an alternative to the `sid` in the URL
            path to address the resource. This value must be unique and
            64 characters or less in length.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "actions": actions,
        "actions_url": actions_url,
        "friendly_name": friendly_name,
        "unique_name": unique_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_assistants_assistant_sid_tasks_sid(
    assistant_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{sid}?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_assistants_assistant_sid_tasks_sid(
    assistant_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{sid}?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_assistants_assistant_sid_tasks_sid(
    assistant_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    actions: str = None,
    actions_url: str = None,
    friendly_name: str = None,
    unique_name: str = None,
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        actions:
            The JSON string that specifies the
            [actions](https://www.twilio.com/docs/autopilot/actions)
            that instruct the Assistant on how to perform the task.
        actions_url:
            The URL from which the Assistant can fetch actions.
        friendly_name:
            A descriptive string that you create to describe the resource. It is not
            unique and can be up to 255 characters long.
        unique_name:
            An application-defined string that uniquely identifies the resource.
            This value must be 64 characters or less in length and be
            unique. It can be used as an alternative to the `sid` in the
            URL path to address the resource.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{sid}?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "actions": actions,
        "actions_url": actions_url,
        "friendly_name": friendly_name,
        "unique_name": unique_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_assistants_assistant_sid_tasks_task_sid_actions(
    assistant_sid: str,
    task_sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Returns JSON actions for the Task.

    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        task_sid:
            Task sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Actions?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Actions?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Actions"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_assistants_assistant_sid_tasks_task_sid_actions(
    assistant_sid: str,
    task_sid: str,
    twilio_credentials: "TwilioCredentials",
    actions: str = None,
) -> Dict[str, Any]:
    """
    Updates the actions of an Task identified by {TaskSid} or {TaskUniqueName}.

    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        task_sid:
            Task sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        actions:
            The JSON string that specifies the
            [actions](https://www.twilio.com/docs/autopilot/actions)
            that instruct the Assistant on how to perform the task.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Actions?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Actions?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Actions"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "actions": actions,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_assistants_assistant_sid_tasks_task_sid_fields(
    assistant_sid: str,
    task_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        task_sid:
            Task sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Fields?&page_size=%s](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Fields?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Fields"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_assistants_assistant_sid_tasks_task_sid_fields(
    assistant_sid: str,
    task_sid: str,
    twilio_credentials: "TwilioCredentials",
    field_type: str = None,
    unique_name: str = None,
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        task_sid:
            Task sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        field_type:
            The Field Type of the new field. Can be: a [Built-in Field
            Type](https://www.twilio.com/docs/autopilot/built-in-field-
            types), the `unique_name`, or the `sid` of a custom Field
            Type.
        unique_name:
            An application-defined string that uniquely identifies the new resource.
            This value must be a unique string of no more than 64
            characters. It can be used as an alternative to the `sid` in
            the URL path to address the resource.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Fields?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Fields?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Fields"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "field_type": field_type,
        "unique_name": unique_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_assistants_assistant_sid_tasks_task_sid_fields_sid(
    assistant_sid: str,
    task_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        task_sid:
            Task sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Fields/{sid}?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Fields/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Fields/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_assistants_assistant_sid_tasks_task_sid_fields_sid(
    assistant_sid: str,
    task_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        task_sid:
            Task sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Fields/{sid}?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Fields/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Fields/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_assistants_assistant_sid_tasks_task_sid_samples(
    assistant_sid: str,
    task_sid: str,
    twilio_credentials: "TwilioCredentials",
    language: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        task_sid:
            Task sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        language:
            The [ISO language-
            country](https://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html)
            string that specifies the language used for the sample. For
            example: `en-US`.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Samples?&language=%s&page_size=%s](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Samples?&language=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Samples"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "language": language,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_assistants_assistant_sid_tasks_task_sid_samples(
    assistant_sid: str,
    task_sid: str,
    twilio_credentials: "TwilioCredentials",
    language: str = None,
    source_channel: str = None,
    tagged_text: str = None,
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        task_sid:
            Task sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        language:
            The [ISO language-
            country](https://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html)
            string that specifies the language used for the new sample.
            For example: `en-US`.
        source_channel:
            The communication channel from which the new sample was captured. Can
            be: `voice`, `sms`, `chat`, `alexa`, `google-assistant`,
            `slack`, or null if not included.
        tagged_text:
            The text example of how end users might express the task. The sample can
            contain [Field tag
            blocks](https://www.twilio.com/docs/autopilot/api/task-
            sample
            field-tagging).

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Samples?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Samples?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Samples"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "language": language,
        "source_channel": source_channel,
        "tagged_text": tagged_text,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_assistants_assistant_sid_tasks_task_sid_samples_sid(
    assistant_sid: str,
    task_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        task_sid:
            Task sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Samples/{sid}?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Samples/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Samples/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_assistants_assistant_sid_tasks_task_sid_samples_sid(
    assistant_sid: str,
    task_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        task_sid:
            Task sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Samples/{sid}?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Samples/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Samples/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_assistants_assistant_sid_tasks_task_sid_samples_sid(
    assistant_sid: str,
    task_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    language: str = None,
    source_channel: str = None,
    tagged_text: str = None,
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        task_sid:
            Task sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        language:
            The [ISO language-
            country](https://docs.oracle.com/cd/E13214_01/wli/docs92/xref/xqisocodes.html)
            string that specifies the language used for the sample. For
            example: `en-US`.
        source_channel:
            The communication channel from which the sample was captured. Can be:
            `voice`, `sms`, `chat`, `alexa`, `google-assistant`,
            `slack`, or null if not included.
        tagged_text:
            The text example of how end users might express the task. The sample can
            contain [Field tag
            blocks](https://www.twilio.com/docs/autopilot/api/task-
            sample
            field-tagging).

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Samples/{sid}?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Samples/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Samples/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "language": language,
        "source_channel": source_channel,
        "tagged_text": tagged_text,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_assistants_assistant_sid_tasks_task_sid_statistics(
    assistant_sid: str,
    task_sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        task_sid:
            Task sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Statistics?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Statistics?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Tasks/{task_sid}/Statistics"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_assistants_assistant_sid_webhooks(
    assistant_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Webhooks?&page_size=%s](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Webhooks?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Webhooks"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_assistants_assistant_sid_webhooks(
    assistant_sid: str,
    twilio_credentials: "TwilioCredentials",
    events: str = None,
    unique_name: str = None,
    webhook_method: str = None,
    webhook_url: str = None,
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        events:
            The list of space-separated events that this Webhook will subscribe to.
        unique_name:
            An application-defined string that uniquely identifies the new resource.
            It can be used as an alternative to the `sid` in the URL
            path to address the resource. This value must be unique and
            64 characters or less in length.
        webhook_method:
            The method to be used when calling the webhook's URL.
        webhook_url:
            The URL associated with this Webhook.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Webhooks?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Webhooks?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Webhooks"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "events": events,
        "unique_name": unique_name,
        "webhook_method": webhook_method,
        "webhook_url": webhook_url,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_assistants_assistant_sid_webhooks_sid(
    assistant_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Webhooks/{sid}?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Webhooks/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Webhooks/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_assistants_assistant_sid_webhooks_sid(
    assistant_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Webhooks/{sid}?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Webhooks/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Webhooks/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_assistants_assistant_sid_webhooks_sid(
    assistant_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    events: str = None,
    unique_name: str = None,
    webhook_method: str = None,
    webhook_url: str = None,
) -> Dict[str, Any]:
    """


    Args:
        assistant_sid:
            Assistant sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        events:
            The list of space-separated events that this Webhook will subscribe to.
        unique_name:
            An application-defined string that uniquely identifies the new resource.
            It can be used as an alternative to the `sid` in the URL
            path to address the resource. This value must be unique and
            64 characters or less in length.
        webhook_method:
            The method to be used when calling the webhook's URL.
        webhook_url:
            The URL associated with this Webhook.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Webhooks/{sid}?](
    https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Webhooks/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{assistant_sid}/Webhooks/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "events": events,
        "unique_name": unique_name,
        "webhook_method": webhook_method,
        "webhook_url": webhook_url,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_assistants_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{sid}?](
    https://autopilot.twilio.com/v1/Assistants/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_assistants_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{sid}?](
    https://autopilot.twilio.com/v1/Assistants/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_assistants_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    callback_events: str = None,
    callback_url: str = None,
    defaults: str = None,
    development_stage: str = None,
    friendly_name: str = None,
    log_queries: bool = None,
    style_sheet: str = None,
    unique_name: str = None,
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        callback_events:
            Reserved.
        callback_url:
            Reserved.
        defaults:
            A JSON object that defines the Assistant's [default
            tasks](https://www.twilio.com/docs/autopilot/api/assistant/defaults)
            for various scenarios, including initiation actions and
            fallback tasks.
        development_stage:
            A string describing the state of the assistant.
        friendly_name:
            A descriptive string that you create to describe the resource. It is not
            unique and can be up to 255 characters long.
        log_queries:
            Whether queries should be logged and kept after training. Can be: `true`
            or `false` and defaults to `true`. If `true`, queries are
            stored for 30 days, and then deleted. If `false`, no queries
            are stored.
        style_sheet:
            The JSON string that defines the Assistant's [style
            sheet](https://www.twilio.com/docs/autopilot/api/assistant/stylesheet).
        unique_name:
            An application-defined string that uniquely identifies the resource. It
            can be used as an alternative to the `sid` in the URL path
            to address the resource. The first 64 characters must be
            unique.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://autopilot.twilio.com/v1/Assistants/{sid}?](
    https://autopilot.twilio.com/v1/Assistants/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://autopilot.twilio.com/v1/Assistants/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "callback_events": callback_events,
        "callback_url": callback_url,
        "defaults": defaults,
        "development_stage": development_stage,
        "friendly_name": friendly_name,
        "log_queries": log_queries,
        "style_sheet": style_sheet,
        "unique_name": unique_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_exports_jobs_job_sid(
    job_sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        job_sid:
            Job sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://bulkexports.twilio.com/v1/Exports/Jobs/{job_sid}?](
    https://bulkexports.twilio.com/v1/Exports/Jobs/{job_sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://bulkexports.twilio.com/v1/Exports/Jobs/{job_sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_exports_jobs_job_sid(
    job_sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        job_sid:
            Job sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://bulkexports.twilio.com/v1/Exports/Jobs/{job_sid}?](
    https://bulkexports.twilio.com/v1/Exports/Jobs/{job_sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://bulkexports.twilio.com/v1/Exports/Jobs/{job_sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_exports_resource_type(
    resource_type: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a specific Export.

    Args:
        resource_type:
            Resource type used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://bulkexports.twilio.com/v1/Exports/{resource_type}?](
    https://bulkexports.twilio.com/v1/Exports/{resource_type}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://bulkexports.twilio.com/v1/Exports/{resource_type}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_exports_resource_type_configuration(
    resource_type: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a specific Export Configuration.

    Args:
        resource_type:
            Resource type used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://bulkexports.twilio.com/v1/Exports/{resource_type}/Configuration?](
    https://bulkexports.twilio.com/v1/Exports/{resource_type}/Configuration?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://bulkexports.twilio.com/v1/Exports/{resource_type}/Configuration"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_exports_resource_type_configuration(
    resource_type: str,
    twilio_credentials: "TwilioCredentials",
    enabled: bool = None,
    webhook_method: str = None,
    webhook_url: str = None,
) -> Dict[str, Any]:
    """
    Update a specific Export Configuration.

    Args:
        resource_type:
            Resource type used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        enabled:
            If true, Twilio will automatically generate every day's file when the
            day is over.
        webhook_method:
            Sets whether Twilio should call a webhook URL when the automatic
            generation is complete, using GET or POST. The actual
            destination is set in the webhook_url.
        webhook_url:
            Stores the URL destination for the method specified in webhook_method.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://bulkexports.twilio.com/v1/Exports/{resource_type}/Configuration?](
    https://bulkexports.twilio.com/v1/Exports/{resource_type}/Configuration?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://bulkexports.twilio.com/v1/Exports/{resource_type}/Configuration"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "enabled": enabled,
        "webhook_method": webhook_method,
        "webhook_url": webhook_url,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_exports_resource_type_days(
    resource_type: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Days for a resource.

    Args:
        resource_type:
            Resource type used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://bulkexports.twilio.com/v1/Exports/{resource_type}/Days?&page_size=%s](
    https://bulkexports.twilio.com/v1/Exports/{resource_type}/Days?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://bulkexports.twilio.com/v1/Exports/{resource_type}/Days"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_exports_resource_type_days_day(
    resource_type: str,
    day: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a specific Day.

    Args:
        resource_type:
            Resource type used in formatting the endpoint URL.
        day:
            Day used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://bulkexports.twilio.com/v1/Exports/{resource_type}/Days/{day}?](
    https://bulkexports.twilio.com/v1/Exports/{resource_type}/Days/{day}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 307 | Temporary Redirect. |
    """  # noqa
    url = (
        f"https://bulkexports.twilio.com/v1/Exports/{resource_type}/Days/{day}"  # noqa
    )
    responses = {
        307: "Temporary Redirect.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_exports_resource_type_jobs(
    resource_type: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        resource_type:
            Resource type used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://bulkexports.twilio.com/v1/Exports/{resource_type}/Jobs?&page_size=%s](
    https://bulkexports.twilio.com/v1/Exports/{resource_type}/Jobs?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://bulkexports.twilio.com/v1/Exports/{resource_type}/Jobs"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_exports_resource_type_jobs(
    resource_type: str,
    twilio_credentials: "TwilioCredentials",
    email: str = None,
    end_day: str = None,
    friendly_name: str = None,
    start_day: str = None,
    webhook_method: str = None,
    webhook_url: str = None,
) -> Dict[str, Any]:
    """


    Args:
        resource_type:
            Resource type used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        email:
            The optional email to send the completion notification to. You can set
            both webhook, and email, or one or the other. If you set
            neither, the job will run but you will have to query to
            determine your job's status.
        end_day:
            The end day for the custom export specified as a string in the format of
            yyyy-mm-dd. End day is inclusive and must be 2 days earlier
            than the current UTC day.
        friendly_name:
            The friendly name specified when creating the job.
        start_day:
            The start day for the custom export specified as a string in the format
            of yyyy-mm-dd.
        webhook_method:
            This is the method used to call the webhook on completion of the job. If
            this is supplied, `WebhookUrl` must also be supplied.
        webhook_url:
            The optional webhook url called on completion of the job. If this is
            supplied, `WebhookMethod` must also be supplied. If you set
            neither webhook nor email, you will have to check your job's
            status manually.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://bulkexports.twilio.com/v1/Exports/{resource_type}/Jobs?](
    https://bulkexports.twilio.com/v1/Exports/{resource_type}/Jobs?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://bulkexports.twilio.com/v1/Exports/{resource_type}/Jobs"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "email": email,
        "end_day": end_day,
        "friendly_name": friendly_name,
        "start_day": start_day,
        "webhook_method": webhook_method,
        "webhook_url": webhook_url,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_credentials(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Credentials?&page_size=%s](
    https://chat.twilio.com/v1/Credentials?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://chat.twilio.com/v1/Credentials"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_credentials(
    twilio_credentials: "TwilioCredentials",
    api_key: str = None,
    certificate: str = None,
    friendly_name: str = None,
    private_key: str = None,
    sandbox: bool = None,
    secret: str = None,
    type: str = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        api_key:
            [GCM only] The API key for the project that was obtained from the Google
            Developer console for your GCM Service application
            credential.
        certificate:
            [APN only] The URL encoded representation of the certificate. For
            example,  `-----BEGIN CERTIFICATE-----
            MIIFnTCCBIWgAwIBAgIIAjy9H849+E8wDQYJKoZIhvcNAQEFBQAwgZYxCzAJBgNV.....A==
            -----END CERTIFICATE-----`.
        friendly_name:
            A descriptive string that you create to describe the new resource. It
            can be up to 64 characters long.
        private_key:
            [APN only] The URL encoded representation of the private key. For
            example, `-----BEGIN RSA PRIVATE KEY-----
            MIIEpQIBAAKCAQEAuyf/lNrH9ck8DmNyo3fGgvCI1l9s+cmBY3WIz+cUDqmxiieR.
            -----END RSA PRIVATE KEY-----`.
        sandbox:
            [APN only] Whether to send the credential to sandbox APNs. Can be `true`
            to send to sandbox APNs or `false` to send to production.
        secret:
            [FCM only] The **Server key** of your project from the Firebase console,
            found under Settings / Cloud messaging.
        type:
            The type of push-notification service the credential is for. Can be:
            `gcm`, `fcm`, or `apn`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Credentials?](
    https://chat.twilio.com/v1/Credentials?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://chat.twilio.com/v1/Credentials"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "api_key": api_key,
        "certificate": certificate,
        "friendly_name": friendly_name,
        "private_key": private_key,
        "sandbox": sandbox,
        "secret": secret,
        "type": type,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_credentials_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Credentials/{sid}?](
    https://chat.twilio.com/v1/Credentials/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Credentials/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_credentials_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Credentials/{sid}?](
    https://chat.twilio.com/v1/Credentials/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Credentials/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_credentials_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    api_key: str = None,
    certificate: str = None,
    friendly_name: str = None,
    private_key: str = None,
    sandbox: bool = None,
    secret: str = None,
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        api_key:
            [GCM only] The API key for the project that was obtained from the Google
            Developer console for your GCM Service application
            credential.
        certificate:
            [APN only] The URL encoded representation of the certificate. For
            example,  `-----BEGIN CERTIFICATE-----
            MIIFnTCCBIWgAwIBAgIIAjy9H849+E8wDQYJKoZIhvcNAQEFBQAwgZYxCzAJBgNV.....A==
            -----END CERTIFICATE-----`.
        friendly_name:
            A descriptive string that you create to describe the resource. It can be
            up to 64 characters long.
        private_key:
            [APN only] The URL encoded representation of the private key. For
            example, `-----BEGIN RSA PRIVATE KEY-----
            MIIEpQIBAAKCAQEAuyf/lNrH9ck8DmNyo3fGgvCI1l9s+cmBY3WIz+cUDqmxiieR.
            -----END RSA PRIVATE KEY-----`.
        sandbox:
            [APN only] Whether to send the credential to sandbox APNs. Can be `true`
            to send to sandbox APNs or `false` to send to production.
        secret:
            [FCM only] The **Server key** of your project from the Firebase console,
            found under Settings / Cloud messaging.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Credentials/{sid}?](
    https://chat.twilio.com/v1/Credentials/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Credentials/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "api_key": api_key,
        "certificate": certificate,
        "friendly_name": friendly_name,
        "private_key": private_key,
        "sandbox": sandbox,
        "secret": secret,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Services?&page_size=%s](
    https://chat.twilio.com/v1/Services?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://chat.twilio.com/v1/Services"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services(
    twilio_credentials: "TwilioCredentials",
    friendly_name: str = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        friendly_name:
            A descriptive string that you create to describe the resource. It can be
            up to 64 characters long.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Services?](
    https://chat.twilio.com/v1/Services?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://chat.twilio.com/v1/Services"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "friendly_name": friendly_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_service_sid_channels(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    type: list = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        type:
            The visibility of the Channels to read. Can be: `public` or `private`
            and defaults to `public`.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Services/{service_sid}/Channels?&type=%s&page_size=%s](
    https://chat.twilio.com/v1/Services/{service_sid}/Channels?&type=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Services/{service_sid}/Channels"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "type": type,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_channels(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    attributes: str = None,
    friendly_name: str = None,
    type: str = None,
    unique_name: str = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        attributes:
            A valid JSON string that contains application-specific data.
        friendly_name:
            A descriptive string that you create to describe the new resource. It
            can be up to 64 characters long.
        type:
            The visibility of the channel. Can be: `public` or `private` and
            defaults to `public`.
        unique_name:
            An application-defined string that uniquely identifies the resource. It
            can be used to address the resource in place of the
            resource's `sid` in the URL. This value must be 64
            characters or less in length and be unique within the
            Service.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Services/{service_sid}/Channels?](
    https://chat.twilio.com/v1/Services/{service_sid}/Channels?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Services/{service_sid}/Channels"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "attributes": attributes,
        "friendly_name": friendly_name,
        "type": type,
        "unique_name": unique_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_service_sid_channels_channel_sid_invites(
    service_sid: str,
    channel_sid: str,
    twilio_credentials: "TwilioCredentials",
    identity: list = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        channel_sid:
            Channel sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        identity:
            The [User](https://www.twilio.com/docs/api/chat/rest/v1/user)'s
            `identity` value of the resources to read. See [access
            tokens](https://www.twilio.com/docs/api/chat/guides/create-
            tokens) for more details.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Invites?&identity=%s&page_size=%s](
    https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Invites?&identity=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Invites"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "identity": identity,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_channels_channel_sid_invites(
    service_sid: str,
    channel_sid: str,
    twilio_credentials: "TwilioCredentials",
    identity: str = None,
    role_sid: str = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        channel_sid:
            Channel sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        identity:
            The `identity` value that uniquely identifies the new resource's
            [User](https://www.twilio.com/docs/api/chat/rest/v1/user)
            within the
            [Service](https://www.twilio.com/docs/api/chat/rest/v1/service).
            See [access
            tokens](https://www.twilio.com/docs/api/chat/guides/create-
            tokens) for more info.
        role_sid:
            The SID of the [Role](https://www.twilio.com/docs/api/chat/rest/roles)
            assigned to the new member.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Invites?](
    https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Invites?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Invites"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "identity": identity,
        "role_sid": role_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_service_sid_channels_channel_sid_invites_sid(
    service_sid: str,
    channel_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        channel_sid:
            Channel sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Invites/{sid}?](
    https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Invites/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Invites/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_channels_channel_sid_invites_sid(
    service_sid: str,
    channel_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        channel_sid:
            Channel sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Invites/{sid}?](
    https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Invites/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Invites/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_channels_channel_sid_members(
    service_sid: str,
    channel_sid: str,
    twilio_credentials: "TwilioCredentials",
    identity: list = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        channel_sid:
            Channel sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        identity:
            The [User](https://www.twilio.com/docs/api/chat/rest/v1/user)'s
            `identity` value of the resources to read. See [access
            tokens](https://www.twilio.com/docs/api/chat/guides/create-
            tokens) for more details.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Members?&identity=%s&page_size=%s](
    https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Members?&identity=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Members"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "identity": identity,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_channels_channel_sid_members(
    service_sid: str,
    channel_sid: str,
    twilio_credentials: "TwilioCredentials",
    identity: str = None,
    role_sid: str = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        channel_sid:
            Channel sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        identity:
            The `identity` value that uniquely identifies the new resource's
            [User](https://www.twilio.com/docs/api/chat/rest/v1/user)
            within the
            [Service](https://www.twilio.com/docs/api/chat/rest/services).
            See [access
            tokens](https://www.twilio.com/docs/api/chat/guides/create-
            tokens) for more details.
        role_sid:
            The SID of the [Role](https://www.twilio.com/docs/api/chat/rest/roles)
            to assign to the member. The default roles are those
            specified on the
            [Service](https://www.twilio.com/docs/chat/api/services).

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Members?](
    https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Members?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Members"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "identity": identity,
        "role_sid": role_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_service_sid_channels_channel_sid_members_sid(
    service_sid: str,
    channel_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        channel_sid:
            Channel sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Members/{sid}?](
    https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Members/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Members/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_channels_channel_sid_members_sid(
    service_sid: str,
    channel_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        channel_sid:
            Channel sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Members/{sid}?](
    https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Members/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Members/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_channels_channel_sid_members_sid(
    service_sid: str,
    channel_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    last_consumed_message_index: int = None,
    role_sid: str = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        channel_sid:
            Channel sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        last_consumed_message_index:
            The index of the last
            [Message](https://www.twilio.com/docs/api/chat/rest/messages)
            that the Member has read within the
            [Channel](https://www.twilio.com/docs/api/chat/rest/channels).
        role_sid:
            The SID of the [Role](https://www.twilio.com/docs/api/chat/rest/roles)
            to assign to the member. The default roles are those
            specified on the
            [Service](https://www.twilio.com/docs/chat/api/services).

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Members/{sid}?](
    https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Members/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Members/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "last_consumed_message_index": last_consumed_message_index,
        "role_sid": role_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_service_sid_channels_channel_sid_messages(
    service_sid: str,
    channel_sid: str,
    twilio_credentials: "TwilioCredentials",
    order: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        channel_sid:
            Channel sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        order:
            The sort order of the returned messages. Can be: `asc` (ascending) or
            `desc` (descending) with `asc` as the default.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Messages?&order=%s&page_size=%s](
    https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Messages?&order=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Messages"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "order": order,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_channels_channel_sid_messages(
    service_sid: str,
    channel_sid: str,
    twilio_credentials: "TwilioCredentials",
    attributes: str = None,
    body: str = None,
    from_: str = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        channel_sid:
            Channel sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        attributes:
            A valid JSON string that contains application-specific data.
        body:
            The message to send to the channel. Can also be an empty string or
            `null`, which sets the value as an empty string. You can
            send structured data in the body by serializing it as a
            string.
        from_:
            The [identity](https://www.twilio.com/docs/api/chat/guides/identity) of
            the new message's author. The default value is `system`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Messages?](
    https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Messages?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Messages"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "attributes": attributes,
        "body": body,
        "from_": from_,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_service_sid_channels_channel_sid_messages_sid(
    service_sid: str,
    channel_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        channel_sid:
            Channel sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Messages/{sid}?](
    https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Messages/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Messages/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_channels_channel_sid_messages_sid(
    service_sid: str,
    channel_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        channel_sid:
            Channel sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Messages/{sid}?](
    https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Messages/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Messages/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_channels_channel_sid_messages_sid(
    service_sid: str,
    channel_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    attributes: str = None,
    body: str = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        channel_sid:
            Channel sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        attributes:
            A valid JSON string that contains application-specific data.
        body:
            The message to send to the channel. Can also be an empty string or
            `null`, which sets the value as an empty string. You can
            send structured data in the body by serializing it as a
            string.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Messages/{sid}?](
    https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Messages/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Messages/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "attributes": attributes,
        "body": body,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_service_sid_channels_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Services/{service_sid}/Channels/{sid}?](
    https://chat.twilio.com/v1/Services/{service_sid}/Channels/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Services/{service_sid}/Channels/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_channels_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Services/{service_sid}/Channels/{sid}?](
    https://chat.twilio.com/v1/Services/{service_sid}/Channels/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Services/{service_sid}/Channels/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_channels_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    attributes: str = None,
    friendly_name: str = None,
    unique_name: str = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        attributes:
            A valid JSON string that contains application-specific data.
        friendly_name:
            A descriptive string that you create to describe the resource. It can be
            up to 64 characters long.
        unique_name:
            An application-defined string that uniquely identifies the resource. It
            can be used to address the resource in place of the
            resource's `sid` in the URL. This value must be 64
            characters or less in length and be unique within the
            Service.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Services/{service_sid}/Channels/{sid}?](
    https://chat.twilio.com/v1/Services/{service_sid}/Channels/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Services/{service_sid}/Channels/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "attributes": attributes,
        "friendly_name": friendly_name,
        "unique_name": unique_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_service_sid_roles(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Services/{service_sid}/Roles?&page_size=%s](
    https://chat.twilio.com/v1/Services/{service_sid}/Roles?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Services/{service_sid}/Roles"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_roles(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    friendly_name: str = None,
    permission: list = None,
    type: str = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        friendly_name:
            A descriptive string that you create to describe the new resource. It
            can be up to 64 characters long.
        permission:
            A permission that you grant to the new role. Only one permission can be
            granted per parameter. To assign more than one permission,
            repeat this parameter for each permission value. The values
            for this parameter depend on the role's `type` and are
            described in the documentation.
        type:
            The type of role. Can be: `channel` for
            [Channel](https://www.twilio.com/docs/chat/api/channels)
            roles or `deployment` for
            [Service](https://www.twilio.com/docs/chat/api/services)
            roles.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Services/{service_sid}/Roles?](
    https://chat.twilio.com/v1/Services/{service_sid}/Roles?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Services/{service_sid}/Roles"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "friendly_name": friendly_name,
        "permission": permission,
        "type": type,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_service_sid_roles_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Services/{service_sid}/Roles/{sid}?](
    https://chat.twilio.com/v1/Services/{service_sid}/Roles/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Services/{service_sid}/Roles/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_roles_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Services/{service_sid}/Roles/{sid}?](
    https://chat.twilio.com/v1/Services/{service_sid}/Roles/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Services/{service_sid}/Roles/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_roles_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    permission: list = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        permission:
            A permission that you grant to the role. Only one permission can be
            granted per parameter. To assign more than one permission,
            repeat this parameter for each permission value. The values
            for this parameter depend on the role's `type` and are
            described in the documentation.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Services/{service_sid}/Roles/{sid}?](
    https://chat.twilio.com/v1/Services/{service_sid}/Roles/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Services/{service_sid}/Roles/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "permission": permission,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_service_sid_users(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Services/{service_sid}/Users?&page_size=%s](
    https://chat.twilio.com/v1/Services/{service_sid}/Users?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Services/{service_sid}/Users"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_users(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    attributes: str = None,
    friendly_name: str = None,
    identity: str = None,
    role_sid: str = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        attributes:
            A valid JSON string that contains application-specific data.
        friendly_name:
            A descriptive string that you create to describe the new resource. This
            value is often used for display purposes.
        identity:
            The `identity` value that uniquely identifies the new resource's
            [User](https://www.twilio.com/docs/api/chat/rest/v1/user)
            within the
            [Service](https://www.twilio.com/docs/api/chat/rest/v1/service).
            This value is often a username or email address. See the
            Identity documentation for more details.
        role_sid:
            The SID of the [Role](https://www.twilio.com/docs/api/chat/rest/roles)
            assigned to the new User.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Services/{service_sid}/Users?](
    https://chat.twilio.com/v1/Services/{service_sid}/Users?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Services/{service_sid}/Users"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "attributes": attributes,
        "friendly_name": friendly_name,
        "identity": identity,
        "role_sid": role_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_service_sid_users_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Services/{service_sid}/Users/{sid}?](
    https://chat.twilio.com/v1/Services/{service_sid}/Users/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Services/{service_sid}/Users/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_users_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Services/{service_sid}/Users/{sid}?](
    https://chat.twilio.com/v1/Services/{service_sid}/Users/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Services/{service_sid}/Users/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_users_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    attributes: str = None,
    friendly_name: str = None,
    role_sid: str = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        attributes:
            A valid JSON string that contains application-specific data.
        friendly_name:
            A descriptive string that you create to describe the resource. It is
            often used for display purposes.
        role_sid:
            The SID of the [Role](https://www.twilio.com/docs/api/chat/rest/roles)
            assigned to this user.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Services/{service_sid}/Users/{sid}?](
    https://chat.twilio.com/v1/Services/{service_sid}/Users/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Services/{service_sid}/Users/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "attributes": attributes,
        "friendly_name": friendly_name,
        "role_sid": role_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_service_sid_users_user_sid_channels(
    service_sid: str,
    user_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    List all Channels for a given User.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        user_sid:
            User sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Services/{service_sid}/Users/{user_sid}/Channels?&page_size=%s](
    https://chat.twilio.com/v1/Services/{service_sid}/Users/{user_sid}/Channels?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Services/{service_sid}/Users/{user_sid}/Channels"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def delete_v1_services_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Services/{sid}?](
    https://chat.twilio.com/v1/Services/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Services/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Services/{sid}?](
    https://chat.twilio.com/v1/Services/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Services/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    consumption_report_interval: int = None,
    default_channel_creator_role_sid: str = None,
    default_channel_role_sid: str = None,
    default_service_role_sid: str = None,
    friendly_name: str = None,
    limits_channel_members: int = None,
    limits_user_channels: int = None,
    notifications_added_to_channel_enabled: bool = None,
    notifications_added_to_channel_template: str = None,
    notifications_invited_to_channel_enabled: bool = None,
    notifications_invited_to_channel_template: str = None,
    notifications_new_message_enabled: bool = None,
    notifications_new_message_template: str = None,
    notifications_removed_from_channel_enabled: bool = None,
    notifications_removed_from_channel_template: str = None,
    post_webhook_url: str = None,
    pre_webhook_url: str = None,
    reachability_enabled: bool = None,
    read_status_enabled: bool = None,
    typing_indicator_timeout: int = None,
    webhook_filters: list = None,
    webhook_method: str = None,
    webhooks_on_channel_add_method: str = None,
    webhooks_on_channel_add_url: str = None,
    webhooks_on_channel_added_method: str = None,
    webhooks_on_channel_added_url: str = None,
    webhooks_on_channel_destroy_method: str = None,
    webhooks_on_channel_destroy_url: str = None,
    webhooks_on_channel_destroyed_method: str = None,
    webhooks_on_channel_destroyed_url: str = None,
    webhooks_on_channel_update_method: str = None,
    webhooks_on_channel_update_url: str = None,
    webhooks_on_channel_updated_method: str = None,
    webhooks_on_channel_updated_url: str = None,
    webhooks_on_member_add_method: str = None,
    webhooks_on_member_add_url: str = None,
    webhooks_on_member_added_method: str = None,
    webhooks_on_member_added_url: str = None,
    webhooks_on_member_remove_method: str = None,
    webhooks_on_member_remove_url: str = None,
    webhooks_on_member_removed_method: str = None,
    webhooks_on_member_removed_url: str = None,
    webhooks_on_message_remove_method: str = None,
    webhooks_on_message_remove_url: str = None,
    webhooks_on_message_removed_method: str = None,
    webhooks_on_message_removed_url: str = None,
    webhooks_on_message_send_method: str = None,
    webhooks_on_message_send_url: str = None,
    webhooks_on_message_sent_method: str = None,
    webhooks_on_message_sent_url: str = None,
    webhooks_on_message_update_method: str = None,
    webhooks_on_message_update_url: str = None,
    webhooks_on_message_updated_method: str = None,
    webhooks_on_message_updated_url: str = None,
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        consumption_report_interval:
            DEPRECATED. The interval in seconds between consumption reports
            submission batches from client endpoints.
        default_channel_creator_role_sid:
            The channel role assigned to a channel creator when they join a new
            channel. See the [Roles
            endpoint](https://www.twilio.com/docs/chat/api/roles) for
            more details.
        default_channel_role_sid:
            The channel role assigned to users when they are added to a channel. See
            the [Roles
            endpoint](https://www.twilio.com/docs/chat/api/roles) for
            more details.
        default_service_role_sid:
            The service role assigned to users when they are added to the service.
            See the [Roles
            endpoint](https://www.twilio.com/docs/chat/api/roles) for
            more details.
        friendly_name:
            A descriptive string that you create to describe the resource. It can be
            up to 64 characters long.
        limits_channel_members:
            The maximum number of Members that can be added to Channels within this
            Service. Can be up to 1,000.
        limits_user_channels:
            The maximum number of Channels Users can be a Member of within this
            Service. Can be up to 1,000.
        notifications_added_to_channel_enabled:
            Whether to send a notification when a member is added to a channel. Can
            be: `true` or `false` and the default is `false`.
        notifications_added_to_channel_template:
            The template to use to create the notification text displayed when a
            member is added to a channel and
            `notifications.added_to_channel.enabled` is `true`.
        notifications_invited_to_channel_enabled:
            Whether to send a notification when a user is invited to a channel. Can
            be: `true` or `false` and the default is `false`.
        notifications_invited_to_channel_template:
            The template to use to create the notification text displayed when a
            user is invited to a channel and
            `notifications.invited_to_channel.enabled` is `true`.
        notifications_new_message_enabled:
            Whether to send a notification when a new message is added to a channel.
            Can be: `true` or `false` and the default is `false`.
        notifications_new_message_template:
            The template to use to create the notification text displayed when a new
            message is added to a channel and
            `notifications.new_message.enabled` is `true`.
        notifications_removed_from_channel_enabled:
            Whether to send a notification to a user when they are removed from a
            channel. Can be: `true` or `false` and the default is
            `false`.
        notifications_removed_from_channel_template:
            The template to use to create the notification text displayed to a user
            when they are removed from a channel and
            `notifications.removed_from_channel.enabled` is `true`.
        post_webhook_url:
            The URL for post-event webhooks, which are called by using the
            `webhook_method`. See [Webhook
            Events](https://www.twilio.com/docs/api/chat/webhooks) for
            more details.
        pre_webhook_url:
            The URL for pre-event webhooks, which are called by using the
            `webhook_method`. See [Webhook
            Events](https://www.twilio.com/docs/api/chat/webhooks) for
            more details.
        reachability_enabled:
            Whether to enable the [Reachability
            Indicator](https://www.twilio.com/docs/chat/reachability-
            indicator) for this Service instance. The default is
            `false`.
        read_status_enabled:
            Whether to enable the [Message Consumption
            Horizon](https://www.twilio.com/docs/chat/consumption-
            horizon) feature. The default is `true`.
        typing_indicator_timeout:
            How long in seconds after a `started typing` event until clients should
            assume that user is no longer typing, even if no `ended
            typing` message was received.  The default is 5 seconds.
        webhook_filters:
            The list of WebHook events that are enabled for this Service instance.
            See [Webhook
            Events](https://www.twilio.com/docs/chat/webhook-events) for
            more details.
        webhook_method:
            The HTTP method to use for calls to the `pre_webhook_url` and
            `post_webhook_url` webhooks.  Can be: `POST` or `GET` and
            the default is `POST`. See [Webhook
            Events](https://www.twilio.com/docs/chat/webhook-events) for
            more details.
        webhooks_on_channel_add_method:
            The HTTP method to use when calling the `webhooks.on_channel_add.url`.
        webhooks_on_channel_add_url:
            The URL of the webhook to call in response to the `on_channel_add` event
            using the `webhooks.on_channel_add.method` HTTP method.
        webhooks_on_channel_added_method:
            The URL of the webhook to call in response to the `on_channel_added`
            event`.
        webhooks_on_channel_added_url:
            The URL of the webhook to call in response to the `on_channel_added`
            event using the `webhooks.on_channel_added.method` HTTP
            method.
        webhooks_on_channel_destroy_method:
            The HTTP method to use when calling the
            `webhooks.on_channel_destroy.url`.
        webhooks_on_channel_destroy_url:
            The URL of the webhook to call in response to the `on_channel_destroy`
            event using the `webhooks.on_channel_destroy.method` HTTP
            method.
        webhooks_on_channel_destroyed_method:
            The HTTP method to use when calling the
            `webhooks.on_channel_destroyed.url`.
        webhooks_on_channel_destroyed_url:
            The URL of the webhook to call in response to the `on_channel_added`
            event using the `webhooks.on_channel_destroyed.method` HTTP
            method.
        webhooks_on_channel_update_method:
            The HTTP method to use when calling the
            `webhooks.on_channel_update.url`.
        webhooks_on_channel_update_url:
            The URL of the webhook to call in response to the `on_channel_update`
            event using the `webhooks.on_channel_update.method` HTTP
            method.
        webhooks_on_channel_updated_method:
            The HTTP method to use when calling the
            `webhooks.on_channel_updated.url`.
        webhooks_on_channel_updated_url:
            The URL of the webhook to call in response to the `on_channel_updated`
            event using the `webhooks.on_channel_updated.method` HTTP
            method.
        webhooks_on_member_add_method:
            The HTTP method to use when calling the `webhooks.on_member_add.url`.
        webhooks_on_member_add_url:
            The URL of the webhook to call in response to the `on_member_add` event
            using the `webhooks.on_member_add.method` HTTP method.
        webhooks_on_member_added_method:
            The HTTP method to use when calling the
            `webhooks.on_channel_updated.url`.
        webhooks_on_member_added_url:
            The URL of the webhook to call in response to the `on_channel_updated`
            event using the `webhooks.on_channel_updated.method` HTTP
            method.
        webhooks_on_member_remove_method:
            The HTTP method to use when calling the `webhooks.on_member_remove.url`.
        webhooks_on_member_remove_url:
            The URL of the webhook to call in response to the `on_member_remove`
            event using the `webhooks.on_member_remove.method` HTTP
            method.
        webhooks_on_member_removed_method:
            The HTTP method to use when calling the
            `webhooks.on_member_removed.url`.
        webhooks_on_member_removed_url:
            The URL of the webhook to call in response to the `on_member_removed`
            event using the `webhooks.on_member_removed.method` HTTP
            method.
        webhooks_on_message_remove_method:
            The HTTP method to use when calling the
            `webhooks.on_message_remove.url`.
        webhooks_on_message_remove_url:
            The URL of the webhook to call in response to the `on_message_remove`
            event using the `webhooks.on_message_remove.method` HTTP
            method.
        webhooks_on_message_removed_method:
            The HTTP method to use when calling the
            `webhooks.on_message_removed.url`.
        webhooks_on_message_removed_url:
            The URL of the webhook to call in response to the `on_message_removed`
            event using the `webhooks.on_message_removed.method` HTTP
            method.
        webhooks_on_message_send_method:
            The HTTP method to use when calling the `webhooks.on_message_send.url`.
        webhooks_on_message_send_url:
            The URL of the webhook to call in response to the `on_message_send`
            event using the `webhooks.on_message_send.method` HTTP
            method.
        webhooks_on_message_sent_method:
            The URL of the webhook to call in response to the `on_message_sent`
            event`.
        webhooks_on_message_sent_url:
            The URL of the webhook to call in response to the `on_message_sent`
            event using the `webhooks.on_message_sent.method` HTTP
            method.
        webhooks_on_message_update_method:
            The HTTP method to use when calling the
            `webhooks.on_message_update.url`.
        webhooks_on_message_update_url:
            The URL of the webhook to call in response to the `on_message_update`
            event using the `webhooks.on_message_update.method` HTTP
            method.
        webhooks_on_message_updated_method:
            The HTTP method to use when calling the
            `webhooks.on_message_updated.url`.
        webhooks_on_message_updated_url:
            The URL of the webhook to call in response to the `on_message_updated`
            event using the `webhooks.on_message_updated.method` HTTP
            method.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://chat.twilio.com/v1/Services/{sid}?](
    https://chat.twilio.com/v1/Services/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://chat.twilio.com/v1/Services/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "consumption_report_interval": consumption_report_interval,
        "default_channel_creator_role_sid": default_channel_creator_role_sid,
        "default_channel_role_sid": default_channel_role_sid,
        "default_service_role_sid": default_service_role_sid,
        "friendly_name": friendly_name,
        "limits_channel_members": limits_channel_members,
        "limits_user_channels": limits_user_channels,
        "notifications_added_to_channel_enabled": notifications_added_to_channel_enabled,  # noqa
        "notifications_added_to_channel_template": notifications_added_to_channel_template,  # noqa
        "notifications_invited_to_channel_enabled": notifications_invited_to_channel_enabled,  # noqa
        "notifications_invited_to_channel_template": notifications_invited_to_channel_template,  # noqa
        "notifications_new_message_enabled": notifications_new_message_enabled,
        "notifications_new_message_template": notifications_new_message_template,
        "notifications_removed_from_channel_enabled": notifications_removed_from_channel_enabled,  # noqa
        "notifications_removed_from_channel_template": notifications_removed_from_channel_template,  # noqa
        "post_webhook_url": post_webhook_url,
        "pre_webhook_url": pre_webhook_url,
        "reachability_enabled": reachability_enabled,
        "read_status_enabled": read_status_enabled,
        "typing_indicator_timeout": typing_indicator_timeout,
        "webhook_filters": webhook_filters,
        "webhook_method": webhook_method,
        "webhooks_on_channel_add_method": webhooks_on_channel_add_method,
        "webhooks_on_channel_add_url": webhooks_on_channel_add_url,
        "webhooks_on_channel_added_method": webhooks_on_channel_added_method,
        "webhooks_on_channel_added_url": webhooks_on_channel_added_url,
        "webhooks_on_channel_destroy_method": webhooks_on_channel_destroy_method,
        "webhooks_on_channel_destroy_url": webhooks_on_channel_destroy_url,
        "webhooks_on_channel_destroyed_method": webhooks_on_channel_destroyed_method,  # noqa
        "webhooks_on_channel_destroyed_url": webhooks_on_channel_destroyed_url,
        "webhooks_on_channel_update_method": webhooks_on_channel_update_method,
        "webhooks_on_channel_update_url": webhooks_on_channel_update_url,
        "webhooks_on_channel_updated_method": webhooks_on_channel_updated_method,
        "webhooks_on_channel_updated_url": webhooks_on_channel_updated_url,
        "webhooks_on_member_add_method": webhooks_on_member_add_method,
        "webhooks_on_member_add_url": webhooks_on_member_add_url,
        "webhooks_on_member_added_method": webhooks_on_member_added_method,
        "webhooks_on_member_added_url": webhooks_on_member_added_url,
        "webhooks_on_member_remove_method": webhooks_on_member_remove_method,
        "webhooks_on_member_remove_url": webhooks_on_member_remove_url,
        "webhooks_on_member_removed_method": webhooks_on_member_removed_method,
        "webhooks_on_member_removed_url": webhooks_on_member_removed_url,
        "webhooks_on_message_remove_method": webhooks_on_message_remove_method,
        "webhooks_on_message_remove_url": webhooks_on_message_remove_url,
        "webhooks_on_message_removed_method": webhooks_on_message_removed_method,
        "webhooks_on_message_removed_url": webhooks_on_message_removed_url,
        "webhooks_on_message_send_method": webhooks_on_message_send_method,
        "webhooks_on_message_send_url": webhooks_on_message_send_url,
        "webhooks_on_message_sent_method": webhooks_on_message_sent_method,
        "webhooks_on_message_sent_url": webhooks_on_message_sent_url,
        "webhooks_on_message_update_method": webhooks_on_message_update_method,
        "webhooks_on_message_update_url": webhooks_on_message_update_url,
        "webhooks_on_message_updated_method": webhooks_on_message_updated_method,
        "webhooks_on_message_updated_url": webhooks_on_message_updated_url,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_configuration(
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch the global configuration of conversations on your account.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Configuration?](
    https://conversations.twilio.com/v1/Configuration?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://conversations.twilio.com/v1/Configuration"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_configuration(
    twilio_credentials: "TwilioCredentials",
    default_chat_service_sid: str = None,
    default_closed_timer: str = None,
    default_inactive_timer: str = None,
    default_messaging_service_sid: str = None,
) -> Dict[str, Any]:
    """
    Update the global configuration of conversations on your account.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        default_chat_service_sid:
            The SID of the default [Conversation
            Service](https://www.twilio.com/docs/conversations/api/service-
            resource) to use when creating a conversation.
        default_closed_timer:
            Default ISO8601 duration when conversation will be switched to `closed`
            state. Minimum value for this timer is 10 minutes.
        default_inactive_timer:
            Default ISO8601 duration when conversation will be switched to
            `inactive` state. Minimum value for this timer is 1 minute.
        default_messaging_service_sid:
            The SID of the default [Messaging
            Service](https://www.twilio.com/docs/sms/services/api) to
            use when creating a conversation.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Configuration?](
    https://conversations.twilio.com/v1/Configuration?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://conversations.twilio.com/v1/Configuration"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "default_chat_service_sid": default_chat_service_sid,
        "default_closed_timer": default_closed_timer,
        "default_inactive_timer": default_inactive_timer,
        "default_messaging_service_sid": default_messaging_service_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_configuration_addresses(
    twilio_credentials: "TwilioCredentials",
    type: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of address configurations for an account.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        type:
            Filter the address configurations by its type. This value can be one of:
            `whatsapp`, `sms`.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Configuration/Addresses?&type=%s&page_size=%s](
    https://conversations.twilio.com/v1/Configuration/Addresses?&type=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://conversations.twilio.com/v1/Configuration/Addresses"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "type": type,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_configuration_addresses(
    twilio_credentials: "TwilioCredentials",
    address: str = None,
    auto_creation_conversation_service_sid: str = None,
    auto_creation_enabled: bool = None,
    auto_creation_studio_flow_sid: str = None,
    auto_creation_studio_retry_count: int = None,
    auto_creation_type: str = None,
    auto_creation_webhook_filters: list = None,
    auto_creation_webhook_method: str = None,
    auto_creation_webhook_url: str = None,
    friendly_name: str = None,
    type: str = None,
) -> Dict[str, Any]:
    """
    Create a new address configuration.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        address:
            The unique address to be configured. The address can be a whatsapp
            address or phone number.
        auto_creation_conversation_service_sid:
            Conversation Service for the auto-created conversation. If not set, the
            conversation is created in the default service.
        auto_creation_enabled:
            Enable/Disable auto-creating conversations for messages to this address.
        auto_creation_studio_flow_sid:
            For type `studio`, the studio flow SID where the webhook should be sent
            to.
        auto_creation_studio_retry_count:
            For type `studio`, number of times to retry the webhook request.
        auto_creation_type:
            Type of Auto Creation. Value can be one of `webhook`, `studio` or
            `default`.
        auto_creation_webhook_filters:
            The list of events, firing webhook event for this Conversation. Values
            can be any of the following: `onMessageAdded`,
            `onMessageUpdated`, `onMessageRemoved`,
            `onConversationUpdated`, `onConversationStateUpdated`,
            `onConversationRemoved`, `onParticipantAdded`,
            `onParticipantUpdated`, `onParticipantRemoved`,
            `onDeliveryUpdated`.
        auto_creation_webhook_method:
            For type `webhook`, the HTTP method to be used when sending a webhook
            request.
        auto_creation_webhook_url:
            For type `webhook`, the url for the webhook request.
        friendly_name:
            The human-readable name of this configuration, limited to 256
            characters. Optional.
        type:
            Type of Address. Value can be `whatsapp` or `sms`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Configuration/Addresses?](
    https://conversations.twilio.com/v1/Configuration/Addresses?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://conversations.twilio.com/v1/Configuration/Addresses"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "address": address,
        "auto_creation_conversation_service_sid": auto_creation_conversation_service_sid,  # noqa
        "auto_creation_enabled": auto_creation_enabled,
        "auto_creation_studio_flow_sid": auto_creation_studio_flow_sid,
        "auto_creation_studio_retry_count": auto_creation_studio_retry_count,
        "auto_creation_type": auto_creation_type,
        "auto_creation_webhook_filters": auto_creation_webhook_filters,
        "auto_creation_webhook_method": auto_creation_webhook_method,
        "auto_creation_webhook_url": auto_creation_webhook_url,
        "friendly_name": friendly_name,
        "type": type,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_configuration_addresses_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Remove an existing address configuration.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Configuration/Addresses/{sid}?](
    https://conversations.twilio.com/v1/Configuration/Addresses/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Configuration/Addresses/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_configuration_addresses_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch an address configuration.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Configuration/Addresses/{sid}?](
    https://conversations.twilio.com/v1/Configuration/Addresses/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Configuration/Addresses/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_configuration_addresses_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    auto_creation_conversation_service_sid: str = None,
    auto_creation_enabled: bool = None,
    auto_creation_studio_flow_sid: str = None,
    auto_creation_studio_retry_count: int = None,
    auto_creation_type: str = None,
    auto_creation_webhook_filters: list = None,
    auto_creation_webhook_method: str = None,
    auto_creation_webhook_url: str = None,
    friendly_name: str = None,
) -> Dict[str, Any]:
    """
    Update an existing address configuration.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        auto_creation_conversation_service_sid:
            Conversation Service for the auto-created conversation. If not set, the
            conversation is created in the default service.
        auto_creation_enabled:
            Enable/Disable auto-creating conversations for messages to this address.
        auto_creation_studio_flow_sid:
            For type `studio`, the studio flow SID where the webhook should be sent
            to.
        auto_creation_studio_retry_count:
            For type `studio`, number of times to retry the webhook request.
        auto_creation_type:
            Type of Auto Creation. Value can be one of `webhook`, `studio` or
            `default`.
        auto_creation_webhook_filters:
            The list of events, firing webhook event for this Conversation. Values
            can be any of the following: `onMessageAdded`,
            `onMessageUpdated`, `onMessageRemoved`,
            `onConversationUpdated`, `onConversationStateUpdated`,
            `onConversationRemoved`, `onParticipantAdded`,
            `onParticipantUpdated`, `onParticipantRemoved`,
            `onDeliveryUpdated`.
        auto_creation_webhook_method:
            For type `webhook`, the HTTP method to be used when sending a webhook
            request.
        auto_creation_webhook_url:
            For type `webhook`, the url for the webhook request.
        friendly_name:
            The human-readable name of this configuration, limited to 256
            characters. Optional.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Configuration/Addresses/{sid}?](
    https://conversations.twilio.com/v1/Configuration/Addresses/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Configuration/Addresses/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "auto_creation_conversation_service_sid": auto_creation_conversation_service_sid,  # noqa
        "auto_creation_enabled": auto_creation_enabled,
        "auto_creation_studio_flow_sid": auto_creation_studio_flow_sid,
        "auto_creation_studio_retry_count": auto_creation_studio_retry_count,
        "auto_creation_type": auto_creation_type,
        "auto_creation_webhook_filters": auto_creation_webhook_filters,
        "auto_creation_webhook_method": auto_creation_webhook_method,
        "auto_creation_webhook_url": auto_creation_webhook_url,
        "friendly_name": friendly_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_configuration_webhooks(
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Configuration/Webhooks?](
    https://conversations.twilio.com/v1/Configuration/Webhooks?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://conversations.twilio.com/v1/Configuration/Webhooks"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_configuration_webhooks(
    twilio_credentials: "TwilioCredentials",
    filters: list = None,
    method: str = None,
    post_webhook_url: str = None,
    pre_webhook_url: str = None,
    target: str = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        filters:
            The list of webhook event triggers that are enabled for this Service:
            `onMessageAdded`, `onMessageUpdated`, `onMessageRemoved`,
            `onConversationUpdated`, `onConversationRemoved`,
            `onParticipantAdded`, `onParticipantUpdated`,
            `onParticipantRemoved`.
        method:
            The HTTP method to be used when sending a webhook request.
        post_webhook_url:
            The absolute url the post-event webhook request should be sent to.
        pre_webhook_url:
            The absolute url the pre-event webhook request should be sent to.
        target:
            The routing target of the webhook.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Configuration/Webhooks?](
    https://conversations.twilio.com/v1/Configuration/Webhooks?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://conversations.twilio.com/v1/Configuration/Webhooks"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "filters": filters,
        "method": method,
        "post_webhook_url": post_webhook_url,
        "pre_webhook_url": pre_webhook_url,
        "target": target,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_conversations(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of conversations in your account's default service.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Conversations?&page_size=%s](
    https://conversations.twilio.com/v1/Conversations?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://conversations.twilio.com/v1/Conversations"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_conversations(
    twilio_credentials: "TwilioCredentials",
    x_twilio_webhook_enabled: str = None,
    attributes: str = None,
    date_created: str = None,
    date_updated: str = None,
    friendly_name: str = None,
    messaging_service_sid: str = None,
    state: str = None,
    timers_closed: str = None,
    timers_inactive: str = None,
    unique_name: str = None,
) -> Dict[str, Any]:
    """
    Create a new conversation in your account's default service.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        x_twilio_webhook_enabled:
            The X-Twilio-Webhook-Enabled HTTP request header.
        attributes:
            An optional string metadata field you can use to store any data you
            wish. The string value must contain structurally valid JSON
            if specified.  **Note** that if the attributes are not set
            "{}" will be returned.
        date_created:
            The date that this resource was created.
        date_updated:
            The date that this resource was last updated.
        friendly_name:
            The human-readable name of this conversation, limited to 256 characters.
            Optional.
        messaging_service_sid:
            The unique ID of the [Messaging
            Service](https://www.twilio.com/docs/sms/services/api) this
            conversation belongs to.
        state:
            Current state of this conversation. Can be either `active`, `inactive`
            or `closed` and defaults to `active`.
        timers_closed:
            ISO8601 duration when conversation will be switched to `closed` state.
            Minimum value for this timer is 10 minutes.
        timers_inactive:
            ISO8601 duration when conversation will be switched to `inactive` state.
            Minimum value for this timer is 1 minute.
        unique_name:
            An application-defined string that uniquely identifies the resource. It
            can be used to address the resource in place of the
            resource's `sid` in the URL.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Conversations?&x_twilio_webhook_enabled=%s](
    https://conversations.twilio.com/v1/Conversations?&x_twilio_webhook_enabled=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://conversations.twilio.com/v1/Conversations"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    params = {
        "x_twilio_webhook_enabled": x_twilio_webhook_enabled,
    }

    data = {
        "attributes": attributes,
        "date_created": date_created,
        "date_updated": date_updated,
        "friendly_name": friendly_name,
        "messaging_service_sid": messaging_service_sid,
        "state": state,
        "timers_closed": timers_closed,
        "timers_inactive": timers_inactive,
        "unique_name": unique_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        params=params,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_conversations_conversation_sid_messages(
    conversation_sid: str,
    twilio_credentials: "TwilioCredentials",
    order: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all messages in the conversation.

    Args:
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        order:
            The sort order of the returned messages. Can be: `asc` (ascending) or
            `desc` (descending), with `asc` as the default.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Messages?&order=%s&page_size=%s](
    https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Messages?&order=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Messages"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "order": order,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_conversations_conversation_sid_messages(
    conversation_sid: str,
    twilio_credentials: "TwilioCredentials",
    x_twilio_webhook_enabled: str = None,
    attributes: str = None,
    author: str = None,
    body: str = None,
    date_created: str = None,
    date_updated: str = None,
    media_sid: str = None,
) -> Dict[str, Any]:
    """
    Add a new message to the conversation.

    Args:
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        x_twilio_webhook_enabled:
            The X-Twilio-Webhook-Enabled HTTP request header.
        attributes:
            A string metadata field you can use to store any data you wish. The
            string value must contain structurally valid JSON if
            specified.  **Note** that if the attributes are not set "{}"
            will be returned.
        author:
            The channel specific identifier of the message's author. Defaults to
            `system`.
        body:
            The content of the message, can be up to 1,600 characters long.
        date_created:
            The date that this resource was created.
        date_updated:
            The date that this resource was last updated. `null` if the message has
            not been edited.
        media_sid:
            The Media SID to be attached to the new Message.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Messages?&x_twilio_webhook_enabled=%s](
    https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Messages?&x_twilio_webhook_enabled=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Messages"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    params = {
        "x_twilio_webhook_enabled": x_twilio_webhook_enabled,
    }

    data = {
        "attributes": attributes,
        "author": author,
        "body": body,
        "date_created": date_created,
        "date_updated": date_updated,
        "media_sid": media_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        params=params,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_conversations_conversation_sid_messages_message_sid_receipts(
    conversation_sid: str,
    message_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all delivery and read receipts of the conversation message.

    Args:
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        message_sid:
            Message sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Messages/{message_sid}/Receipts?&page_size=%s](
    https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Messages/{message_sid}/Receipts?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Messages/{message_sid}/Receipts"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_conversations_conversation_sid_messages_message_sid_receipts_sid(
    conversation_sid: str,
    message_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch the delivery and read receipts of the conversation message.

    Args:
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        message_sid:
            Message sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Messages/{message_sid}/Receipts/{sid}?](
    https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Messages/{message_sid}/Receipts/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Messages/{message_sid}/Receipts/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def delete_v1_conversations_conversation_sid_messages_sid(
    conversation_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    x_twilio_webhook_enabled: str = None,
) -> Dict[str, Any]:
    """
    Remove a message from the conversation.

    Args:
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        x_twilio_webhook_enabled:
            The X-Twilio-Webhook-Enabled HTTP request header.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Messages/{sid}?&x_twilio_webhook_enabled=%s](
    https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Messages/{sid}?&x_twilio_webhook_enabled=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Messages/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    params = {
        "x_twilio_webhook_enabled": x_twilio_webhook_enabled,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_conversations_conversation_sid_messages_sid(
    conversation_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a message from the conversation.

    Args:
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Messages/{sid}?](
    https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Messages/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Messages/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_conversations_conversation_sid_messages_sid(
    conversation_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    x_twilio_webhook_enabled: str = None,
    attributes: str = None,
    author: str = None,
    body: str = None,
    date_created: str = None,
    date_updated: str = None,
) -> Dict[str, Any]:
    """
    Update an existing message in the conversation.

    Args:
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        x_twilio_webhook_enabled:
            The X-Twilio-Webhook-Enabled HTTP request header.
        attributes:
            A string metadata field you can use to store any data you wish. The
            string value must contain structurally valid JSON if
            specified.  **Note** that if the attributes are not set "{}"
            will be returned.
        author:
            The channel specific identifier of the message's author. Defaults to
            `system`.
        body:
            The content of the message, can be up to 1,600 characters long.
        date_created:
            The date that this resource was created.
        date_updated:
            The date that this resource was last updated. `null` if the message has
            not been edited.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Messages/{sid}?&x_twilio_webhook_enabled=%s](
    https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Messages/{sid}?&x_twilio_webhook_enabled=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Messages/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "x_twilio_webhook_enabled": x_twilio_webhook_enabled,
    }

    data = {
        "attributes": attributes,
        "author": author,
        "body": body,
        "date_created": date_created,
        "date_updated": date_updated,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        params=params,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_conversations_conversation_sid_participants(
    conversation_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all participants of the conversation.

    Args:
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Participants?&page_size=%s](
    https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Participants?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Participants"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_conversations_conversation_sid_participants(
    conversation_sid: str,
    twilio_credentials: "TwilioCredentials",
    x_twilio_webhook_enabled: str = None,
    attributes: str = None,
    date_created: str = None,
    date_updated: str = None,
    identity: str = None,
    messaging_binding_address: str = None,
    messaging_binding_projected_address: str = None,
    messaging_binding_proxy_address: str = None,
    role_sid: str = None,
) -> Dict[str, Any]:
    """
    Add a new participant to the conversation.

    Args:
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        x_twilio_webhook_enabled:
            The X-Twilio-Webhook-Enabled HTTP request header.
        attributes:
            An optional string metadata field you can use to store any data you
            wish. The string value must contain structurally valid JSON
            if specified.  **Note** that if the attributes are not set
            "{}" will be returned.
        date_created:
            The date that this resource was created.
        date_updated:
            The date that this resource was last updated.
        identity:
            A unique string identifier for the conversation participant as
            [Conversation
            User](https://www.twilio.com/docs/conversations/api/user-
            resource). This parameter is non-null if (and only if) the
            participant is using the Conversations SDK to communicate.
            Limited to 256 characters.
        messaging_binding_address:
            The address of the participant's device, e.g. a phone or WhatsApp
            number. Together with the Proxy address, this determines a
            participant uniquely. This field (with proxy_address) is
            only null when the participant is interacting from an SDK
            endpoint (see the 'identity' field).
        messaging_binding_projected_address:
            The address of the Twilio phone number that is used in Group MMS.
            Communication mask for the Conversation participant with
            Identity.
        messaging_binding_proxy_address:
            The address of the Twilio phone number (or WhatsApp number) that the
            participant is in contact with. This field, together with
            participant address, is only null when the participant is
            interacting from an SDK endpoint (see the 'identity' field).
        role_sid:
            The SID of a conversation-level
            [Role](https://www.twilio.com/docs/conversations/api/role-
            resource) to assign to the participant.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Participants?&x_twilio_webhook_enabled=%s](
    https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Participants?&x_twilio_webhook_enabled=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Participants"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    params = {
        "x_twilio_webhook_enabled": x_twilio_webhook_enabled,
    }

    data = {
        "attributes": attributes,
        "date_created": date_created,
        "date_updated": date_updated,
        "identity": identity,
        "messaging_binding_address": messaging_binding_address,
        "messaging_binding_projected_address": messaging_binding_projected_address,
        "messaging_binding_proxy_address": messaging_binding_proxy_address,
        "role_sid": role_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        params=params,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_conversations_conversation_sid_participants_sid(
    conversation_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    x_twilio_webhook_enabled: str = None,
) -> Dict[str, Any]:
    """
    Remove a participant from the conversation.

    Args:
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        x_twilio_webhook_enabled:
            The X-Twilio-Webhook-Enabled HTTP request header.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Participants/{sid}?&x_twilio_webhook_enabled=%s](
    https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Participants/{sid}?&x_twilio_webhook_enabled=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Participants/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    params = {
        "x_twilio_webhook_enabled": x_twilio_webhook_enabled,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_conversations_conversation_sid_participants_sid(
    conversation_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a participant of the conversation.

    Args:
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Participants/{sid}?](
    https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Participants/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Participants/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_conversations_conversation_sid_participants_sid(
    conversation_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    x_twilio_webhook_enabled: str = None,
    attributes: str = None,
    date_created: str = None,
    date_updated: str = None,
    identity: str = None,
    last_read_message_index: int = None,
    last_read_timestamp: str = None,
    messaging_binding_projected_address: str = None,
    messaging_binding_proxy_address: str = None,
    role_sid: str = None,
) -> Dict[str, Any]:
    """
    Update an existing participant in the conversation.

    Args:
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        x_twilio_webhook_enabled:
            The X-Twilio-Webhook-Enabled HTTP request header.
        attributes:
            An optional string metadata field you can use to store any data you
            wish. The string value must contain structurally valid JSON
            if specified.  **Note** that if the attributes are not set
            "{}" will be returned.
        date_created:
            The date that this resource was created.
        date_updated:
            The date that this resource was last updated.
        identity:
            A unique string identifier for the conversation participant as
            [Conversation
            User](https://www.twilio.com/docs/conversations/api/user-
            resource). This parameter is non-null if (and only if) the
            participant is using the Conversations SDK to communicate.
            Limited to 256 characters.
        last_read_message_index:
            Index of last “read” message in the
            [Conversation](https://www.twilio.com/docs/conversations/api/conversation-
            resource) for the Participant.
        last_read_timestamp:
            Timestamp of last “read” message in the
            [Conversation](https://www.twilio.com/docs/conversations/api/conversation-
            resource) for the Participant.
        messaging_binding_projected_address:
            The address of the Twilio phone number that is used in Group MMS. 'null'
            value will remove it.
        messaging_binding_proxy_address:
            The address of the Twilio phone number that the participant is in
            contact with. 'null' value will remove it.
        role_sid:
            The SID of a conversation-level
            [Role](https://www.twilio.com/docs/conversations/api/role-
            resource) to assign to the participant.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Participants/{sid}?&x_twilio_webhook_enabled=%s](
    https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Participants/{sid}?&x_twilio_webhook_enabled=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Participants/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "x_twilio_webhook_enabled": x_twilio_webhook_enabled,
    }

    data = {
        "attributes": attributes,
        "date_created": date_created,
        "date_updated": date_updated,
        "identity": identity,
        "last_read_message_index": last_read_message_index,
        "last_read_timestamp": last_read_timestamp,
        "messaging_binding_projected_address": messaging_binding_projected_address,
        "messaging_binding_proxy_address": messaging_binding_proxy_address,
        "role_sid": role_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        params=params,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_conversations_conversation_sid_webhooks(
    conversation_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all webhooks scoped to the conversation.

    Args:
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Webhooks?&page_size=%s](
    https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Webhooks?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Webhooks"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_conversations_conversation_sid_webhooks(
    conversation_sid: str,
    twilio_credentials: "TwilioCredentials",
    configuration_filters: list = None,
    configuration_flow_sid: str = None,
    configuration_method: str = None,
    configuration_replay_after: int = None,
    configuration_triggers: list = None,
    configuration_url: str = None,
    target: str = None,
) -> Dict[str, Any]:
    """
    Create a new webhook scoped to the conversation.

    Args:
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        configuration_filters:
            The list of events, firing webhook event for this Conversation.
        configuration_flow_sid:
            The studio flow SID, where the webhook should be sent to.
        configuration_method:
            The HTTP method to be used when sending a webhook request.
        configuration_replay_after:
            The message index for which and it's successors the webhook will be
            replayed. Not set by default.
        configuration_triggers:
            The list of keywords, firing webhook event for this Conversation.
        configuration_url:
            The absolute url the webhook request should be sent to.
        target:
            The target of this webhook: `webhook`, `studio`, `trigger`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Webhooks?](
    https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Webhooks?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Webhooks"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "configuration_filters": configuration_filters,
        "configuration_flow_sid": configuration_flow_sid,
        "configuration_method": configuration_method,
        "configuration_replay_after": configuration_replay_after,
        "configuration_triggers": configuration_triggers,
        "configuration_url": configuration_url,
        "target": target,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_conversations_conversation_sid_webhooks_sid(
    conversation_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Remove an existing webhook scoped to the conversation.

    Args:
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Webhooks/{sid}?](
    https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Webhooks/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Webhooks/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_conversations_conversation_sid_webhooks_sid(
    conversation_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch the configuration of a conversation-scoped webhook.

    Args:
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Webhooks/{sid}?](
    https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Webhooks/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Webhooks/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_conversations_conversation_sid_webhooks_sid(
    conversation_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    configuration_filters: list = None,
    configuration_flow_sid: str = None,
    configuration_method: str = None,
    configuration_triggers: list = None,
    configuration_url: str = None,
) -> Dict[str, Any]:
    """
    Update an existing conversation-scoped webhook.

    Args:
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        configuration_filters:
            The list of events, firing webhook event for this Conversation.
        configuration_flow_sid:
            The studio flow SID, where the webhook should be sent to.
        configuration_method:
            The HTTP method to be used when sending a webhook request.
        configuration_triggers:
            The list of keywords, firing webhook event for this Conversation.
        configuration_url:
            The absolute url the webhook request should be sent to.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Webhooks/{sid}?](
    https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Webhooks/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Conversations/{conversation_sid}/Webhooks/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "configuration_filters": configuration_filters,
        "configuration_flow_sid": configuration_flow_sid,
        "configuration_method": configuration_method,
        "configuration_triggers": configuration_triggers,
        "configuration_url": configuration_url,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_conversations_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    x_twilio_webhook_enabled: str = None,
) -> Dict[str, Any]:
    """
    Remove a conversation from your account's default service.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        x_twilio_webhook_enabled:
            The X-Twilio-Webhook-Enabled HTTP request header.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Conversations/{sid}?&x_twilio_webhook_enabled=%s](
    https://conversations.twilio.com/v1/Conversations/{sid}?&x_twilio_webhook_enabled=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Conversations/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    params = {
        "x_twilio_webhook_enabled": x_twilio_webhook_enabled,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_conversations_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a conversation from your account's default service.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Conversations/{sid}?](
    https://conversations.twilio.com/v1/Conversations/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Conversations/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_conversations_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    x_twilio_webhook_enabled: str = None,
    attributes: str = None,
    date_created: str = None,
    date_updated: str = None,
    friendly_name: str = None,
    messaging_service_sid: str = None,
    state: str = None,
    timers_closed: str = None,
    timers_inactive: str = None,
    unique_name: str = None,
) -> Dict[str, Any]:
    """
    Update an existing conversation in your account's default service.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        x_twilio_webhook_enabled:
            The X-Twilio-Webhook-Enabled HTTP request header.
        attributes:
            An optional string metadata field you can use to store any data you
            wish. The string value must contain structurally valid JSON
            if specified.  **Note** that if the attributes are not set
            "{}" will be returned.
        date_created:
            The date that this resource was created.
        date_updated:
            The date that this resource was last updated.
        friendly_name:
            The human-readable name of this conversation, limited to 256 characters.
            Optional.
        messaging_service_sid:
            The unique ID of the [Messaging
            Service](https://www.twilio.com/docs/sms/services/api) this
            conversation belongs to.
        state:
            Current state of this conversation. Can be either `active`, `inactive`
            or `closed` and defaults to `active`.
        timers_closed:
            ISO8601 duration when conversation will be switched to `closed` state.
            Minimum value for this timer is 10 minutes.
        timers_inactive:
            ISO8601 duration when conversation will be switched to `inactive` state.
            Minimum value for this timer is 1 minute.
        unique_name:
            An application-defined string that uniquely identifies the resource. It
            can be used to address the resource in place of the
            resource's `sid` in the URL.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Conversations/{sid}?&x_twilio_webhook_enabled=%s](
    https://conversations.twilio.com/v1/Conversations/{sid}?&x_twilio_webhook_enabled=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Conversations/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "x_twilio_webhook_enabled": x_twilio_webhook_enabled,
    }

    data = {
        "attributes": attributes,
        "date_created": date_created,
        "date_updated": date_updated,
        "friendly_name": friendly_name,
        "messaging_service_sid": messaging_service_sid,
        "state": state,
        "timers_closed": timers_closed,
        "timers_inactive": timers_inactive,
        "unique_name": unique_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        params=params,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_credentials(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all push notification credentials on your account.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Credentials?&page_size=%s](
    https://conversations.twilio.com/v1/Credentials?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://conversations.twilio.com/v1/Credentials"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_credentials(
    twilio_credentials: "TwilioCredentials",
    api_key: str = None,
    certificate: str = None,
    friendly_name: str = None,
    private_key: str = None,
    sandbox: bool = None,
    secret: str = None,
    type: str = None,
) -> Dict[str, Any]:
    """
    Add a new push notification credential to your account.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        api_key:
            [GCM only] The API key for the project that was obtained from the Google
            Developer console for your GCM Service application
            credential.
        certificate:
            [APN only] The URL encoded representation of the certificate. For
            example,  `-----BEGIN CERTIFICATE-----
            MIIFnTCCBIWgAwIBAgIIAjy9H849+E8wDQYJKoZIhvcNAQEF.....A==
            -----END CERTIFICATE-----`.
        friendly_name:
            A descriptive string that you create to describe the new resource. It
            can be up to 64 characters long.
        private_key:
            [APN only] The URL encoded representation of the private key. For
            example, `-----BEGIN RSA PRIVATE KEY-----
            MIIEpQIBAAKCAQEAuyf/lNrH9ck8DmNyo3fG... -----END RSA PRIVATE
            KEY-----`.
        sandbox:
            [APN only] Whether to send the credential to sandbox APNs. Can be `true`
            to send to sandbox APNs or `false` to send to production.
        secret:
            [FCM only] The **Server key** of your project from the Firebase console,
            found under Settings / Cloud messaging.
        type:
            The type of push-notification service the credential is for. Can be:
            `fcm`, `gcm`, or `apn`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Credentials?](
    https://conversations.twilio.com/v1/Credentials?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://conversations.twilio.com/v1/Credentials"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "api_key": api_key,
        "certificate": certificate,
        "friendly_name": friendly_name,
        "private_key": private_key,
        "sandbox": sandbox,
        "secret": secret,
        "type": type,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_credentials_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Remove a push notification credential from your account.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Credentials/{sid}?](
    https://conversations.twilio.com/v1/Credentials/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Credentials/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_credentials_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a push notification credential from your account.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Credentials/{sid}?](
    https://conversations.twilio.com/v1/Credentials/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Credentials/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_credentials_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    api_key: str = None,
    certificate: str = None,
    friendly_name: str = None,
    private_key: str = None,
    sandbox: bool = None,
    secret: str = None,
    type: str = None,
) -> Dict[str, Any]:
    """
    Update an existing push notification credential on your account.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        api_key:
            [GCM only] The API key for the project that was obtained from the Google
            Developer console for your GCM Service application
            credential.
        certificate:
            [APN only] The URL encoded representation of the certificate. For
            example,  `-----BEGIN CERTIFICATE-----
            MIIFnTCCBIWgAwIBAgIIAjy9H849+E8wDQYJKoZIhvcNAQEF.....A==
            -----END CERTIFICATE-----`.
        friendly_name:
            A descriptive string that you create to describe the new resource. It
            can be up to 64 characters long.
        private_key:
            [APN only] The URL encoded representation of the private key. For
            example, `-----BEGIN RSA PRIVATE KEY-----
            MIIEpQIBAAKCAQEAuyf/lNrH9ck8DmNyo3fG... -----END RSA PRIVATE
            KEY-----`.
        sandbox:
            [APN only] Whether to send the credential to sandbox APNs. Can be `true`
            to send to sandbox APNs or `false` to send to production.
        secret:
            [FCM only] The **Server key** of your project from the Firebase console,
            found under Settings / Cloud messaging.
        type:
            The type of push-notification service the credential is for. Can be:
            `fcm`, `gcm`, or `apn`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Credentials/{sid}?](
    https://conversations.twilio.com/v1/Credentials/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Credentials/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "api_key": api_key,
        "certificate": certificate,
        "friendly_name": friendly_name,
        "private_key": private_key,
        "sandbox": sandbox,
        "secret": secret,
        "type": type,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_participant_conversations(
    twilio_credentials: "TwilioCredentials",
    identity: str = None,
    address: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Conversations that this Participant belongs to by
    identity or by address. Only one parameter should be specified.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        identity:
            A unique string identifier for the conversation participant as
            [Conversation
            User](https://www.twilio.com/docs/conversations/api/user-
            resource). This parameter is non-null if (and only if) the
            participant is using the Conversations SDK to communicate.
            Limited to 256 characters.
        address:
            A unique string identifier for the conversation participant who's not a
            Conversation User. This parameter could be found in
            messaging_binding.address field of Participant resource. It
            should be url-encoded.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/ParticipantConversations?&identity=%s&address=%s&page_size=%s](
    https://conversations.twilio.com/v1/ParticipantConversations?&identity=%s&address=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://conversations.twilio.com/v1/ParticipantConversations"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "identity": identity,
        "address": address,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_roles(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all user roles in your account's default service.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Roles?&page_size=%s](
    https://conversations.twilio.com/v1/Roles?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://conversations.twilio.com/v1/Roles"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_roles(
    twilio_credentials: "TwilioCredentials",
    friendly_name: str = None,
    permission: list = None,
    type: str = None,
) -> Dict[str, Any]:
    """
    Create a new user role in your account's default service.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        friendly_name:
            A descriptive string that you create to describe the new resource. It
            can be up to 64 characters long.
        permission:
            A permission that you grant to the new role. Only one permission can be
            granted per parameter. To assign more than one permission,
            repeat this parameter for each permission value. The values
            for this parameter depend on the role's `type`.
        type:
            The type of role. Can be: `conversation` for
            [Conversation](https://www.twilio.com/docs/conversations/api/conversation-
            resource) roles or `service` for [Conversation
            Service](https://www.twilio.com/docs/conversations/api/service-
            resource) roles.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Roles?](
    https://conversations.twilio.com/v1/Roles?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://conversations.twilio.com/v1/Roles"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "friendly_name": friendly_name,
        "permission": permission,
        "type": type,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_roles_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Remove a user role from your account's default service.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Roles/{sid}?](
    https://conversations.twilio.com/v1/Roles/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Roles/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_roles_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a user role from your account's default service.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Roles/{sid}?](
    https://conversations.twilio.com/v1/Roles/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Roles/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_roles_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    permission: list = None,
) -> Dict[str, Any]:
    """
    Update an existing user role in your account's default service.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        permission:
            A permission that you grant to the role. Only one permission can be
            granted per parameter. To assign more than one permission,
            repeat this parameter for each permission value. Note that
            the update action replaces all previously assigned
            permissions with those defined in the update action. To
            remove a permission, do not include it in the subsequent
            update action. The values for this parameter depend on the
            role's `type`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Roles/{sid}?](
    https://conversations.twilio.com/v1/Roles/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Roles/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "permission": permission,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all conversation services on your account.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services?&page_size=%s](
    https://conversations.twilio.com/v1/Services?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://conversations.twilio.com/v1/Services"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services(
    twilio_credentials: "TwilioCredentials",
    friendly_name: str = None,
) -> Dict[str, Any]:
    """
    Create a new conversation service on your account.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        friendly_name:
            The human-readable name of this service, limited to 256 characters.
            Optional.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services?](
    https://conversations.twilio.com/v1/Services?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://conversations.twilio.com/v1/Services"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "friendly_name": friendly_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_chat_service_sid_bindings(
    chat_service_sid: str,
    twilio_credentials: "TwilioCredentials",
    binding_type: list = None,
    identity: list = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all push notification bindings in the conversation service.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        binding_type:
            The push technology used by the Binding resources to read.  Can be:
            `apn`, `gcm`, or `fcm`.  See [push notification
            configuration](https://www.twilio.com/docs/chat/push-
            notification-configuration) for more info.
        identity:
            The identity of a [Conversation
            User](https://www.twilio.com/docs/conversations/api/user-
            resource) this binding belongs to. See [access
            tokens](https://www.twilio.com/docs/conversations/create-
            tokens) for more details.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Bindings?&binding_type=%s&identity=%s&page_size=%s](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Bindings?&binding_type=%s&identity=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Bindings"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "binding_type": binding_type,
        "identity": identity,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def delete_v1_services_chat_service_sid_bindings_sid(
    chat_service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Remove a push notification binding from the conversation service.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Bindings/{sid}?](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Bindings/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Bindings/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_chat_service_sid_bindings_sid(
    chat_service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a push notification binding from the conversation service.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Bindings/{sid}?](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Bindings/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Bindings/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_services_chat_service_sid_configuration(
    chat_service_sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch the configuration of a conversation service.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Configuration?](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Configuration?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Configuration"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_chat_service_sid_configuration(
    chat_service_sid: str,
    twilio_credentials: "TwilioCredentials",
    default_chat_service_role_sid: str = None,
    default_conversation_creator_role_sid: str = None,
    default_conversation_role_sid: str = None,
    reachability_enabled: bool = None,
) -> Dict[str, Any]:
    """
    Update configuration settings of a conversation service.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        default_chat_service_role_sid:
            The service-level role assigned to users when they are added to the
            service. See the [Conversation
            Role](https://www.twilio.com/docs/conversations/api/role-
            resource) for more info about roles.
        default_conversation_creator_role_sid:
            The conversation-level role assigned to a conversation creator when they
            join a new conversation. See the [Conversation
            Role](https://www.twilio.com/docs/conversations/api/role-
            resource) for more info about roles.
        default_conversation_role_sid:
            The conversation-level role assigned to users when they are added to a
            conversation. See the [Conversation
            Role](https://www.twilio.com/docs/conversations/api/role-
            resource) for more info about roles.
        reachability_enabled:
            Whether the [Reachability
            Indicator](https://www.twilio.com/docs/chat/reachability-
            indicator) is enabled for this Conversations Service. The
            default is `false`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Configuration?](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Configuration?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Configuration"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "default_chat_service_role_sid": default_chat_service_role_sid,
        "default_conversation_creator_role_sid": default_conversation_creator_role_sid,  # noqa
        "default_conversation_role_sid": default_conversation_role_sid,
        "reachability_enabled": reachability_enabled,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_chat_service_sid_configuration_notifications(
    chat_service_sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch push notification service settings.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Configuration/Notifications?](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Configuration/Notifications?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Configuration/Notifications"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_chat_service_sid_configuration_notifications(
    chat_service_sid: str,
    twilio_credentials: "TwilioCredentials",
    added_to_conversation_enabled: bool = None,
    added_to_conversation_sound: str = None,
    added_to_conversation_template: str = None,
    log_enabled: bool = None,
    new_message_badge_count_enabled: bool = None,
    new_message_enabled: bool = None,
    new_message_sound: str = None,
    new_message_template: str = None,
    new_message_with_media_enabled: bool = None,
    new_message_with_media_template: str = None,
    removed_from_conversation_enabled: bool = None,
    removed_from_conversation_sound: str = None,
    removed_from_conversation_template: str = None,
) -> Dict[str, Any]:
    """
    Update push notification service settings.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        added_to_conversation_enabled:
            Whether to send a notification when a participant is added to a
            conversation. The default is `false`.
        added_to_conversation_sound:
            The name of the sound to play when a participant is added to a
            conversation and `added_to_conversation.enabled` is `true`.
        added_to_conversation_template:
            The template to use to create the notification text displayed when a
            participant is added to a conversation and
            `added_to_conversation.enabled` is `true`.
        log_enabled:
            Weather the notification logging is enabled.
        new_message_badge_count_enabled:
            Whether the new message badge is enabled. The default is `false`.
        new_message_enabled:
            Whether to send a notification when a new message is added to a
            conversation. The default is `false`.
        new_message_sound:
            The name of the sound to play when a new message is added to a
            conversation and `new_message.enabled` is `true`.
        new_message_template:
            The template to use to create the notification text displayed when a new
            message is added to a conversation and `new_message.enabled`
            is `true`.
        new_message_with_media_enabled:
            Whether to send a notification when a new message with media/file
            attachments is added to a conversation. The default is
            `false`.
        new_message_with_media_template:
            The template to use to create the notification text displayed when a new
            message with media/file attachments is added to a
            conversation and `new_message.attachments.enabled` is
            `true`.
        removed_from_conversation_enabled:
            Whether to send a notification to a user when they are removed from a
            conversation. The default is `false`.
        removed_from_conversation_sound:
            The name of the sound to play to a user when they are removed from a
            conversation and `removed_from_conversation.enabled` is
            `true`.
        removed_from_conversation_template:
            The template to use to create the notification text displayed to a user
            when they are removed from a conversation and
            `removed_from_conversation.enabled` is `true`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Configuration/Notifications?](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Configuration/Notifications?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Configuration/Notifications"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "added_to_conversation_enabled": added_to_conversation_enabled,
        "added_to_conversation_sound": added_to_conversation_sound,
        "added_to_conversation_template": added_to_conversation_template,
        "log_enabled": log_enabled,
        "new_message_badge_count_enabled": new_message_badge_count_enabled,
        "new_message_enabled": new_message_enabled,
        "new_message_sound": new_message_sound,
        "new_message_template": new_message_template,
        "new_message_with_media_enabled": new_message_with_media_enabled,
        "new_message_with_media_template": new_message_with_media_template,
        "removed_from_conversation_enabled": removed_from_conversation_enabled,
        "removed_from_conversation_sound": removed_from_conversation_sound,
        "removed_from_conversation_template": removed_from_conversation_template,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_chat_service_sid_configuration_webhooks(
    chat_service_sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a specific service webhook configuration.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Configuration/Webhooks?](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Configuration/Webhooks?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Configuration/Webhooks"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_chat_service_sid_configuration_webhooks(
    chat_service_sid: str,
    twilio_credentials: "TwilioCredentials",
    filters: list = None,
    method: str = None,
    post_webhook_url: str = None,
    pre_webhook_url: str = None,
) -> Dict[str, Any]:
    """
    Update a specific Webhook.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        filters:
            The list of events that your configured webhook targets will receive.
            Events not configured here will not fire. Possible values
            are `onParticipantAdd`, `onParticipantAdded`,
            `onDeliveryUpdated`, `onConversationUpdated`,
            `onConversationRemove`, `onParticipantRemove`,
            `onConversationUpdate`, `onMessageAdd`, `onMessageRemoved`,
            `onParticipantUpdated`, `onConversationAdded`,
            `onMessageAdded`, `onConversationAdd`,
            `onConversationRemoved`, `onParticipantUpdate`,
            `onMessageRemove`, `onMessageUpdated`,
            `onParticipantRemoved`, `onMessageUpdate` or
            `onConversationStateUpdated`.
        method:
            The HTTP method to be used when sending a webhook request. One of `GET`
            or `POST`.
        post_webhook_url:
            The absolute url the post-event webhook request should be sent to.
        pre_webhook_url:
            The absolute url the pre-event webhook request should be sent to.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Configuration/Webhooks?](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Configuration/Webhooks?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Configuration/Webhooks"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "filters": filters,
        "method": method,
        "post_webhook_url": post_webhook_url,
        "pre_webhook_url": pre_webhook_url,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_chat_service_sid_conversations(
    chat_service_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of conversations in your service.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations?&page_size=%s](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_chat_service_sid_conversations(
    chat_service_sid: str,
    twilio_credentials: "TwilioCredentials",
    x_twilio_webhook_enabled: str = None,
    attributes: str = None,
    date_created: str = None,
    date_updated: str = None,
    friendly_name: str = None,
    messaging_service_sid: str = None,
    state: str = None,
    timers_closed: str = None,
    timers_inactive: str = None,
    unique_name: str = None,
) -> Dict[str, Any]:
    """
    Create a new conversation in your service.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        x_twilio_webhook_enabled:
            The X-Twilio-Webhook-Enabled HTTP request header.
        attributes:
            An optional string metadata field you can use to store any data you
            wish. The string value must contain structurally valid JSON
            if specified.  **Note** that if the attributes are not set
            "{}" will be returned.
        date_created:
            The date that this resource was created.
        date_updated:
            The date that this resource was last updated.
        friendly_name:
            The human-readable name of this conversation, limited to 256 characters.
            Optional.
        messaging_service_sid:
            The unique ID of the [Messaging
            Service](https://www.twilio.com/docs/sms/services/api) this
            conversation belongs to.
        state:
            Current state of this conversation. Can be either `active`, `inactive`
            or `closed` and defaults to `active`.
        timers_closed:
            ISO8601 duration when conversation will be switched to `closed` state.
            Minimum value for this timer is 10 minutes.
        timers_inactive:
            ISO8601 duration when conversation will be switched to `inactive` state.
            Minimum value for this timer is 1 minute.
        unique_name:
            An application-defined string that uniquely identifies the resource. It
            can be used to address the resource in place of the
            resource's `sid` in the URL.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations?&x_twilio_webhook_enabled=%s](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations?&x_twilio_webhook_enabled=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    params = {
        "x_twilio_webhook_enabled": x_twilio_webhook_enabled,
    }

    data = {
        "attributes": attributes,
        "date_created": date_created,
        "date_updated": date_updated,
        "friendly_name": friendly_name,
        "messaging_service_sid": messaging_service_sid,
        "state": state,
        "timers_closed": timers_closed,
        "timers_inactive": timers_inactive,
        "unique_name": unique_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        params=params,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_chat_service_sid_conversations_conversation_sid_messages(
    chat_service_sid: str,
    conversation_sid: str,
    twilio_credentials: "TwilioCredentials",
    order: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all messages in the conversation.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        order:
            The sort order of the returned messages. Can be: `asc` (ascending) or
            `desc` (descending), with `asc` as the default.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Messages?&order=%s&page_size=%s](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Messages?&order=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Messages"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "order": order,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_chat_service_sid_conversations_conversation_sid_messages(
    chat_service_sid: str,
    conversation_sid: str,
    twilio_credentials: "TwilioCredentials",
    x_twilio_webhook_enabled: str = None,
    attributes: str = None,
    author: str = None,
    body: str = None,
    date_created: str = None,
    date_updated: str = None,
    media_sid: str = None,
) -> Dict[str, Any]:
    """
    Add a new message to the conversation in a specific service.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        x_twilio_webhook_enabled:
            The X-Twilio-Webhook-Enabled HTTP request header.
        attributes:
            A string metadata field you can use to store any data you wish. The
            string value must contain structurally valid JSON if
            specified.  **Note** that if the attributes are not set "{}"
            will be returned.
        author:
            The channel specific identifier of the message's author. Defaults to
            `system`.
        body:
            The content of the message, can be up to 1,600 characters long.
        date_created:
            The date that this resource was created.
        date_updated:
            The date that this resource was last updated. `null` if the message has
            not been edited.
        media_sid:
            The Media SID to be attached to the new Message.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Messages?&x_twilio_webhook_enabled=%s](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Messages?&x_twilio_webhook_enabled=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Messages"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    params = {
        "x_twilio_webhook_enabled": x_twilio_webhook_enabled,
    }

    data = {
        "attributes": attributes,
        "author": author,
        "body": body,
        "date_created": date_created,
        "date_updated": date_updated,
        "media_sid": media_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        params=params,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_chat_service_sid_conversations_conversation_sid_messages_message_sid_receipts(
    chat_service_sid: str,
    conversation_sid: str,
    message_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all delivery and read receipts of the conversation message.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        message_sid:
            Message sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Messages/{message_sid}/Receipts?&page_size=%s](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Messages/{message_sid}/Receipts?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Messages/{message_sid}/Receipts"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_services_chat_service_sid_conversations_conversation_sid_messages_message_sid_receipts_sid(
    chat_service_sid: str,
    conversation_sid: str,
    message_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch the delivery and read receipts of the conversation message.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        message_sid:
            Message sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Messages/{message_sid}/Receipts/{sid}?](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Messages/{message_sid}/Receipts/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Messages/{message_sid}/Receipts/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def delete_v1_services_chat_service_sid_conversations_conversation_sid_messages_sid(
    chat_service_sid: str,
    conversation_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    x_twilio_webhook_enabled: str = None,
) -> Dict[str, Any]:
    """
    Remove a message from the conversation.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        x_twilio_webhook_enabled:
            The X-Twilio-Webhook-Enabled HTTP request header.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Messages/{sid}?&x_twilio_webhook_enabled=%s](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Messages/{sid}?&x_twilio_webhook_enabled=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Messages/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    params = {
        "x_twilio_webhook_enabled": x_twilio_webhook_enabled,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_services_chat_service_sid_conversations_conversation_sid_messages_sid(
    chat_service_sid: str,
    conversation_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a message from the conversation.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Messages/{sid}?](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Messages/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Messages/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_chat_service_sid_conversations_conversation_sid_messages_sid(
    chat_service_sid: str,
    conversation_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    x_twilio_webhook_enabled: str = None,
    attributes: str = None,
    author: str = None,
    body: str = None,
    date_created: str = None,
    date_updated: str = None,
) -> Dict[str, Any]:
    """
    Update an existing message in the conversation.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        x_twilio_webhook_enabled:
            The X-Twilio-Webhook-Enabled HTTP request header.
        attributes:
            A string metadata field you can use to store any data you wish. The
            string value must contain structurally valid JSON if
            specified.  **Note** that if the attributes are not set "{}"
            will be returned.
        author:
            The channel specific identifier of the message's author. Defaults to
            `system`.
        body:
            The content of the message, can be up to 1,600 characters long.
        date_created:
            The date that this resource was created.
        date_updated:
            The date that this resource was last updated. `null` if the message has
            not been edited.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Messages/{sid}?&x_twilio_webhook_enabled=%s](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Messages/{sid}?&x_twilio_webhook_enabled=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Messages/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "x_twilio_webhook_enabled": x_twilio_webhook_enabled,
    }

    data = {
        "attributes": attributes,
        "author": author,
        "body": body,
        "date_created": date_created,
        "date_updated": date_updated,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        params=params,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_chat_service_sid_conversations_conversation_sid_participants(
    chat_service_sid: str,
    conversation_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all participants of the conversation.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Participants?&page_size=%s](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Participants?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Participants"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_chat_service_sid_conversations_conversation_sid_participants(
    chat_service_sid: str,
    conversation_sid: str,
    twilio_credentials: "TwilioCredentials",
    x_twilio_webhook_enabled: str = None,
    attributes: str = None,
    date_created: str = None,
    date_updated: str = None,
    identity: str = None,
    messaging_binding_address: str = None,
    messaging_binding_projected_address: str = None,
    messaging_binding_proxy_address: str = None,
    role_sid: str = None,
) -> Dict[str, Any]:
    """
    Add a new participant to the conversation in a specific service.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        x_twilio_webhook_enabled:
            The X-Twilio-Webhook-Enabled HTTP request header.
        attributes:
            An optional string metadata field you can use to store any data you
            wish. The string value must contain structurally valid JSON
            if specified.  **Note** that if the attributes are not set
            "{}" will be returned.
        date_created:
            The date that this resource was created.
        date_updated:
            The date that this resource was last updated.
        identity:
            A unique string identifier for the conversation participant as
            [Conversation
            User](https://www.twilio.com/docs/conversations/api/user-
            resource). This parameter is non-null if (and only if) the
            participant is using the Conversation SDK to communicate.
            Limited to 256 characters.
        messaging_binding_address:
            The address of the participant's device, e.g. a phone or WhatsApp
            number. Together with the Proxy address, this determines a
            participant uniquely. This field (with proxy_address) is
            only null when the participant is interacting from an SDK
            endpoint (see the 'identity' field).
        messaging_binding_projected_address:
            The address of the Twilio phone number that is used in Group MMS.
            Communication mask for the Conversation participant with
            Identity.
        messaging_binding_proxy_address:
            The address of the Twilio phone number (or WhatsApp number) that the
            participant is in contact with. This field, together with
            participant address, is only null when the participant is
            interacting from an SDK endpoint (see the 'identity' field).
        role_sid:
            The SID of a conversation-level
            [Role](https://www.twilio.com/docs/conversations/api/role-
            resource) to assign to the participant.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Participants?&x_twilio_webhook_enabled=%s](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Participants?&x_twilio_webhook_enabled=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Participants"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    params = {
        "x_twilio_webhook_enabled": x_twilio_webhook_enabled,
    }

    data = {
        "attributes": attributes,
        "date_created": date_created,
        "date_updated": date_updated,
        "identity": identity,
        "messaging_binding_address": messaging_binding_address,
        "messaging_binding_projected_address": messaging_binding_projected_address,
        "messaging_binding_proxy_address": messaging_binding_proxy_address,
        "role_sid": role_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        params=params,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_chat_service_sid_conversations_conversation_sid_participants_sid(
    chat_service_sid: str,
    conversation_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    x_twilio_webhook_enabled: str = None,
) -> Dict[str, Any]:
    """
    Remove a participant from the conversation.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        x_twilio_webhook_enabled:
            The X-Twilio-Webhook-Enabled HTTP request header.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Participants/{sid}?&x_twilio_webhook_enabled=%s](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Participants/{sid}?&x_twilio_webhook_enabled=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Participants/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    params = {
        "x_twilio_webhook_enabled": x_twilio_webhook_enabled,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_services_chat_service_sid_conversations_conversation_sid_participants_sid(
    chat_service_sid: str,
    conversation_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a participant of the conversation.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Participants/{sid}?](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Participants/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Participants/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_chat_service_sid_conversations_conversation_sid_participants_sid(
    chat_service_sid: str,
    conversation_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    x_twilio_webhook_enabled: str = None,
    attributes: str = None,
    date_created: str = None,
    date_updated: str = None,
    identity: str = None,
    last_read_message_index: int = None,
    last_read_timestamp: str = None,
    messaging_binding_projected_address: str = None,
    messaging_binding_proxy_address: str = None,
    role_sid: str = None,
) -> Dict[str, Any]:
    """
    Update an existing participant in the conversation.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        x_twilio_webhook_enabled:
            The X-Twilio-Webhook-Enabled HTTP request header.
        attributes:
            An optional string metadata field you can use to store any data you
            wish. The string value must contain structurally valid JSON
            if specified.  **Note** that if the attributes are not set
            "{}" will be returned.
        date_created:
            The date that this resource was created.
        date_updated:
            The date that this resource was last updated.
        identity:
            A unique string identifier for the conversation participant as
            [Conversation
            User](https://www.twilio.com/docs/conversations/api/user-
            resource). This parameter is non-null if (and only if) the
            participant is using the Conversation SDK to communicate.
            Limited to 256 characters.
        last_read_message_index:
            Index of last “read” message in the
            [Conversation](https://www.twilio.com/docs/conversations/api/conversation-
            resource) for the Participant.
        last_read_timestamp:
            Timestamp of last “read” message in the
            [Conversation](https://www.twilio.com/docs/conversations/api/conversation-
            resource) for the Participant.
        messaging_binding_projected_address:
            The address of the Twilio phone number that is used in Group MMS. 'null'
            value will remove it.
        messaging_binding_proxy_address:
            The address of the Twilio phone number that the participant is in
            contact with. 'null' value will remove it.
        role_sid:
            The SID of a conversation-level
            [Role](https://www.twilio.com/docs/conversations/api/role-
            resource) to assign to the participant.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Participants/{sid}?&x_twilio_webhook_enabled=%s](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Participants/{sid}?&x_twilio_webhook_enabled=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Participants/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "x_twilio_webhook_enabled": x_twilio_webhook_enabled,
    }

    data = {
        "attributes": attributes,
        "date_created": date_created,
        "date_updated": date_updated,
        "identity": identity,
        "last_read_message_index": last_read_message_index,
        "last_read_timestamp": last_read_timestamp,
        "messaging_binding_projected_address": messaging_binding_projected_address,
        "messaging_binding_proxy_address": messaging_binding_proxy_address,
        "role_sid": role_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        params=params,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_chat_service_sid_conversations_conversation_sid_webhooks(
    chat_service_sid: str,
    conversation_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all webhooks scoped to the conversation.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Webhooks?&page_size=%s](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Webhooks?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Webhooks"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_chat_service_sid_conversations_conversation_sid_webhooks(
    chat_service_sid: str,
    conversation_sid: str,
    twilio_credentials: "TwilioCredentials",
    configuration_filters: list = None,
    configuration_flow_sid: str = None,
    configuration_method: str = None,
    configuration_replay_after: int = None,
    configuration_triggers: list = None,
    configuration_url: str = None,
    target: str = None,
) -> Dict[str, Any]:
    """
    Create a new webhook scoped to the conversation in a specific service.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        configuration_filters:
            The list of events, firing webhook event for this Conversation.
        configuration_flow_sid:
            The studio flow SID, where the webhook should be sent to.
        configuration_method:
            The HTTP method to be used when sending a webhook request.
        configuration_replay_after:
            The message index for which and it's successors the webhook will be
            replayed. Not set by default.
        configuration_triggers:
            The list of keywords, firing webhook event for this Conversation.
        configuration_url:
            The absolute url the webhook request should be sent to.
        target:
            The target of this webhook: `webhook`, `studio`, `trigger`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Webhooks?](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Webhooks?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Webhooks"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "configuration_filters": configuration_filters,
        "configuration_flow_sid": configuration_flow_sid,
        "configuration_method": configuration_method,
        "configuration_replay_after": configuration_replay_after,
        "configuration_triggers": configuration_triggers,
        "configuration_url": configuration_url,
        "target": target,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_chat_service_sid_conversations_conversation_sid_webhooks_sid(
    chat_service_sid: str,
    conversation_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Remove an existing webhook scoped to the conversation.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Webhooks/{sid}?](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Webhooks/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Webhooks/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_chat_service_sid_conversations_conversation_sid_webhooks_sid(
    chat_service_sid: str,
    conversation_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch the configuration of a conversation-scoped webhook.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Webhooks/{sid}?](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Webhooks/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Webhooks/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_chat_service_sid_conversations_conversation_sid_webhooks_sid(
    chat_service_sid: str,
    conversation_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    configuration_filters: list = None,
    configuration_flow_sid: str = None,
    configuration_method: str = None,
    configuration_triggers: list = None,
    configuration_url: str = None,
) -> Dict[str, Any]:
    """
    Update an existing conversation-scoped webhook.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        configuration_filters:
            The list of events, firing webhook event for this Conversation.
        configuration_flow_sid:
            The studio flow SID, where the webhook should be sent to.
        configuration_method:
            The HTTP method to be used when sending a webhook request.
        configuration_triggers:
            The list of keywords, firing webhook event for this Conversation.
        configuration_url:
            The absolute url the webhook request should be sent to.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Webhooks/{sid}?](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Webhooks/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{conversation_sid}/Webhooks/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "configuration_filters": configuration_filters,
        "configuration_flow_sid": configuration_flow_sid,
        "configuration_method": configuration_method,
        "configuration_triggers": configuration_triggers,
        "configuration_url": configuration_url,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_chat_service_sid_conversations_sid(
    chat_service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    x_twilio_webhook_enabled: str = None,
) -> Dict[str, Any]:
    """
    Remove a conversation from your service.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        x_twilio_webhook_enabled:
            The X-Twilio-Webhook-Enabled HTTP request header.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{sid}?&x_twilio_webhook_enabled=%s](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{sid}?&x_twilio_webhook_enabled=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    params = {
        "x_twilio_webhook_enabled": x_twilio_webhook_enabled,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_services_chat_service_sid_conversations_sid(
    chat_service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a conversation from your service.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{sid}?](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_chat_service_sid_conversations_sid(
    chat_service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    x_twilio_webhook_enabled: str = None,
    attributes: str = None,
    date_created: str = None,
    date_updated: str = None,
    friendly_name: str = None,
    messaging_service_sid: str = None,
    state: str = None,
    timers_closed: str = None,
    timers_inactive: str = None,
    unique_name: str = None,
) -> Dict[str, Any]:
    """
    Update an existing conversation in your service.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        x_twilio_webhook_enabled:
            The X-Twilio-Webhook-Enabled HTTP request header.
        attributes:
            An optional string metadata field you can use to store any data you
            wish. The string value must contain structurally valid JSON
            if specified.  **Note** that if the attributes are not set
            "{}" will be returned.
        date_created:
            The date that this resource was created.
        date_updated:
            The date that this resource was last updated.
        friendly_name:
            The human-readable name of this conversation, limited to 256 characters.
            Optional.
        messaging_service_sid:
            The unique ID of the [Messaging
            Service](https://www.twilio.com/docs/sms/services/api) this
            conversation belongs to.
        state:
            Current state of this conversation. Can be either `active`, `inactive`
            or `closed` and defaults to `active`.
        timers_closed:
            ISO8601 duration when conversation will be switched to `closed` state.
            Minimum value for this timer is 10 minutes.
        timers_inactive:
            ISO8601 duration when conversation will be switched to `inactive` state.
            Minimum value for this timer is 1 minute.
        unique_name:
            An application-defined string that uniquely identifies the resource. It
            can be used to address the resource in place of the
            resource's `sid` in the URL.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{sid}?&x_twilio_webhook_enabled=%s](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{sid}?&x_twilio_webhook_enabled=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Conversations/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "x_twilio_webhook_enabled": x_twilio_webhook_enabled,
    }

    data = {
        "attributes": attributes,
        "date_created": date_created,
        "date_updated": date_updated,
        "friendly_name": friendly_name,
        "messaging_service_sid": messaging_service_sid,
        "state": state,
        "timers_closed": timers_closed,
        "timers_inactive": timers_inactive,
        "unique_name": unique_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        params=params,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_chat_service_sid_participant_conversations(
    chat_service_sid: str,
    twilio_credentials: "TwilioCredentials",
    identity: str = None,
    address: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Conversations that this Participant belongs to by
    identity or by address. Only one parameter should be specified.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        identity:
            A unique string identifier for the conversation participant as
            [Conversation
            User](https://www.twilio.com/docs/conversations/api/user-
            resource). This parameter is non-null if (and only if) the
            participant is using the Conversations SDK to communicate.
            Limited to 256 characters.
        address:
            A unique string identifier for the conversation participant who's not a
            Conversation User. This parameter could be found in
            messaging_binding.address field of Participant resource. It
            should be url-encoded.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/ParticipantConversations?&identity=%s&address=%s&page_size=%s](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/ParticipantConversations?&identity=%s&address=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/ParticipantConversations"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "identity": identity,
        "address": address,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_services_chat_service_sid_roles(
    chat_service_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all user roles in your service.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Roles?&page_size=%s](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Roles?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = (
        f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Roles"  # noqa
    )
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_chat_service_sid_roles(
    chat_service_sid: str,
    twilio_credentials: "TwilioCredentials",
    friendly_name: str = None,
    permission: list = None,
    type: str = None,
) -> Dict[str, Any]:
    """
    Create a new user role in your service.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        friendly_name:
            A descriptive string that you create to describe the new resource. It
            can be up to 64 characters long.
        permission:
            A permission that you grant to the new role. Only one permission can be
            granted per parameter. To assign more than one permission,
            repeat this parameter for each permission value. The values
            for this parameter depend on the role's `type`.
        type:
            The type of role. Can be: `conversation` for
            [Conversation](https://www.twilio.com/docs/conversations/api/conversation-
            resource) roles or `service` for [Conversation
            Service](https://www.twilio.com/docs/conversations/api/service-
            resource) roles.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Roles?](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Roles?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = (
        f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Roles"  # noqa
    )
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "friendly_name": friendly_name,
        "permission": permission,
        "type": type,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_chat_service_sid_roles_sid(
    chat_service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Remove a user role from your service.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Roles/{sid}?](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Roles/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Roles/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_chat_service_sid_roles_sid(
    chat_service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a user role from your service.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Roles/{sid}?](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Roles/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Roles/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_chat_service_sid_roles_sid(
    chat_service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    permission: list = None,
) -> Dict[str, Any]:
    """
    Update an existing user role in your service.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        permission:
            A permission that you grant to the role. Only one permission can be
            granted per parameter. To assign more than one permission,
            repeat this parameter for each permission value. Note that
            the update action replaces all previously assigned
            permissions with those defined in the update action. To
            remove a permission, do not include it in the subsequent
            update action. The values for this parameter depend on the
            role's `type`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Roles/{sid}?](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Roles/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Roles/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "permission": permission,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_chat_service_sid_users(
    chat_service_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all conversation users in your service.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Users?&page_size=%s](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Users?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = (
        f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Users"  # noqa
    )
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_chat_service_sid_users(
    chat_service_sid: str,
    twilio_credentials: "TwilioCredentials",
    x_twilio_webhook_enabled: str = None,
    attributes: str = None,
    friendly_name: str = None,
    identity: str = None,
    role_sid: str = None,
) -> Dict[str, Any]:
    """
    Add a new conversation user to your service.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        x_twilio_webhook_enabled:
            The X-Twilio-Webhook-Enabled HTTP request header.
        attributes:
            The JSON Object string that stores application-specific data. If
            attributes have not been set, `{}` is returned.
        friendly_name:
            The string that you assigned to describe the resource.
        identity:
            The application-defined string that uniquely identifies the resource's
            User within the [Conversation
            Service](https://www.twilio.com/docs/conversations/api/service-
            resource). This value is often a username or an email
            address, and is case-sensitive.
        role_sid:
            The SID of a service-level
            [Role](https://www.twilio.com/docs/conversations/api/role-
            resource) to assign to the user.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Users?&x_twilio_webhook_enabled=%s](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Users?&x_twilio_webhook_enabled=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = (
        f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Users"  # noqa
    )
    responses = {
        201: "Created.",  # noqa
    }

    params = {
        "x_twilio_webhook_enabled": x_twilio_webhook_enabled,
    }

    data = {
        "attributes": attributes,
        "friendly_name": friendly_name,
        "identity": identity,
        "role_sid": role_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        params=params,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_chat_service_sid_users_sid(
    chat_service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    x_twilio_webhook_enabled: str = None,
) -> Dict[str, Any]:
    """
    Remove a conversation user from your service.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        x_twilio_webhook_enabled:
            The X-Twilio-Webhook-Enabled HTTP request header.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Users/{sid}?&x_twilio_webhook_enabled=%s](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Users/{sid}?&x_twilio_webhook_enabled=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Users/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    params = {
        "x_twilio_webhook_enabled": x_twilio_webhook_enabled,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_services_chat_service_sid_users_sid(
    chat_service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a conversation user from your service.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Users/{sid}?](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Users/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Users/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_chat_service_sid_users_sid(
    chat_service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    x_twilio_webhook_enabled: str = None,
    attributes: str = None,
    friendly_name: str = None,
    role_sid: str = None,
) -> Dict[str, Any]:
    """
    Update an existing conversation user in your service.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        x_twilio_webhook_enabled:
            The X-Twilio-Webhook-Enabled HTTP request header.
        attributes:
            The JSON Object string that stores application-specific data. If
            attributes have not been set, `{}` is returned.
        friendly_name:
            The string that you assigned to describe the resource.
        role_sid:
            The SID of a service-level
            [Role](https://www.twilio.com/docs/conversations/api/role-
            resource) to assign to the user.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Users/{sid}?&x_twilio_webhook_enabled=%s](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Users/{sid}?&x_twilio_webhook_enabled=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Users/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "x_twilio_webhook_enabled": x_twilio_webhook_enabled,
    }

    data = {
        "attributes": attributes,
        "friendly_name": friendly_name,
        "role_sid": role_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        params=params,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_chat_service_sid_users_user_sid_conversations(
    chat_service_sid: str,
    user_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all User Conversations for the User.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        user_sid:
            User sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Users/{user_sid}/Conversations?&page_size=%s](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Users/{user_sid}/Conversations?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Users/{user_sid}/Conversations"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def delete_v1_services_chat_service_sid_users_user_sid_conversations_conversation_sid(
    chat_service_sid: str,
    user_sid: str,
    conversation_sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete a specific User Conversation.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        user_sid:
            User sid used in formatting the endpoint URL.
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Users/{user_sid}/Conversations/{conversation_sid}?](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Users/{user_sid}/Conversations/{conversation_sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Users/{user_sid}/Conversations/{conversation_sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_chat_service_sid_users_user_sid_conversations_conversation_sid(
    chat_service_sid: str,
    user_sid: str,
    conversation_sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a specific User Conversation.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        user_sid:
            User sid used in formatting the endpoint URL.
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Users/{user_sid}/Conversations/{conversation_sid}?](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Users/{user_sid}/Conversations/{conversation_sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Users/{user_sid}/Conversations/{conversation_sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_chat_service_sid_users_user_sid_conversations_conversation_sid(
    chat_service_sid: str,
    user_sid: str,
    conversation_sid: str,
    twilio_credentials: "TwilioCredentials",
    last_read_message_index: int = None,
    last_read_timestamp: str = None,
    notification_level: str = None,
) -> Dict[str, Any]:
    """
    Update a specific User Conversation.

    Args:
        chat_service_sid:
            Chat service sid used in formatting the endpoint URL.
        user_sid:
            User sid used in formatting the endpoint URL.
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        last_read_message_index:
            The index of the last Message in the Conversation that the Participant
            has read.
        last_read_timestamp:
            The date of the last message read in conversation by the user, given in
            ISO 8601 format.
        notification_level:
            The Notification Level of this User Conversation. One of `default` or
            `muted`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{chat_service_sid}/Users/{user_sid}/Conversations/{conversation_sid}?](
    https://conversations.twilio.com/v1/Services/{chat_service_sid}/Users/{user_sid}/Conversations/{conversation_sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{chat_service_sid}/Users/{user_sid}/Conversations/{conversation_sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "last_read_message_index": last_read_message_index,
        "last_read_timestamp": last_read_timestamp,
        "notification_level": notification_level,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Remove a conversation service with all its nested resources from your account.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{sid}?](
    https://conversations.twilio.com/v1/Services/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a conversation service from your account.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Services/{sid}?](
    https://conversations.twilio.com/v1/Services/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Services/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_users(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all conversation users in your account's default service.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Users?&page_size=%s](
    https://conversations.twilio.com/v1/Users?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://conversations.twilio.com/v1/Users"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_users(
    twilio_credentials: "TwilioCredentials",
    x_twilio_webhook_enabled: str = None,
    attributes: str = None,
    friendly_name: str = None,
    identity: str = None,
    role_sid: str = None,
) -> Dict[str, Any]:
    """
    Add a new conversation user to your account's default service.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        x_twilio_webhook_enabled:
            The X-Twilio-Webhook-Enabled HTTP request header.
        attributes:
            The JSON Object string that stores application-specific data. If
            attributes have not been set, `{}` is returned.
        friendly_name:
            The string that you assigned to describe the resource.
        identity:
            The application-defined string that uniquely identifies the resource's
            User within the [Conversation
            Service](https://www.twilio.com/docs/conversations/api/service-
            resource). This value is often a username or an email
            address, and is case-sensitive.
        role_sid:
            The SID of a service-level
            [Role](https://www.twilio.com/docs/conversations/api/role-
            resource) to assign to the user.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Users?&x_twilio_webhook_enabled=%s](
    https://conversations.twilio.com/v1/Users?&x_twilio_webhook_enabled=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://conversations.twilio.com/v1/Users"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    params = {
        "x_twilio_webhook_enabled": x_twilio_webhook_enabled,
    }

    data = {
        "attributes": attributes,
        "friendly_name": friendly_name,
        "identity": identity,
        "role_sid": role_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        params=params,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_users_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    x_twilio_webhook_enabled: str = None,
) -> Dict[str, Any]:
    """
    Remove a conversation user from your account's default service.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        x_twilio_webhook_enabled:
            The X-Twilio-Webhook-Enabled HTTP request header.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Users/{sid}?&x_twilio_webhook_enabled=%s](
    https://conversations.twilio.com/v1/Users/{sid}?&x_twilio_webhook_enabled=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Users/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    params = {
        "x_twilio_webhook_enabled": x_twilio_webhook_enabled,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_users_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a conversation user from your account's default service.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Users/{sid}?](
    https://conversations.twilio.com/v1/Users/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Users/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_users_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    x_twilio_webhook_enabled: str = None,
    attributes: str = None,
    friendly_name: str = None,
    role_sid: str = None,
) -> Dict[str, Any]:
    """
    Update an existing conversation user in your account's default service.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        x_twilio_webhook_enabled:
            The X-Twilio-Webhook-Enabled HTTP request header.
        attributes:
            The JSON Object string that stores application-specific data. If
            attributes have not been set, `{}` is returned.
        friendly_name:
            The string that you assigned to describe the resource.
        role_sid:
            The SID of a service-level
            [Role](https://www.twilio.com/docs/conversations/api/role-
            resource) to assign to the user.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Users/{sid}?&x_twilio_webhook_enabled=%s](
    https://conversations.twilio.com/v1/Users/{sid}?&x_twilio_webhook_enabled=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Users/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "x_twilio_webhook_enabled": x_twilio_webhook_enabled,
    }

    data = {
        "attributes": attributes,
        "friendly_name": friendly_name,
        "role_sid": role_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        params=params,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_users_user_sid_conversations(
    user_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all User Conversations for the User.

    Args:
        user_sid:
            User sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Users/{user_sid}/Conversations?&page_size=%s](
    https://conversations.twilio.com/v1/Users/{user_sid}/Conversations?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Users/{user_sid}/Conversations"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def delete_v1_users_user_sid_conversations_conversation_sid(
    user_sid: str,
    conversation_sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete a specific User Conversation.

    Args:
        user_sid:
            User sid used in formatting the endpoint URL.
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Users/{user_sid}/Conversations/{conversation_sid}?](
    https://conversations.twilio.com/v1/Users/{user_sid}/Conversations/{conversation_sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Users/{user_sid}/Conversations/{conversation_sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_users_user_sid_conversations_conversation_sid(
    user_sid: str,
    conversation_sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a specific User Conversation.

    Args:
        user_sid:
            User sid used in formatting the endpoint URL.
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Users/{user_sid}/Conversations/{conversation_sid}?](
    https://conversations.twilio.com/v1/Users/{user_sid}/Conversations/{conversation_sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Users/{user_sid}/Conversations/{conversation_sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_users_user_sid_conversations_conversation_sid(
    user_sid: str,
    conversation_sid: str,
    twilio_credentials: "TwilioCredentials",
    last_read_message_index: int = None,
    last_read_timestamp: str = None,
    notification_level: str = None,
) -> Dict[str, Any]:
    """
    Update a specific User Conversation.

    Args:
        user_sid:
            User sid used in formatting the endpoint URL.
        conversation_sid:
            Conversation sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        last_read_message_index:
            The index of the last Message in the Conversation that the Participant
            has read.
        last_read_timestamp:
            The date of the last message read in conversation by the user, given in
            ISO 8601 format.
        notification_level:
            The Notification Level of this User Conversation. One of `default` or
            `muted`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://conversations.twilio.com/v1/Users/{user_sid}/Conversations/{conversation_sid}?](
    https://conversations.twilio.com/v1/Users/{user_sid}/Conversations/{conversation_sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://conversations.twilio.com/v1/Users/{user_sid}/Conversations/{conversation_sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "last_read_message_index": last_read_message_index,
        "last_read_timestamp": last_read_timestamp,
        "notification_level": notification_level,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_schemas_id(
    id: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a specific schema with its nested versions.

    Args:
        id:
            Id used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://events.twilio.com/v1/Schemas/{id}?](
    https://events.twilio.com/v1/Schemas/{id}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://events.twilio.com/v1/Schemas/{id}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_schemas_id_versions(
    id: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a paginated list of versions of the schema.

    Args:
        id:
            Id used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://events.twilio.com/v1/Schemas/{id}/Versions?&page_size=%s](
    https://events.twilio.com/v1/Schemas/{id}/Versions?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://events.twilio.com/v1/Schemas/{id}/Versions"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_schemas_id_versions_schema_version(
    id: str,
    schema_version: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a specific schema and version.

    Args:
        id:
            Id used in formatting the endpoint URL.
        schema_version:
            Schema version used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://events.twilio.com/v1/Schemas/{id}/Versions/{schema_version}?](
    https://events.twilio.com/v1/Schemas/{id}/Versions/{schema_version}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://events.twilio.com/v1/Schemas/{id}/Versions/{schema_version}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_sinks(
    twilio_credentials: "TwilioCredentials",
    in_use: bool = None,
    status: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a paginated list of Sinks belonging to the account used to make the
    request.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        in_use:
            A boolean query parameter filtering the results to return sinks used/not
            used by a subscription.
        status:
            A String query parameter filtering the results by status `initialized`,
            `validating`, `active` or `failed`.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://events.twilio.com/v1/Sinks?&in_use=%s&status=%s&page_size=%s](
    https://events.twilio.com/v1/Sinks?&in_use=%s&status=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://events.twilio.com/v1/Sinks"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "in_use": in_use,
        "status": status,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_sinks(
    twilio_credentials: "TwilioCredentials",
    description: str = None,
    sink_configuration: str = None,
    sink_type: str = None,
) -> Dict[str, Any]:
    """
    Create a new Sink.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        description:
            A human readable description for the Sink **This value should not
            contain PII.**.
        sink_configuration:
            The information required for Twilio to connect to the provided Sink
            encoded as JSON.
        sink_type:
            The Sink type. Can only be "kinesis" or "webhook" currently.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://events.twilio.com/v1/Sinks?](
    https://events.twilio.com/v1/Sinks?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://events.twilio.com/v1/Sinks"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "description": description,
        "sink_configuration": sink_configuration,
        "sink_type": sink_type,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_sinks_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete a specific Sink.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://events.twilio.com/v1/Sinks/{sid}?](
    https://events.twilio.com/v1/Sinks/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://events.twilio.com/v1/Sinks/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_sinks_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a specific Sink.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://events.twilio.com/v1/Sinks/{sid}?](
    https://events.twilio.com/v1/Sinks/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://events.twilio.com/v1/Sinks/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_sinks_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    description: str = None,
) -> Dict[str, Any]:
    """
    Update a specific Sink.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        description:
            A human readable description for the Sink **This value should not
            contain PII.**.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://events.twilio.com/v1/Sinks/{sid}?](
    https://events.twilio.com/v1/Sinks/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://events.twilio.com/v1/Sinks/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "description": description,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def post_v1_sinks_sid_test(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Create a new Sink Test Event for the given Sink.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://events.twilio.com/v1/Sinks/{sid}/Test?](
    https://events.twilio.com/v1/Sinks/{sid}/Test?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://events.twilio.com/v1/Sinks/{sid}/Test"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
    )
    return result


@task
async def post_v1_sinks_sid_validate(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    test_id: str = None,
) -> Dict[str, Any]:
    """
    Validate that a test event for a Sink was received.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        test_id:
            A 34 character string that uniquely identifies the test event for a Sink
            being validated.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://events.twilio.com/v1/Sinks/{sid}/Validate?](
    https://events.twilio.com/v1/Sinks/{sid}/Validate?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://events.twilio.com/v1/Sinks/{sid}/Validate"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "test_id": test_id,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_subscriptions(
    twilio_credentials: "TwilioCredentials",
    sink_sid: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a paginated list of Subscriptions belonging to the account used to make
    the request.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        sink_sid:
            The SID of the sink that the list of Subscriptions should be filtered
            by.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://events.twilio.com/v1/Subscriptions?&sink_sid=%s&page_size=%s](
    https://events.twilio.com/v1/Subscriptions?&sink_sid=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://events.twilio.com/v1/Subscriptions"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "sink_sid": sink_sid,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_subscriptions(
    twilio_credentials: "TwilioCredentials",
    description: str = None,
    sink_sid: str = None,
    types: list = None,
) -> Dict[str, Any]:
    """
    Create a new Subscription.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        description:
            A human readable description for the Subscription **This value should
            not contain PII.**.
        sink_sid:
            The SID of the sink that events selected by this subscription should be
            sent to. Sink must be active for the subscription to be
            created.
        types:
            An array of objects containing the subscribed Event Types.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://events.twilio.com/v1/Subscriptions?](
    https://events.twilio.com/v1/Subscriptions?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://events.twilio.com/v1/Subscriptions"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "description": description,
        "sink_sid": sink_sid,
        "types": types,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_subscriptions_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete a specific Subscription.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://events.twilio.com/v1/Subscriptions/{sid}?](
    https://events.twilio.com/v1/Subscriptions/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://events.twilio.com/v1/Subscriptions/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_subscriptions_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a specific Subscription.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://events.twilio.com/v1/Subscriptions/{sid}?](
    https://events.twilio.com/v1/Subscriptions/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://events.twilio.com/v1/Subscriptions/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_subscriptions_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    description: str = None,
    sink_sid: str = None,
) -> Dict[str, Any]:
    """
    Update a Subscription.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        description:
            A human readable description for the Subscription.
        sink_sid:
            The SID of the sink that events selected by this subscription should be
            sent to. Sink must be active for the subscription to be
            created.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://events.twilio.com/v1/Subscriptions/{sid}?](
    https://events.twilio.com/v1/Subscriptions/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://events.twilio.com/v1/Subscriptions/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "description": description,
        "sink_sid": sink_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_subscriptions_subscription_sid_subscribed_events(
    subscription_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Subscribed Event types for a Subscription.

    Args:
        subscription_sid:
            Subscription sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://events.twilio.com/v1/Subscriptions/{subscription_sid}/SubscribedEvents?&page_size=%s](
    https://events.twilio.com/v1/Subscriptions/{subscription_sid}/SubscribedEvents?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://events.twilio.com/v1/Subscriptions/{subscription_sid}/SubscribedEvents"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_subscriptions_subscription_sid_subscribed_events(
    subscription_sid: str,
    twilio_credentials: "TwilioCredentials",
    schema_version: int = None,
    type: str = None,
) -> Dict[str, Any]:
    """
    Create a new Subscribed Event type for the subscription.

    Args:
        subscription_sid:
            Subscription sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        schema_version:
            The schema version that the subscription should use.
        type:
            Type of event being subscribed to.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://events.twilio.com/v1/Subscriptions/{subscription_sid}/SubscribedEvents?](
    https://events.twilio.com/v1/Subscriptions/{subscription_sid}/SubscribedEvents?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://events.twilio.com/v1/Subscriptions/{subscription_sid}/SubscribedEvents"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "schema_version": schema_version,
        "type": type,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_subscriptions_subscription_sid_subscribed_events_type(
    subscription_sid: str,
    type: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Remove an event type from a subscription.

    Args:
        subscription_sid:
            Subscription sid used in formatting the endpoint URL.
        type:
            Type used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://events.twilio.com/v1/Subscriptions/{subscription_sid}/SubscribedEvents/{type}?](
    https://events.twilio.com/v1/Subscriptions/{subscription_sid}/SubscribedEvents/{type}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://events.twilio.com/v1/Subscriptions/{subscription_sid}/SubscribedEvents/{type}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_subscriptions_subscription_sid_subscribed_events_type(
    subscription_sid: str,
    type: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Read an Event for a Subscription.

    Args:
        subscription_sid:
            Subscription sid used in formatting the endpoint URL.
        type:
            Type used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://events.twilio.com/v1/Subscriptions/{subscription_sid}/SubscribedEvents/{type}?](
    https://events.twilio.com/v1/Subscriptions/{subscription_sid}/SubscribedEvents/{type}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://events.twilio.com/v1/Subscriptions/{subscription_sid}/SubscribedEvents/{type}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_subscriptions_subscription_sid_subscribed_events_type(
    subscription_sid: str,
    type: str,
    twilio_credentials: "TwilioCredentials",
    schema_version: int = None,
) -> Dict[str, Any]:
    """
    Update an Event for a Subscription.

    Args:
        subscription_sid:
            Subscription sid used in formatting the endpoint URL.
        type:
            Type used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        schema_version:
            The schema version that the subscription should use.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://events.twilio.com/v1/Subscriptions/{subscription_sid}/SubscribedEvents/{type}?](
    https://events.twilio.com/v1/Subscriptions/{subscription_sid}/SubscribedEvents/{type}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://events.twilio.com/v1/Subscriptions/{subscription_sid}/SubscribedEvents/{type}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "schema_version": schema_version,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_types(
    twilio_credentials: "TwilioCredentials",
    schema_id: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a paginated list of all the available Event Types.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        schema_id:
            A string parameter filtering the results to return only the Event Types
            using a given schema.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://events.twilio.com/v1/Types?&schema_id=%s&page_size=%s](
    https://events.twilio.com/v1/Types?&schema_id=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://events.twilio.com/v1/Types"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "schema_id": schema_id,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_types_type(
    type: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a specific Event Type.

    Args:
        type:
            Type used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://events.twilio.com/v1/Types/{type}?](
    https://events.twilio.com/v1/Types/{type}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://events.twilio.com/v1/Types/{type}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_channels(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://flex-api.twilio.com/v1/Channels?&page_size=%s](
    https://flex-api.twilio.com/v1/Channels?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://flex-api.twilio.com/v1/Channels"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_channels(
    twilio_credentials: "TwilioCredentials",
    chat_friendly_name: str = None,
    chat_unique_name: str = None,
    chat_user_friendly_name: str = None,
    flex_flow_sid: str = None,
    identity: str = None,
    long_lived: bool = None,
    pre_engagement_data: str = None,
    target: str = None,
    task_attributes: str = None,
    task_sid: str = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        chat_friendly_name:
            The chat channel's friendly name.
        chat_unique_name:
            The chat channel's unique name.
        chat_user_friendly_name:
            The chat participant's friendly name.
        flex_flow_sid:
            The SID of the Flex Flow.
        identity:
            The `identity` value that uniquely identifies the new resource's chat
            User.
        long_lived:
            Whether to create the channel as long-lived.
        pre_engagement_data:
            The pre-engagement data.
        target:
            The Target Contact Identity, for example the phone number of an SMS.
        task_attributes:
            The Task attributes to be added for the TaskRouter Task.
        task_sid:
            The SID of the TaskRouter Task. Only valid when integration type is
            `task`. `null` for integration types `studio` & `external`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://flex-api.twilio.com/v1/Channels?](
    https://flex-api.twilio.com/v1/Channels?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://flex-api.twilio.com/v1/Channels"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "chat_friendly_name": chat_friendly_name,
        "chat_unique_name": chat_unique_name,
        "chat_user_friendly_name": chat_user_friendly_name,
        "flex_flow_sid": flex_flow_sid,
        "identity": identity,
        "long_lived": long_lived,
        "pre_engagement_data": pre_engagement_data,
        "target": target,
        "task_attributes": task_attributes,
        "task_sid": task_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_channels_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://flex-api.twilio.com/v1/Channels/{sid}?](
    https://flex-api.twilio.com/v1/Channels/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://flex-api.twilio.com/v1/Channels/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_channels_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://flex-api.twilio.com/v1/Channels/{sid}?](
    https://flex-api.twilio.com/v1/Channels/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://flex-api.twilio.com/v1/Channels/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_configuration(
    twilio_credentials: "TwilioCredentials",
    ui_version: str = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        ui_version:
            The Pinned UI version of the Configuration resource to fetch.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://flex-api.twilio.com/v1/Configuration?&ui_version=%s](
    https://flex-api.twilio.com/v1/Configuration?&ui_version=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://flex-api.twilio.com/v1/Configuration"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "ui_version": ui_version,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_flex_flows(
    twilio_credentials: "TwilioCredentials",
    friendly_name: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        friendly_name:
            The `friendly_name` of the Flex Flow resources to read.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://flex-api.twilio.com/v1/FlexFlows?&friendly_name=%s&page_size=%s](
    https://flex-api.twilio.com/v1/FlexFlows?&friendly_name=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://flex-api.twilio.com/v1/FlexFlows"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "friendly_name": friendly_name,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_flex_flows(
    twilio_credentials: "TwilioCredentials",
    channel_type: str = None,
    chat_service_sid: str = None,
    contact_identity: str = None,
    enabled: bool = None,
    friendly_name: str = None,
    integration_channel: str = None,
    integration_creation_on_message: bool = None,
    integration_flow_sid: str = None,
    integration_priority: int = None,
    integration_retry_count: int = None,
    integration_timeout: int = None,
    integration_url: str = None,
    integration_workflow_sid: str = None,
    integration_workspace_sid: str = None,
    integration_type: str = None,
    janitor_enabled: bool = None,
    long_lived: bool = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        channel_type:
            The channel type. One of `web`, `facebook`, `sms`, `whatsapp`, `line` or
            `custom`. By default, Studio’s Send to Flex widget passes it
            on to the Task attributes for Tasks created based on this
            Flex Flow. The Task attributes will be used by the Flex UI
            to render the respective Task as appropriate (applying
            channel-specific design and length limits). If `channelType`
            is `facebook`, `whatsapp` or `line`, the Send to Flex widget
            should set the Task Channel to Programmable Chat.
        chat_service_sid:
            The SID of the chat service.
        contact_identity:
            The channel contact's Identity.
        enabled:
            Whether the new Flex Flow is enabled.
        friendly_name:
            A descriptive string that you create to describe the Flex Flow resource.
        integration_channel:
            The Task Channel SID (TCXXXX) or unique name (e.g., `sms`) to use for
            the Task that will be created. Applicable and required when
            `integrationType` is `task`. The default value is `default`.
        integration_creation_on_message:
            In the context of outbound messaging, defines whether to create a Task
            immediately (and therefore reserve the conversation to
            current agent), or delay Task creation until the customer
            sends the first response. Set to false to create
            immediately, true to delay Task creation. This setting is
            only applicable for outbound messaging.
        integration_flow_sid:
            The SID of the Studio Flow. Required when `integrationType` is `studio`.
        integration_priority:
            The Task priority of a new Task. The default priority is 0. Optional
            when `integrationType` is `task`, not applicable otherwise.
        integration_retry_count:
            The number of times to retry the Studio Flow or webhook in case of
            failure. Takes integer values from 0 to 3 with the default
            being 3. Optional when `integrationType` is `studio` or
            `external`, not applicable otherwise.
        integration_timeout:
            The Task timeout in seconds for a new Task. Default is 86,400 seconds
            (24 hours). Optional when `integrationType` is `task`, not
            applicable otherwise.
        integration_url:
            The URL of the external webhook. Required when `integrationType` is
            `external`.
        integration_workflow_sid:
            The Workflow SID for a new Task. Required when `integrationType` is
            `task`.
        integration_workspace_sid:
            The Workspace SID for a new Task. Required when `integrationType` is
            `task`.
        integration_type:
            The software that will handle inbound messages. [Integration
            Type](https://www.twilio.com/docs/flex/developer/messaging/manage-
            flows
            integration-types) can be: `studio`, `external`, or `task`.
        janitor_enabled:
            When enabled, the Messaging Channel Janitor will remove active Proxy
            sessions if the associated Task is deleted outside of the
            Flex UI. Defaults to `false`.
        long_lived:
            When enabled, Flex will keep the chat channel active so that it may be
            used for subsequent interactions with a contact identity.
            Defaults to `false`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://flex-api.twilio.com/v1/FlexFlows?](
    https://flex-api.twilio.com/v1/FlexFlows?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://flex-api.twilio.com/v1/FlexFlows"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "channel_type": channel_type,
        "chat_service_sid": chat_service_sid,
        "contact_identity": contact_identity,
        "enabled": enabled,
        "friendly_name": friendly_name,
        "integration_channel": integration_channel,
        "integration_creation_on_message": integration_creation_on_message,
        "integration_flow_sid": integration_flow_sid,
        "integration_priority": integration_priority,
        "integration_retry_count": integration_retry_count,
        "integration_timeout": integration_timeout,
        "integration_url": integration_url,
        "integration_workflow_sid": integration_workflow_sid,
        "integration_workspace_sid": integration_workspace_sid,
        "integration_type": integration_type,
        "janitor_enabled": janitor_enabled,
        "long_lived": long_lived,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_flex_flows_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://flex-api.twilio.com/v1/FlexFlows/{sid}?](
    https://flex-api.twilio.com/v1/FlexFlows/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://flex-api.twilio.com/v1/FlexFlows/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_flex_flows_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://flex-api.twilio.com/v1/FlexFlows/{sid}?](
    https://flex-api.twilio.com/v1/FlexFlows/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://flex-api.twilio.com/v1/FlexFlows/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_flex_flows_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    channel_type: str = None,
    chat_service_sid: str = None,
    contact_identity: str = None,
    enabled: bool = None,
    friendly_name: str = None,
    integration_channel: str = None,
    integration_creation_on_message: bool = None,
    integration_flow_sid: str = None,
    integration_priority: int = None,
    integration_retry_count: int = None,
    integration_timeout: int = None,
    integration_url: str = None,
    integration_workflow_sid: str = None,
    integration_workspace_sid: str = None,
    integration_type: str = None,
    janitor_enabled: bool = None,
    long_lived: bool = None,
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        channel_type:
            The channel type. One of `web`, `facebook`, `sms`, `whatsapp`, `line` or
            `custom`. By default, Studio’s Send to Flex widget passes it
            on to the Task attributes for Tasks created based on this
            Flex Flow. The Task attributes will be used by the Flex UI
            to render the respective Task as appropriate (applying
            channel-specific design and length limits). If `channelType`
            is `facebook`, `whatsapp` or `line`, the Send to Flex widget
            should set the Task Channel to Programmable Chat.
        chat_service_sid:
            The SID of the chat service.
        contact_identity:
            The channel contact's Identity.
        enabled:
            Whether the new Flex Flow is enabled.
        friendly_name:
            A descriptive string that you create to describe the Flex Flow resource.
        integration_channel:
            The Task Channel SID (TCXXXX) or unique name (e.g., `sms`) to use for
            the Task that will be created. Applicable and required when
            `integrationType` is `task`. The default value is `default`.
        integration_creation_on_message:
            In the context of outbound messaging, defines whether to create a Task
            immediately (and therefore reserve the conversation to
            current agent), or delay Task creation until the customer
            sends the first response. Set to false to create
            immediately, true to delay Task creation. This setting is
            only applicable for outbound messaging.
        integration_flow_sid:
            The SID of the Studio Flow. Required when `integrationType` is `studio`.
        integration_priority:
            The Task priority of a new Task. The default priority is 0. Optional
            when `integrationType` is `task`, not applicable otherwise.
        integration_retry_count:
            The number of times to retry the Studio Flow or webhook in case of
            failure. Takes integer values from 0 to 3 with the default
            being 3. Optional when `integrationType` is `studio` or
            `external`, not applicable otherwise.
        integration_timeout:
            The Task timeout in seconds for a new Task. Default is 86,400 seconds
            (24 hours). Optional when `integrationType` is `task`, not
            applicable otherwise.
        integration_url:
            The URL of the external webhook. Required when `integrationType` is
            `external`.
        integration_workflow_sid:
            The Workflow SID for a new Task. Required when `integrationType` is
            `task`.
        integration_workspace_sid:
            The Workspace SID for a new Task. Required when `integrationType` is
            `task`.
        integration_type:
            The software that will handle inbound messages. [Integration
            Type](https://www.twilio.com/docs/flex/developer/messaging/manage-
            flows
            integration-types) can be: `studio`, `external`, or `task`.
        janitor_enabled:
            When enabled, the Messaging Channel Janitor will remove active Proxy
            sessions if the associated Task is deleted outside of the
            Flex UI. Defaults to `false`.
        long_lived:
            When enabled, Flex will keep the chat channel active so that it may be
            used for subsequent interactions with a contact identity.
            Defaults to `false`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://flex-api.twilio.com/v1/FlexFlows/{sid}?](
    https://flex-api.twilio.com/v1/FlexFlows/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://flex-api.twilio.com/v1/FlexFlows/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "channel_type": channel_type,
        "chat_service_sid": chat_service_sid,
        "contact_identity": contact_identity,
        "enabled": enabled,
        "friendly_name": friendly_name,
        "integration_channel": integration_channel,
        "integration_creation_on_message": integration_creation_on_message,
        "integration_flow_sid": integration_flow_sid,
        "integration_priority": integration_priority,
        "integration_retry_count": integration_retry_count,
        "integration_timeout": integration_timeout,
        "integration_url": integration_url,
        "integration_workflow_sid": integration_workflow_sid,
        "integration_workspace_sid": integration_workspace_sid,
        "integration_type": integration_type,
        "janitor_enabled": janitor_enabled,
        "long_lived": long_lived,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def post_v1_interactions(
    twilio_credentials: "TwilioCredentials",
    channel: str = None,
    routing: str = None,
) -> Dict[str, Any]:
    """
    Create a new Interaction.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        channel:
            The Interaction's channel.
        routing:
            The Interaction's routing logic.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://flex-api.twilio.com/v1/Interactions?](
    https://flex-api.twilio.com/v1/Interactions?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://flex-api.twilio.com/v1/Interactions"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "channel": channel,
        "routing": routing,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_interactions_interaction_sid_channels(
    interaction_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    List all Channels for an Interaction.

    Args:
        interaction_sid:
            Interaction sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://flex-api.twilio.com/v1/Interactions/{interaction_sid}/Channels?&page_size=%s](
    https://flex-api.twilio.com/v1/Interactions/{interaction_sid}/Channels?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://flex-api.twilio.com/v1/Interactions/{interaction_sid}/Channels"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_interactions_interaction_sid_channels_channel_sid_invites(
    interaction_sid: str,
    channel_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    List all Invites for a Channel.

    Args:
        interaction_sid:
            Interaction sid used in formatting the endpoint URL.
        channel_sid:
            Channel sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://flex-api.twilio.com/v1/Interactions/{interaction_sid}/Channels/{channel_sid}/Invites?&page_size=%s](
    https://flex-api.twilio.com/v1/Interactions/{interaction_sid}/Channels/{channel_sid}/Invites?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://flex-api.twilio.com/v1/Interactions/{interaction_sid}/Channels/{channel_sid}/Invites"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_interactions_interaction_sid_channels_channel_sid_invites(
    interaction_sid: str,
    channel_sid: str,
    twilio_credentials: "TwilioCredentials",
    routing: str = None,
) -> Dict[str, Any]:
    """
    Invite an Agent or a TaskQueue to a Channel.

    Args:
        interaction_sid:
            Interaction sid used in formatting the endpoint URL.
        channel_sid:
            Channel sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        routing:
            The Interaction's routing logic.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://flex-api.twilio.com/v1/Interactions/{interaction_sid}/Channels/{channel_sid}/Invites?](
    https://flex-api.twilio.com/v1/Interactions/{interaction_sid}/Channels/{channel_sid}/Invites?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://flex-api.twilio.com/v1/Interactions/{interaction_sid}/Channels/{channel_sid}/Invites"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "routing": routing,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_interactions_interaction_sid_channels_channel_sid_participants(
    interaction_sid: str,
    channel_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    List all Participants for a Channel.

    Args:
        interaction_sid:
            Interaction sid used in formatting the endpoint URL.
        channel_sid:
            Channel sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://flex-api.twilio.com/v1/Interactions/{interaction_sid}/Channels/{channel_sid}/Participants?&page_size=%s](
    https://flex-api.twilio.com/v1/Interactions/{interaction_sid}/Channels/{channel_sid}/Participants?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://flex-api.twilio.com/v1/Interactions/{interaction_sid}/Channels/{channel_sid}/Participants"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_interactions_interaction_sid_channels_channel_sid_participants(
    interaction_sid: str,
    channel_sid: str,
    twilio_credentials: "TwilioCredentials",
    media_properties: str = None,
    type: str = None,
) -> Dict[str, Any]:
    """
    Add a Participant to a Channel.

    Args:
        interaction_sid:
            Interaction sid used in formatting the endpoint URL.
        channel_sid:
            Channel sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        media_properties:
            JSON representing the Media Properties for the new Participant.
        type:
            Participant type.  Can be: `agent`, `customer`, `supervisor`, `external`
            or `unknown`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://flex-api.twilio.com/v1/Interactions/{interaction_sid}/Channels/{channel_sid}/Participants?](
    https://flex-api.twilio.com/v1/Interactions/{interaction_sid}/Channels/{channel_sid}/Participants?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://flex-api.twilio.com/v1/Interactions/{interaction_sid}/Channels/{channel_sid}/Participants"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "media_properties": media_properties,
        "type": type,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def post_v1_interactions_interaction_sid_channels_channel_sid_participants_sid(
    interaction_sid: str,
    channel_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    status: str = None,
) -> Dict[str, Any]:
    """
    Update an existing Channel Participant.

    Args:
        interaction_sid:
            Interaction sid used in formatting the endpoint URL.
        channel_sid:
            Channel sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        status:
            The Participant's status. Can be: `closed` or `wrapup`.  Participant
            must be an agent.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://flex-api.twilio.com/v1/Interactions/{interaction_sid}/Channels/{channel_sid}/Participants/{sid}?](
    https://flex-api.twilio.com/v1/Interactions/{interaction_sid}/Channels/{channel_sid}/Participants/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://flex-api.twilio.com/v1/Interactions/{interaction_sid}/Channels/{channel_sid}/Participants/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "status": status,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_interactions_interaction_sid_channels_sid(
    interaction_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a Channel for an Interaction.

    Args:
        interaction_sid:
            Interaction sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://flex-api.twilio.com/v1/Interactions/{interaction_sid}/Channels/{sid}?](
    https://flex-api.twilio.com/v1/Interactions/{interaction_sid}/Channels/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://flex-api.twilio.com/v1/Interactions/{interaction_sid}/Channels/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_interactions_interaction_sid_channels_sid(
    interaction_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    routing: str = None,
    status: str = None,
) -> Dict[str, Any]:
    """
    Update an existing Interaction.

    Args:
        interaction_sid:
            Interaction sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        routing:
            Optional. The state of associated tasks. If not specified, all tasks
            will be set to `wrapping`.
        status:
            Required. Indicates the Interaction channel's status. When a channel is
            set to `closed`, all tasks are put in the `wrapping` state
            by default unless the Routing status is set to `closed` in
            which case the tasks will be `completed`. Value: `closed`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://flex-api.twilio.com/v1/Interactions/{interaction_sid}/Channels/{sid}?](
    https://flex-api.twilio.com/v1/Interactions/{interaction_sid}/Channels/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://flex-api.twilio.com/v1/Interactions/{interaction_sid}/Channels/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "routing": routing,
        "status": status,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_interactions_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://flex-api.twilio.com/v1/Interactions/{sid}?](
    https://flex-api.twilio.com/v1/Interactions/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://flex-api.twilio.com/v1/Interactions/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_web_channels(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://flex-api.twilio.com/v1/WebChannels?&page_size=%s](
    https://flex-api.twilio.com/v1/WebChannels?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://flex-api.twilio.com/v1/WebChannels"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_web_channels(
    twilio_credentials: "TwilioCredentials",
    chat_friendly_name: str = None,
    chat_unique_name: str = None,
    customer_friendly_name: str = None,
    flex_flow_sid: str = None,
    identity: str = None,
    pre_engagement_data: str = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        chat_friendly_name:
            The chat channel's friendly name.
        chat_unique_name:
            The chat channel's unique name.
        customer_friendly_name:
            The chat participant's friendly name.
        flex_flow_sid:
            The SID of the Flex Flow.
        identity:
            The chat identity.
        pre_engagement_data:
            The pre-engagement data.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://flex-api.twilio.com/v1/WebChannels?](
    https://flex-api.twilio.com/v1/WebChannels?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://flex-api.twilio.com/v1/WebChannels"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "chat_friendly_name": chat_friendly_name,
        "chat_unique_name": chat_unique_name,
        "customer_friendly_name": customer_friendly_name,
        "flex_flow_sid": flex_flow_sid,
        "identity": identity,
        "pre_engagement_data": pre_engagement_data,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_web_channels_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://flex-api.twilio.com/v1/WebChannels/{sid}?](
    https://flex-api.twilio.com/v1/WebChannels/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://flex-api.twilio.com/v1/WebChannels/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_web_channels_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://flex-api.twilio.com/v1/WebChannels/{sid}?](
    https://flex-api.twilio.com/v1/WebChannels/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://flex-api.twilio.com/v1/WebChannels/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_web_channels_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    chat_status: str = None,
    post_engagement_data: str = None,
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        chat_status:
            The chat status. Can only be `inactive`.
        post_engagement_data:
            The post-engagement data.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://flex-api.twilio.com/v1/WebChannels/{sid}?](
    https://flex-api.twilio.com/v1/WebChannels/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://flex-api.twilio.com/v1/WebChannels/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "chat_status": chat_status,
        "post_engagement_data": post_engagement_data,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_users_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a frontline user.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://frontline-api.twilio.com/v1/Users/{sid}?](
    https://frontline-api.twilio.com/v1/Users/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://frontline-api.twilio.com/v1/Users/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_users_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    avatar: str = None,
    friendly_name: str = None,
    is_available: bool = None,
    state: str = None,
) -> Dict[str, Any]:
    """
    Update an existing frontline user.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        avatar:
            The avatar URL which will be shown in Frontline application.
        friendly_name:
            The string that you assigned to describe the User.
        is_available:
            Whether the User is available for new conversations. Set to `false` to
            prevent User from receiving new inbound conversations if you
            are using [Pool
            Routing](https://www.twilio.com/docs/frontline/handle-
            incoming-conversations
            3-pool-routing).
        state:
            Current state of this user. Can be either `active` or `deactivated`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://frontline-api.twilio.com/v1/Users/{sid}?](
    https://frontline-api.twilio.com/v1/Users/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://frontline-api.twilio.com/v1/Users/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "avatar": avatar,
        "friendly_name": friendly_name,
        "is_available": is_available,
        "state": state,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_conferences(
    twilio_credentials: "TwilioCredentials",
    conference_sid: str = None,
    friendly_name: str = None,
    status: str = None,
    created_after: str = None,
    created_before: str = None,
    mixer_region: str = None,
    tags: str = None,
    subaccount: str = None,
    detected_issues: str = None,
    end_reason: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of Conferences.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        conference_sid:
            The SID of the conference.
        friendly_name:
            Custom label for the conference resource, up to 64 characters.
        status:
            Conference status.
        created_after:
            Conferences created after the provided timestamp specified in ISO 8601
            format.
        created_before:
            Conferences created before the provided timestamp specified in ISO 8601
            format.
        mixer_region:
            Twilio region where the conference media was mixed.
        tags:
            Tags applied by Twilio for common potential configuration, quality, or
            performance issues.
        subaccount:
            Account SID for the subaccount whose resources you wish to retrieve.
        detected_issues:
            Potential configuration, behavior, or performance issues detected during
            the conference.
        end_reason:
            Conference end reason; e.g. last participant left, modified by API, etc.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://insights.twilio.com/v1/Conferences?&conference_sid=%s&friendly_name=%s&status=%s&created_after=%s&created_before=%s&mixer_region=%s&tags=%s&subaccount=%s&detected_issues=%s&end_reason=%s&page_size=%s](
    https://insights.twilio.com/v1/Conferences?&conference_sid=%s&friendly_name=%s&status=%s&created_after=%s&created_before=%s&mixer_region=%s&tags=%s&subaccount=%s&detected_issues=%s&end_reason=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://insights.twilio.com/v1/Conferences"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "conference_sid": conference_sid,
        "friendly_name": friendly_name,
        "status": status,
        "created_after": created_after,
        "created_before": created_before,
        "mixer_region": mixer_region,
        "tags": tags,
        "subaccount": subaccount,
        "detected_issues": detected_issues,
        "end_reason": end_reason,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_conferences_conference_sid(
    conference_sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a specific Conference.

    Args:
        conference_sid:
            Conference sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://insights.twilio.com/v1/Conferences/{conference_sid}?](
    https://insights.twilio.com/v1/Conferences/{conference_sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://insights.twilio.com/v1/Conferences/{conference_sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_conferences_conference_sid_participants(
    conference_sid: str,
    twilio_credentials: "TwilioCredentials",
    participant_sid: str = None,
    label: str = None,
    events: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """
    List Conference Participants.

    Args:
        conference_sid:
            Conference sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        participant_sid:
            The unique SID identifier of the Participant.
        label:
            User-specified label for a participant.
        events:
            Conference events generated by application or participant activity; e.g.
            `hold`, `mute`, etc.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://insights.twilio.com/v1/Conferences/{conference_sid}/Participants?&participant_sid=%s&label=%s&events=%s&page_size=%s](
    https://insights.twilio.com/v1/Conferences/{conference_sid}/Participants?&participant_sid=%s&label=%s&events=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://insights.twilio.com/v1/Conferences/{conference_sid}/Participants"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "participant_sid": participant_sid,
        "label": label,
        "events": events,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_conferences_conference_sid_participants_participant_sid(
    conference_sid: str,
    participant_sid: str,
    twilio_credentials: "TwilioCredentials",
    events: str = None,
    metrics: str = None,
) -> Dict[str, Any]:
    """
    Fetch a specific Conference Participant Summary.

    Args:
        conference_sid:
            Conference sid used in formatting the endpoint URL.
        participant_sid:
            Participant sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        events:
            Conference events generated by application or participant activity; e.g.
            `hold`, `mute`, etc.
        metrics:
            Object. Contains participant call quality metrics.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://insights.twilio.com/v1/Conferences/{conference_sid}/Participants/{participant_sid}?&events=%s&metrics=%s](
    https://insights.twilio.com/v1/Conferences/{conference_sid}/Participants/{participant_sid}?&events=%s&metrics=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://insights.twilio.com/v1/Conferences/{conference_sid}/Participants/{participant_sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "events": events,
        "metrics": metrics,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_video_rooms(
    twilio_credentials: "TwilioCredentials",
    room_type: list = None,
    codec: list = None,
    room_name: str = None,
    created_after: str = None,
    created_before: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Get a list of Programmable Video Rooms.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        room_type:
            Type of room. Can be `go`, `peer_to_peer`, `group`, or `group_small`.
        codec:
            Codecs used by participants in the room. Can be `VP8`, `H264`, or `VP9`.
        room_name:
            Room friendly name.
        created_after:
            Only read rooms that started on or after this ISO 8601 timestamp.
        created_before:
            Only read rooms that started before this ISO 8601 timestamp.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://insights.twilio.com/v1/Video/Rooms?&room_type=%s&codec=%s&room_name=%s&created_after=%s&created_before=%s&page_size=%s](
    https://insights.twilio.com/v1/Video/Rooms?&room_type=%s&codec=%s&room_name=%s&created_after=%s&created_before=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://insights.twilio.com/v1/Video/Rooms"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "room_type": room_type,
        "codec": codec,
        "room_name": room_name,
        "created_after": created_after,
        "created_before": created_before,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_video_rooms_room_sid(
    room_sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Get Video Log Analyzer data for a Room.

    Args:
        room_sid:
            Room sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://insights.twilio.com/v1/Video/Rooms/{room_sid}?](
    https://insights.twilio.com/v1/Video/Rooms/{room_sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://insights.twilio.com/v1/Video/Rooms/{room_sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_video_rooms_room_sid_participants(
    room_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Get a list of room participants.

    Args:
        room_sid:
            Room sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://insights.twilio.com/v1/Video/Rooms/{room_sid}/Participants?&page_size=%s](
    https://insights.twilio.com/v1/Video/Rooms/{room_sid}/Participants?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://insights.twilio.com/v1/Video/Rooms/{room_sid}/Participants"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_video_rooms_room_sid_participants_participant_sid(
    room_sid: str,
    participant_sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Get Video Log Analyzer data for a Room Participant.

    Args:
        room_sid:
            Room sid used in formatting the endpoint URL.
        participant_sid:
            Participant sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://insights.twilio.com/v1/Video/Rooms/{room_sid}/Participants/{participant_sid}?](
    https://insights.twilio.com/v1/Video/Rooms/{room_sid}/Participants/{participant_sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://insights.twilio.com/v1/Video/Rooms/{room_sid}/Participants/{participant_sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_voice_settings(
    twilio_credentials: "TwilioCredentials",
    subaccount_sid: str = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        subaccount_sid:


    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://insights.twilio.com/v1/Voice/Settings?&subaccount_sid=%s](
    https://insights.twilio.com/v1/Voice/Settings?&subaccount_sid=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://insights.twilio.com/v1/Voice/Settings"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "subaccount_sid": subaccount_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_voice_settings(
    twilio_credentials: "TwilioCredentials",
    advanced_features: bool = None,
    subaccount_sid: str = None,
    voice_trace: bool = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        advanced_features:

        subaccount_sid:

        voice_trace:


    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://insights.twilio.com/v1/Voice/Settings?](
    https://insights.twilio.com/v1/Voice/Settings?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://insights.twilio.com/v1/Voice/Settings"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "advanced_features": advanced_features,
        "subaccount_sid": subaccount_sid,
        "voice_trace": voice_trace,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_voice_summaries(
    twilio_credentials: "TwilioCredentials",
    from_: str = None,
    to: str = None,
    from_carrier: str = None,
    to_carrier: str = None,
    from_country_code: str = None,
    to_country_code: str = None,
    branded: bool = None,
    verified_caller: bool = None,
    has_tag: bool = None,
    start_time: str = None,
    end_time: str = None,
    call_type: str = None,
    call_state: str = None,
    direction: str = None,
    processing_state: str = None,
    sort_by: str = None,
    subaccount: str = None,
    abnormal_session: bool = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        from_:

        to:

        from_carrier:

        to_carrier:

        from_country_code:

        to_country_code:

        branded:

        verified_caller:

        has_tag:

        start_time:

        end_time:

        call_type:

        call_state:

        direction:

        processing_state:

        sort_by:

        subaccount:

        abnormal_session:

        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://insights.twilio.com/v1/Voice/Summaries?&from_=%s&to=%s&from_carrier=%s&to_carrier=%s&from_country_code=%s&to_country_code=%s&branded=%s&verified_caller=%s&has_tag=%s&start_time=%s&end_time=%s&call_type=%s&call_state=%s&direction=%s&processing_state=%s&sort_by=%s&subaccount=%s&abnormal_session=%s&page_size=%s](
    https://insights.twilio.com/v1/Voice/Summaries?&from_=%s&to=%s&from_carrier=%s&to_carrier=%s&from_country_code=%s&to_country_code=%s&branded=%s&verified_caller=%s&has_tag=%s&start_time=%s&end_time=%s&call_type=%s&call_state=%s&direction=%s&processing_state=%s&sort_by=%s&subaccount=%s&abnormal_session=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://insights.twilio.com/v1/Voice/Summaries"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "from_": from_,
        "to": to,
        "from_carrier": from_carrier,
        "to_carrier": to_carrier,
        "from_country_code": from_country_code,
        "to_country_code": to_country_code,
        "branded": branded,
        "verified_caller": verified_caller,
        "has_tag": has_tag,
        "start_time": start_time,
        "end_time": end_time,
        "call_type": call_type,
        "call_state": call_state,
        "direction": direction,
        "processing_state": processing_state,
        "sort_by": sort_by,
        "subaccount": subaccount,
        "abnormal_session": abnormal_session,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_voice_call_sid_annotation(
    call_sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        call_sid:
            Call sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://insights.twilio.com/v1/Voice/{call_sid}/Annotation?](
    https://insights.twilio.com/v1/Voice/{call_sid}/Annotation?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://insights.twilio.com/v1/Voice/{call_sid}/Annotation"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_voice_call_sid_annotation(
    call_sid: str,
    twilio_credentials: "TwilioCredentials",
    answered_by: str = None,
    call_score: int = None,
    comment: str = None,
    connectivity_issue: str = None,
    incident: str = None,
    quality_issues: str = None,
    spam: bool = None,
) -> Dict[str, Any]:
    """


    Args:
        call_sid:
            Call sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        answered_by:

        call_score:

        comment:

        connectivity_issue:

        incident:

        quality_issues:

        spam:


    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://insights.twilio.com/v1/Voice/{call_sid}/Annotation?](
    https://insights.twilio.com/v1/Voice/{call_sid}/Annotation?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://insights.twilio.com/v1/Voice/{call_sid}/Annotation"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "answered_by": answered_by,
        "call_score": call_score,
        "comment": comment,
        "connectivity_issue": connectivity_issue,
        "incident": incident,
        "quality_issues": quality_issues,
        "spam": spam,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_voice_call_sid_events(
    call_sid: str,
    twilio_credentials: "TwilioCredentials",
    edge: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        call_sid:
            Call sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        edge:

        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://insights.twilio.com/v1/Voice/{call_sid}/Events?&edge=%s&page_size=%s](
    https://insights.twilio.com/v1/Voice/{call_sid}/Events?&edge=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://insights.twilio.com/v1/Voice/{call_sid}/Events"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "edge": edge,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_voice_call_sid_metrics(
    call_sid: str,
    twilio_credentials: "TwilioCredentials",
    edge: str = None,
    direction: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        call_sid:
            Call sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        edge:

        direction:

        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://insights.twilio.com/v1/Voice/{call_sid}/Metrics?&edge=%s&direction=%s&page_size=%s](
    https://insights.twilio.com/v1/Voice/{call_sid}/Metrics?&edge=%s&direction=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://insights.twilio.com/v1/Voice/{call_sid}/Metrics"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "edge": edge,
        "direction": direction,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_voice_call_sid_summary(
    call_sid: str,
    twilio_credentials: "TwilioCredentials",
    processing_state: str = None,
) -> Dict[str, Any]:
    """


    Args:
        call_sid:
            Call sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        processing_state:


    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://insights.twilio.com/v1/Voice/{call_sid}/Summary?&processing_state=%s](
    https://insights.twilio.com/v1/Voice/{call_sid}/Summary?&processing_state=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://insights.twilio.com/v1/Voice/{call_sid}/Summary"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "processing_state": processing_state,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_voice_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://insights.twilio.com/v1/Voice/{sid}?](
    https://insights.twilio.com/v1/Voice/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://insights.twilio.com/v1/Voice/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_credentials(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Credentials?&page_size=%s](
    https://ip-messaging.twilio.com/v1/Credentials?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://ip-messaging.twilio.com/v1/Credentials"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_credentials(
    twilio_credentials: "TwilioCredentials",
    api_key: str = None,
    certificate: str = None,
    friendly_name: str = None,
    private_key: str = None,
    sandbox: bool = None,
    secret: str = None,
    type: str = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        api_key:

        certificate:

        friendly_name:

        private_key:

        sandbox:

        secret:

        type:


    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Credentials?](
    https://ip-messaging.twilio.com/v1/Credentials?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://ip-messaging.twilio.com/v1/Credentials"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "api_key": api_key,
        "certificate": certificate,
        "friendly_name": friendly_name,
        "private_key": private_key,
        "sandbox": sandbox,
        "secret": secret,
        "type": type,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_credentials_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Credentials/{sid}?](
    https://ip-messaging.twilio.com/v1/Credentials/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://ip-messaging.twilio.com/v1/Credentials/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_credentials_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Credentials/{sid}?](
    https://ip-messaging.twilio.com/v1/Credentials/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://ip-messaging.twilio.com/v1/Credentials/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_credentials_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    api_key: str = None,
    certificate: str = None,
    friendly_name: str = None,
    private_key: str = None,
    sandbox: bool = None,
    secret: str = None,
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        api_key:

        certificate:

        friendly_name:

        private_key:

        sandbox:

        secret:


    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Credentials/{sid}?](
    https://ip-messaging.twilio.com/v1/Credentials/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://ip-messaging.twilio.com/v1/Credentials/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "api_key": api_key,
        "certificate": certificate,
        "friendly_name": friendly_name,
        "private_key": private_key,
        "sandbox": sandbox,
        "secret": secret,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Services?&page_size=%s](
    https://ip-messaging.twilio.com/v1/Services?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://ip-messaging.twilio.com/v1/Services"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services(
    twilio_credentials: "TwilioCredentials",
    friendly_name: str = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        friendly_name:


    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Services?](
    https://ip-messaging.twilio.com/v1/Services?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://ip-messaging.twilio.com/v1/Services"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "friendly_name": friendly_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_service_sid_channels(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    type: list = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        type:

        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels?&type=%s&page_size=%s](
    https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels?&type=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "type": type,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_channels(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    attributes: str = None,
    friendly_name: str = None,
    type: str = None,
    unique_name: str = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        attributes:

        friendly_name:

        type:

        unique_name:


    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels?](
    https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "attributes": attributes,
        "friendly_name": friendly_name,
        "type": type,
        "unique_name": unique_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_service_sid_channels_channel_sid_invites(
    service_sid: str,
    channel_sid: str,
    twilio_credentials: "TwilioCredentials",
    identity: list = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        channel_sid:
            Channel sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        identity:

        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Invites?&identity=%s&page_size=%s](
    https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Invites?&identity=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Invites"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "identity": identity,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_channels_channel_sid_invites(
    service_sid: str,
    channel_sid: str,
    twilio_credentials: "TwilioCredentials",
    identity: str = None,
    role_sid: str = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        channel_sid:
            Channel sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        identity:

        role_sid:


    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Invites?](
    https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Invites?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Invites"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "identity": identity,
        "role_sid": role_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_service_sid_channels_channel_sid_invites_sid(
    service_sid: str,
    channel_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        channel_sid:
            Channel sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Invites/{sid}?](
    https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Invites/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Invites/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_channels_channel_sid_invites_sid(
    service_sid: str,
    channel_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        channel_sid:
            Channel sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Invites/{sid}?](
    https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Invites/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Invites/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_channels_channel_sid_members(
    service_sid: str,
    channel_sid: str,
    twilio_credentials: "TwilioCredentials",
    identity: list = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        channel_sid:
            Channel sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        identity:

        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Members?&identity=%s&page_size=%s](
    https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Members?&identity=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Members"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "identity": identity,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_channels_channel_sid_members(
    service_sid: str,
    channel_sid: str,
    twilio_credentials: "TwilioCredentials",
    identity: str = None,
    role_sid: str = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        channel_sid:
            Channel sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        identity:

        role_sid:


    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Members?](
    https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Members?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Members"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "identity": identity,
        "role_sid": role_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_service_sid_channels_channel_sid_members_sid(
    service_sid: str,
    channel_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        channel_sid:
            Channel sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Members/{sid}?](
    https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Members/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Members/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_channels_channel_sid_members_sid(
    service_sid: str,
    channel_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        channel_sid:
            Channel sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Members/{sid}?](
    https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Members/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Members/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_channels_channel_sid_members_sid(
    service_sid: str,
    channel_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    last_consumed_message_index: int = None,
    role_sid: str = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        channel_sid:
            Channel sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        last_consumed_message_index:

        role_sid:


    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Members/{sid}?](
    https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Members/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Members/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "last_consumed_message_index": last_consumed_message_index,
        "role_sid": role_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_service_sid_channels_channel_sid_messages(
    service_sid: str,
    channel_sid: str,
    twilio_credentials: "TwilioCredentials",
    order: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        channel_sid:
            Channel sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        order:

        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Messages?&order=%s&page_size=%s](
    https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Messages?&order=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Messages"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "order": order,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_channels_channel_sid_messages(
    service_sid: str,
    channel_sid: str,
    twilio_credentials: "TwilioCredentials",
    attributes: str = None,
    body: str = None,
    from_: str = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        channel_sid:
            Channel sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        attributes:

        body:

        from_:


    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Messages?](
    https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Messages?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Messages"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "attributes": attributes,
        "body": body,
        "from_": from_,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_service_sid_channels_channel_sid_messages_sid(
    service_sid: str,
    channel_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        channel_sid:
            Channel sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Messages/{sid}?](
    https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Messages/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Messages/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_channels_channel_sid_messages_sid(
    service_sid: str,
    channel_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        channel_sid:
            Channel sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Messages/{sid}?](
    https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Messages/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Messages/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_channels_channel_sid_messages_sid(
    service_sid: str,
    channel_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    attributes: str = None,
    body: str = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        channel_sid:
            Channel sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        attributes:

        body:


    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Messages/{sid}?](
    https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Messages/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{channel_sid}/Messages/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "attributes": attributes,
        "body": body,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_service_sid_channels_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{sid}?](
    https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_channels_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{sid}?](
    https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_channels_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    attributes: str = None,
    friendly_name: str = None,
    unique_name: str = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        attributes:

        friendly_name:

        unique_name:


    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{sid}?](
    https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://ip-messaging.twilio.com/v1/Services/{service_sid}/Channels/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "attributes": attributes,
        "friendly_name": friendly_name,
        "unique_name": unique_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_service_sid_roles(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Services/{service_sid}/Roles?&page_size=%s](
    https://ip-messaging.twilio.com/v1/Services/{service_sid}/Roles?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://ip-messaging.twilio.com/v1/Services/{service_sid}/Roles"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_roles(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    friendly_name: str = None,
    permission: list = None,
    type: str = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        friendly_name:

        permission:

        type:


    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Services/{service_sid}/Roles?](
    https://ip-messaging.twilio.com/v1/Services/{service_sid}/Roles?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://ip-messaging.twilio.com/v1/Services/{service_sid}/Roles"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "friendly_name": friendly_name,
        "permission": permission,
        "type": type,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_service_sid_roles_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Services/{service_sid}/Roles/{sid}?](
    https://ip-messaging.twilio.com/v1/Services/{service_sid}/Roles/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = (
        f"https://ip-messaging.twilio.com/v1/Services/{service_sid}/Roles/{sid}"  # noqa
    )
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_roles_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Services/{service_sid}/Roles/{sid}?](
    https://ip-messaging.twilio.com/v1/Services/{service_sid}/Roles/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = (
        f"https://ip-messaging.twilio.com/v1/Services/{service_sid}/Roles/{sid}"  # noqa
    )
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_roles_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    permission: list = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        permission:


    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Services/{service_sid}/Roles/{sid}?](
    https://ip-messaging.twilio.com/v1/Services/{service_sid}/Roles/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = (
        f"https://ip-messaging.twilio.com/v1/Services/{service_sid}/Roles/{sid}"  # noqa
    )
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "permission": permission,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_service_sid_users(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Services/{service_sid}/Users?&page_size=%s](
    https://ip-messaging.twilio.com/v1/Services/{service_sid}/Users?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://ip-messaging.twilio.com/v1/Services/{service_sid}/Users"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_users(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    attributes: str = None,
    friendly_name: str = None,
    identity: str = None,
    role_sid: str = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        attributes:

        friendly_name:

        identity:

        role_sid:


    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Services/{service_sid}/Users?](
    https://ip-messaging.twilio.com/v1/Services/{service_sid}/Users?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://ip-messaging.twilio.com/v1/Services/{service_sid}/Users"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "attributes": attributes,
        "friendly_name": friendly_name,
        "identity": identity,
        "role_sid": role_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_service_sid_users_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Services/{service_sid}/Users/{sid}?](
    https://ip-messaging.twilio.com/v1/Services/{service_sid}/Users/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = (
        f"https://ip-messaging.twilio.com/v1/Services/{service_sid}/Users/{sid}"  # noqa
    )
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_users_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Services/{service_sid}/Users/{sid}?](
    https://ip-messaging.twilio.com/v1/Services/{service_sid}/Users/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = (
        f"https://ip-messaging.twilio.com/v1/Services/{service_sid}/Users/{sid}"  # noqa
    )
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_users_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    attributes: str = None,
    friendly_name: str = None,
    role_sid: str = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        attributes:

        friendly_name:

        role_sid:


    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Services/{service_sid}/Users/{sid}?](
    https://ip-messaging.twilio.com/v1/Services/{service_sid}/Users/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = (
        f"https://ip-messaging.twilio.com/v1/Services/{service_sid}/Users/{sid}"  # noqa
    )
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "attributes": attributes,
        "friendly_name": friendly_name,
        "role_sid": role_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_service_sid_users_user_sid_channels(
    service_sid: str,
    user_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        user_sid:
            User sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Services/{service_sid}/Users/{user_sid}/Channels?&page_size=%s](
    https://ip-messaging.twilio.com/v1/Services/{service_sid}/Users/{user_sid}/Channels?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://ip-messaging.twilio.com/v1/Services/{service_sid}/Users/{user_sid}/Channels"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def delete_v1_services_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Services/{sid}?](
    https://ip-messaging.twilio.com/v1/Services/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://ip-messaging.twilio.com/v1/Services/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Services/{sid}?](
    https://ip-messaging.twilio.com/v1/Services/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://ip-messaging.twilio.com/v1/Services/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    consumption_report_interval: int = None,
    default_channel_creator_role_sid: str = None,
    default_channel_role_sid: str = None,
    default_service_role_sid: str = None,
    friendly_name: str = None,
    limits_channel_members: int = None,
    limits_user_channels: int = None,
    notifications_added_to_channel_enabled: bool = None,
    notifications_added_to_channel_template: str = None,
    notifications_invited_to_channel_enabled: bool = None,
    notifications_invited_to_channel_template: str = None,
    notifications_new_message_enabled: bool = None,
    notifications_new_message_template: str = None,
    notifications_removed_from_channel_enabled: bool = None,
    notifications_removed_from_channel_template: str = None,
    post_webhook_url: str = None,
    pre_webhook_url: str = None,
    reachability_enabled: bool = None,
    read_status_enabled: bool = None,
    typing_indicator_timeout: int = None,
    webhook_filters: list = None,
    webhook_method: str = None,
    webhooks_on_channel_add_method: str = None,
    webhooks_on_channel_add_url: str = None,
    webhooks_on_channel_added_method: str = None,
    webhooks_on_channel_added_url: str = None,
    webhooks_on_channel_destroy_method: str = None,
    webhooks_on_channel_destroy_url: str = None,
    webhooks_on_channel_destroyed_method: str = None,
    webhooks_on_channel_destroyed_url: str = None,
    webhooks_on_channel_update_method: str = None,
    webhooks_on_channel_update_url: str = None,
    webhooks_on_channel_updated_method: str = None,
    webhooks_on_channel_updated_url: str = None,
    webhooks_on_member_add_method: str = None,
    webhooks_on_member_add_url: str = None,
    webhooks_on_member_added_method: str = None,
    webhooks_on_member_added_url: str = None,
    webhooks_on_member_remove_method: str = None,
    webhooks_on_member_remove_url: str = None,
    webhooks_on_member_removed_method: str = None,
    webhooks_on_member_removed_url: str = None,
    webhooks_on_message_remove_method: str = None,
    webhooks_on_message_remove_url: str = None,
    webhooks_on_message_removed_method: str = None,
    webhooks_on_message_removed_url: str = None,
    webhooks_on_message_send_method: str = None,
    webhooks_on_message_send_url: str = None,
    webhooks_on_message_sent_method: str = None,
    webhooks_on_message_sent_url: str = None,
    webhooks_on_message_update_method: str = None,
    webhooks_on_message_update_url: str = None,
    webhooks_on_message_updated_method: str = None,
    webhooks_on_message_updated_url: str = None,
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        consumption_report_interval:

        default_channel_creator_role_sid:

        default_channel_role_sid:

        default_service_role_sid:

        friendly_name:

        limits_channel_members:

        limits_user_channels:

        notifications_added_to_channel_enabled:

        notifications_added_to_channel_template:

        notifications_invited_to_channel_enabled:

        notifications_invited_to_channel_template:

        notifications_new_message_enabled:

        notifications_new_message_template:

        notifications_removed_from_channel_enabled:

        notifications_removed_from_channel_template:

        post_webhook_url:

        pre_webhook_url:

        reachability_enabled:

        read_status_enabled:

        typing_indicator_timeout:

        webhook_filters:

        webhook_method:

        webhooks_on_channel_add_method:

        webhooks_on_channel_add_url:

        webhooks_on_channel_added_method:

        webhooks_on_channel_added_url:

        webhooks_on_channel_destroy_method:

        webhooks_on_channel_destroy_url:

        webhooks_on_channel_destroyed_method:

        webhooks_on_channel_destroyed_url:

        webhooks_on_channel_update_method:

        webhooks_on_channel_update_url:

        webhooks_on_channel_updated_method:

        webhooks_on_channel_updated_url:

        webhooks_on_member_add_method:

        webhooks_on_member_add_url:

        webhooks_on_member_added_method:

        webhooks_on_member_added_url:

        webhooks_on_member_remove_method:

        webhooks_on_member_remove_url:

        webhooks_on_member_removed_method:

        webhooks_on_member_removed_url:

        webhooks_on_message_remove_method:

        webhooks_on_message_remove_url:

        webhooks_on_message_removed_method:

        webhooks_on_message_removed_url:

        webhooks_on_message_send_method:

        webhooks_on_message_send_url:

        webhooks_on_message_sent_method:

        webhooks_on_message_sent_url:

        webhooks_on_message_update_method:

        webhooks_on_message_update_url:

        webhooks_on_message_updated_method:

        webhooks_on_message_updated_url:


    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://ip-messaging.twilio.com/v1/Services/{sid}?](
    https://ip-messaging.twilio.com/v1/Services/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://ip-messaging.twilio.com/v1/Services/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "consumption_report_interval": consumption_report_interval,
        "default_channel_creator_role_sid": default_channel_creator_role_sid,
        "default_channel_role_sid": default_channel_role_sid,
        "default_service_role_sid": default_service_role_sid,
        "friendly_name": friendly_name,
        "limits_channel_members": limits_channel_members,
        "limits_user_channels": limits_user_channels,
        "notifications_added_to_channel_enabled": notifications_added_to_channel_enabled,  # noqa
        "notifications_added_to_channel_template": notifications_added_to_channel_template,  # noqa
        "notifications_invited_to_channel_enabled": notifications_invited_to_channel_enabled,  # noqa
        "notifications_invited_to_channel_template": notifications_invited_to_channel_template,  # noqa
        "notifications_new_message_enabled": notifications_new_message_enabled,
        "notifications_new_message_template": notifications_new_message_template,
        "notifications_removed_from_channel_enabled": notifications_removed_from_channel_enabled,  # noqa
        "notifications_removed_from_channel_template": notifications_removed_from_channel_template,  # noqa
        "post_webhook_url": post_webhook_url,
        "pre_webhook_url": pre_webhook_url,
        "reachability_enabled": reachability_enabled,
        "read_status_enabled": read_status_enabled,
        "typing_indicator_timeout": typing_indicator_timeout,
        "webhook_filters": webhook_filters,
        "webhook_method": webhook_method,
        "webhooks_on_channel_add_method": webhooks_on_channel_add_method,
        "webhooks_on_channel_add_url": webhooks_on_channel_add_url,
        "webhooks_on_channel_added_method": webhooks_on_channel_added_method,
        "webhooks_on_channel_added_url": webhooks_on_channel_added_url,
        "webhooks_on_channel_destroy_method": webhooks_on_channel_destroy_method,
        "webhooks_on_channel_destroy_url": webhooks_on_channel_destroy_url,
        "webhooks_on_channel_destroyed_method": webhooks_on_channel_destroyed_method,  # noqa
        "webhooks_on_channel_destroyed_url": webhooks_on_channel_destroyed_url,
        "webhooks_on_channel_update_method": webhooks_on_channel_update_method,
        "webhooks_on_channel_update_url": webhooks_on_channel_update_url,
        "webhooks_on_channel_updated_method": webhooks_on_channel_updated_method,
        "webhooks_on_channel_updated_url": webhooks_on_channel_updated_url,
        "webhooks_on_member_add_method": webhooks_on_member_add_method,
        "webhooks_on_member_add_url": webhooks_on_member_add_url,
        "webhooks_on_member_added_method": webhooks_on_member_added_method,
        "webhooks_on_member_added_url": webhooks_on_member_added_url,
        "webhooks_on_member_remove_method": webhooks_on_member_remove_method,
        "webhooks_on_member_remove_url": webhooks_on_member_remove_url,
        "webhooks_on_member_removed_method": webhooks_on_member_removed_method,
        "webhooks_on_member_removed_url": webhooks_on_member_removed_url,
        "webhooks_on_message_remove_method": webhooks_on_message_remove_method,
        "webhooks_on_message_remove_url": webhooks_on_message_remove_url,
        "webhooks_on_message_removed_method": webhooks_on_message_removed_method,
        "webhooks_on_message_removed_url": webhooks_on_message_removed_url,
        "webhooks_on_message_send_method": webhooks_on_message_send_method,
        "webhooks_on_message_send_url": webhooks_on_message_send_url,
        "webhooks_on_message_sent_method": webhooks_on_message_sent_method,
        "webhooks_on_message_sent_url": webhooks_on_message_sent_url,
        "webhooks_on_message_update_method": webhooks_on_message_update_method,
        "webhooks_on_message_update_url": webhooks_on_message_update_url,
        "webhooks_on_message_updated_method": webhooks_on_message_updated_method,
        "webhooks_on_message_updated_url": webhooks_on_message_updated_url,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_phone_numbers_phone_number(
    phone_number: str,
    twilio_credentials: "TwilioCredentials",
    country_code: str = None,
    type: list = None,
    add_ons: list = None,
    add_ons_data: dict = None,
) -> Dict[str, Any]:
    """


    Args:
        phone_number:
            Phone number used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        country_code:
            The [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
            of the phone number to fetch. This is used to specify the
            country when the phone number is provided in a national
            format.
        type:
            The type of information to return. Can be: `carrier` or `caller-name`.
            The default is null.  Carrier information costs $0.005 per
            phone number looked up.  Caller Name information is
            currently available only in the US and costs $0.01 per phone
            number looked up.  To retrieve both types on information,
            specify this parameter twice; once with `carrier` and once
            with `caller-name` as the value.
        add_ons:
            The `unique_name` of an Add-on you would like to invoke. Can be the
            `unique_name` of an Add-on that is installed on your
            account. You can specify multiple instances of this
            parameter to invoke multiple Add-ons. For more information
            about  Add-ons, see the [Add-ons
            documentation](https://www.twilio.com/docs/add-ons).
        add_ons_data:
            Data specific to the add-on you would like to invoke. The content and
            format of this value depends on the add-on.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://lookups.twilio.com/v1/PhoneNumbers/{phone_number}?&country_code=%s&type=%s&add_ons=%s&add_ons_data=%s](
    https://lookups.twilio.com/v1/PhoneNumbers/{phone_number}?&country_code=%s&type=%s&add_ons=%s&add_ons_data=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://lookups.twilio.com/v1/PhoneNumbers/{phone_number}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "country_code": country_code,
        "type": type,
        "add_ons": add_ons,
        "add_ons_data": add_ons_data,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_media_processors(
    twilio_credentials: "TwilioCredentials",
    order: str = None,
    status: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Returns a list of MediaProcessors.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        order:
            The sort order of the list by `date_created`. Can be: `asc` (ascending)
            or `desc` (descending) with `desc` as the default.
        status:
            Status to filter by, with possible values `started`, `ended` or
            `failed`.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://media.twilio.com/v1/MediaProcessors?&order=%s&status=%s&page_size=%s](
    https://media.twilio.com/v1/MediaProcessors?&order=%s&status=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://media.twilio.com/v1/MediaProcessors"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "order": order,
        "status": status,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_media_processors(
    twilio_credentials: "TwilioCredentials",
    extension: str = None,
    extension_context: str = None,
    extension_environment: str = None,
    max_duration: int = None,
    status_callback: str = None,
    status_callback_method: str = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        extension:
            The [Media Extension](/docs/live/api/media-extensions-overview) name or
            URL. Ex: `video-composer-v2`.
        extension_context:
            The context of the Media Extension, represented as a JSON dictionary.
            See the documentation for the specific [Media
            Extension](/docs/live/api/media-extensions-overview) you are
            using for more information about the context to send.
        extension_environment:
            User-defined environment variables for the Media Extension, represented
            as a JSON dictionary of key/value strings. See the
            documentation for the specific [Media
            Extension](/docs/live/api/media-extensions-overview) you are
            using for more information about whether you need to provide
            this.
        max_duration:
            The maximum time, in seconds, that the MediaProcessor can run before
            automatically ends. The default value is 300 seconds, and
            the maximum value is 90000 seconds. Once this maximum
            duration is reached, Twilio will end the MediaProcessor,
            regardless of whether media is still streaming.
        status_callback:
            The URL to which Twilio will send asynchronous webhook requests for
            every MediaProcessor event. See [Status
            Callbacks](/docs/live/status-callbacks) for details.
        status_callback_method:
            The HTTP method Twilio should use to call the `status_callback` URL. Can
            be `POST` or `GET` and the default is `POST`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://media.twilio.com/v1/MediaProcessors?](
    https://media.twilio.com/v1/MediaProcessors?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://media.twilio.com/v1/MediaProcessors"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "extension": extension,
        "extension_context": extension_context,
        "extension_environment": extension_environment,
        "max_duration": max_duration,
        "status_callback": status_callback,
        "status_callback_method": status_callback_method,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_media_processors_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Returns a single MediaProcessor resource identified by a SID.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://media.twilio.com/v1/MediaProcessors/{sid}?](
    https://media.twilio.com/v1/MediaProcessors/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://media.twilio.com/v1/MediaProcessors/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_media_processors_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    status: str = None,
) -> Dict[str, Any]:
    """
    Updates a MediaProcessor resource identified by a SID.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        status:
            The status of the MediaProcessor. Can be `ended`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://media.twilio.com/v1/MediaProcessors/{sid}?](
    https://media.twilio.com/v1/MediaProcessors/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://media.twilio.com/v1/MediaProcessors/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "status": status,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_media_recordings(
    twilio_credentials: "TwilioCredentials",
    order: str = None,
    status: str = None,
    processor_sid: str = None,
    source_sid: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Returns a list of MediaRecordings.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        order:
            The sort order of the list by `date_created`. Can be: `asc` (ascending)
            or `desc` (descending) with `desc` as the default.
        status:
            Status to filter by, with possible values `processing`, `completed`,
            `deleted`, or `failed`.
        processor_sid:
            SID of a MediaProcessor to filter by.
        source_sid:
            SID of a MediaRecording source to filter by.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://media.twilio.com/v1/MediaRecordings?&order=%s&status=%s&processor_sid=%s&source_sid=%s&page_size=%s](
    https://media.twilio.com/v1/MediaRecordings?&order=%s&status=%s&processor_sid=%s&source_sid=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://media.twilio.com/v1/MediaRecordings"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "order": order,
        "status": status,
        "processor_sid": processor_sid,
        "source_sid": source_sid,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def delete_v1_media_recordings_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Deletes a MediaRecording resource identified by a SID.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://media.twilio.com/v1/MediaRecordings/{sid}?](
    https://media.twilio.com/v1/MediaRecordings/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://media.twilio.com/v1/MediaRecordings/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_media_recordings_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Returns a single MediaRecording resource identified by a SID.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://media.twilio.com/v1/MediaRecordings/{sid}?](
    https://media.twilio.com/v1/MediaRecordings/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://media.twilio.com/v1/MediaRecordings/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_player_streamers(
    twilio_credentials: "TwilioCredentials",
    order: str = None,
    status: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Returns a list of PlayerStreamers.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        order:
            The sort order of the list by `date_created`. Can be: `asc` (ascending)
            or `desc` (descending) with `desc` as the default.
        status:
            Status to filter by, with possible values `created`, `started`, `ended`,
            or `failed`.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://media.twilio.com/v1/PlayerStreamers?&order=%s&status=%s&page_size=%s](
    https://media.twilio.com/v1/PlayerStreamers?&order=%s&status=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://media.twilio.com/v1/PlayerStreamers"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "order": order,
        "status": status,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_player_streamers(
    twilio_credentials: "TwilioCredentials",
    max_duration: int = None,
    status_callback: str = None,
    status_callback_method: str = None,
    video: bool = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        max_duration:
            The maximum time, in seconds, that the PlayerStreamer can run before
            automatically ends. The default value is 300 seconds, and
            the maximum value is 90000 seconds. Once this maximum
            duration is reached, Twilio will end the PlayerStreamer,
            regardless of whether media is still streaming.
        status_callback:
            The URL to which Twilio will send asynchronous webhook requests for
            every PlayerStreamer event. See [Status
            Callbacks](/docs/live/status-callbacks) for more details.
        status_callback_method:
            The HTTP method Twilio should use to call the `status_callback` URL. Can
            be `POST` or `GET` and the default is `POST`.
        video:
            Specifies whether the PlayerStreamer is configured to stream video.
            Defaults to `true`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://media.twilio.com/v1/PlayerStreamers?](
    https://media.twilio.com/v1/PlayerStreamers?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://media.twilio.com/v1/PlayerStreamers"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "max_duration": max_duration,
        "status_callback": status_callback,
        "status_callback_method": status_callback_method,
        "video": video,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_player_streamers_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Returns a single PlayerStreamer resource identified by a SID.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://media.twilio.com/v1/PlayerStreamers/{sid}?](
    https://media.twilio.com/v1/PlayerStreamers/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://media.twilio.com/v1/PlayerStreamers/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_player_streamers_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    status: str = None,
) -> Dict[str, Any]:
    """
    Updates a PlayerStreamer resource identified by a SID.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        status:
            The status the PlayerStreamer should be transitioned to. Can be:
            `ended`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://media.twilio.com/v1/PlayerStreamers/{sid}?](
    https://media.twilio.com/v1/PlayerStreamers/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://media.twilio.com/v1/PlayerStreamers/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "status": status,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_player_streamers_sid_playback_grant(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    **This method is not enabled.** Returns a single PlaybackGrant resource
    identified by a SID.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://media.twilio.com/v1/PlayerStreamers/{sid}/PlaybackGrant?](
    https://media.twilio.com/v1/PlayerStreamers/{sid}/PlaybackGrant?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://media.twilio.com/v1/PlayerStreamers/{sid}/PlaybackGrant"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_player_streamers_sid_playback_grant(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    access_control_allow_origin: str = None,
    ttl: int = None,
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        access_control_allow_origin:
            The full origin URL where the livestream can be streamed. If this is not
            provided, it can be streamed from any domain.
        ttl:
            The time to live of the PlaybackGrant. Default value is 15 seconds.
            Maximum value is 60 seconds.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://media.twilio.com/v1/PlayerStreamers/{sid}/PlaybackGrant?](
    https://media.twilio.com/v1/PlayerStreamers/{sid}/PlaybackGrant?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://media.twilio.com/v1/PlayerStreamers/{sid}/PlaybackGrant"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "access_control_allow_origin": access_control_allow_origin,
        "ttl": ttl,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_deactivations(
    twilio_credentials: "TwilioCredentials",
    date: str = None,
) -> Dict[str, Any]:
    """
    Fetch a list of all United States numbers that have been deactivated on a
    specific date.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        date:
            The request will return a list of all United States Phone Numbers that
            were deactivated on the day specified by this parameter.
            This date should be specified in YYYY-MM-DD format.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://messaging.twilio.com/v1/Deactivations?&date=%s](
    https://messaging.twilio.com/v1/Deactivations?&date=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 307 | Temporary Redirect. |
    """  # noqa
    url = "https://messaging.twilio.com/v1/Deactivations"  # noqa

    responses = {
        307: "Temporary Redirect.",  # noqa
    }

    params = {
        "date": date,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_services(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://messaging.twilio.com/v1/Services?&page_size=%s](
    https://messaging.twilio.com/v1/Services?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://messaging.twilio.com/v1/Services"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services(
    twilio_credentials: "TwilioCredentials",
    area_code_geomatch: bool = None,
    fallback_method: str = None,
    fallback_to_long_code: bool = None,
    fallback_url: str = None,
    friendly_name: str = None,
    inbound_method: str = None,
    inbound_request_url: str = None,
    mms_converter: bool = None,
    scan_message_content: str = None,
    smart_encoding: bool = None,
    status_callback: str = None,
    sticky_sender: bool = None,
    synchronous_validation: bool = None,
    use_inbound_webhook_on_number: bool = None,
    usecase: str = None,
    validity_period: int = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        area_code_geomatch:
            Whether to enable [Area Code
            Geomatch](https://www.twilio.com/docs/sms/services
            area-code-geomatch) on the Service Instance.
        fallback_method:
            The HTTP method we should use to call `fallback_url`. Can be: `GET` or
            `POST`.
        fallback_to_long_code:
            Whether to enable [Fallback to Long
            Code](https://www.twilio.com/docs/sms/services
            fallback-to-long-code) for messages sent through the Service
            instance.
        fallback_url:
            The URL that we call using `fallback_method` if an error occurs while
            retrieving or executing the TwiML from the Inbound Request
            URL. If the `use_inbound_webhook_on_number` field is enabled
            then the webhook url defined on the phone number will
            override the `fallback_url` defined for the Messaging
            Service.
        friendly_name:
            A descriptive string that you create to describe the resource. It can be
            up to 64 characters long.
        inbound_method:
            The HTTP method we should use to call `inbound_request_url`. Can be
            `GET` or `POST` and the default is `POST`.
        inbound_request_url:
            The URL we call using `inbound_method` when a message is received by any
            phone number or short code in the Service. When this
            property is `null`, receiving inbound messages is disabled.
            All messages sent to the Twilio phone number or short code
            will not be logged and received on the Account. If the
            `use_inbound_webhook_on_number` field is enabled then the
            webhook url defined on the phone number will override the
            `inbound_request_url` defined for the Messaging Service.
        mms_converter:
            Whether to enable the [MMS
            Converter](https://www.twilio.com/docs/sms/services
            mms-converter) for messages sent through the Service
            instance.
        scan_message_content:
            Reserved.
        smart_encoding:
            Whether to enable [Smart
            Encoding](https://www.twilio.com/docs/sms/services
            smart-encoding) for messages sent through the Service
            instance.
        status_callback:
            The URL we should call to [pass status
            updates](https://www.twilio.com/docs/sms/api/message-
            resource
            message-status-values) about message delivery.
        sticky_sender:
            Whether to enable [Sticky
            Sender](https://www.twilio.com/docs/sms/services
            sticky-sender) on the Service instance.
        synchronous_validation:
            Reserved.
        use_inbound_webhook_on_number:
            A boolean value that indicates either the webhook url configured on the
            phone number will be used or
            `inbound_request_url`/`fallback_url` url will be called when
            a message is received from the phone number. If this field
            is enabled then the webhook url defined on the phone number
            will override the `inbound_request_url`/`fallback_url`
            defined for the Messaging Service.
        usecase:
            A string that describes the scenario in which the Messaging Service will
            be used. Examples: [notification, marketing, verification,
            poll ..].
        validity_period:
            How long, in seconds, messages sent from the Service are valid. Can be
            an integer from `1` to `14,400`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://messaging.twilio.com/v1/Services?](
    https://messaging.twilio.com/v1/Services?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://messaging.twilio.com/v1/Services"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "area_code_geomatch": area_code_geomatch,
        "fallback_method": fallback_method,
        "fallback_to_long_code": fallback_to_long_code,
        "fallback_url": fallback_url,
        "friendly_name": friendly_name,
        "inbound_method": inbound_method,
        "inbound_request_url": inbound_request_url,
        "mms_converter": mms_converter,
        "scan_message_content": scan_message_content,
        "smart_encoding": smart_encoding,
        "status_callback": status_callback,
        "sticky_sender": sticky_sender,
        "synchronous_validation": synchronous_validation,
        "use_inbound_webhook_on_number": use_inbound_webhook_on_number,
        "usecase": usecase,
        "validity_period": validity_period,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def post_v1_services_preregistered_usa2p(
    twilio_credentials: "TwilioCredentials",
    campaign_id: str = None,
    messaging_service_sid: str = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        campaign_id:
            ID of the preregistered campaign.
        messaging_service_sid:
            The SID of the [Messaging
            Service](https://www.twilio.com/docs/messaging/services/api)
            that the resource is associated with.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://messaging.twilio.com/v1/Services/PreregisteredUsa2p?](
    https://messaging.twilio.com/v1/Services/PreregisteredUsa2p?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://messaging.twilio.com/v1/Services/PreregisteredUsa2p"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "campaign_id": campaign_id,
        "messaging_service_sid": messaging_service_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_usecases(
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://messaging.twilio.com/v1/Services/Usecases?](
    https://messaging.twilio.com/v1/Services/Usecases?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://messaging.twilio.com/v1/Services/Usecases"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_services_messaging_service_sid_compliance_usa2p(
    messaging_service_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        messaging_service_sid:
            Messaging service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://messaging.twilio.com/v1/Services/{messaging_service_sid}/Compliance/Usa2p?&page_size=%s](
    https://messaging.twilio.com/v1/Services/{messaging_service_sid}/Compliance/Usa2p?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://messaging.twilio.com/v1/Services/{messaging_service_sid}/Compliance/Usa2p"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_messaging_service_sid_compliance_usa2p(
    messaging_service_sid: str,
    twilio_credentials: "TwilioCredentials",
    brand_registration_sid: str = None,
    description: str = None,
    has_embedded_links: bool = None,
    has_embedded_phone: bool = None,
    message_samples: list = None,
    us_app_to_person_usecase: str = None,
) -> Dict[str, Any]:
    """


    Args:
        messaging_service_sid:
            Messaging service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        brand_registration_sid:
            A2P Brand Registration SID.
        description:
            A short description of what this SMS campaign does.
        has_embedded_links:
            Indicates that this SMS campaign will send messages that contain links.
        has_embedded_phone:
            Indicates that this SMS campaign will send messages that contain phone
            numbers.
        message_samples:
            Message samples, at least 2 and up to 5 sample messages, <=1024 chars
            each.
        us_app_to_person_usecase:
            A2P Campaign Use Case. Examples: [ 2FA, EMERGENCY, MARKETING..].

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://messaging.twilio.com/v1/Services/{messaging_service_sid}/Compliance/Usa2p?](
    https://messaging.twilio.com/v1/Services/{messaging_service_sid}/Compliance/Usa2p?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://messaging.twilio.com/v1/Services/{messaging_service_sid}/Compliance/Usa2p"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "brand_registration_sid": brand_registration_sid,
        "description": description,
        "has_embedded_links": has_embedded_links,
        "has_embedded_phone": has_embedded_phone,
        "message_samples": message_samples,
        "us_app_to_person_usecase": us_app_to_person_usecase,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_messaging_service_sid_compliance_usa2p_usecases(
    messaging_service_sid: str,
    twilio_credentials: "TwilioCredentials",
    brand_registration_sid: str = None,
) -> Dict[str, Any]:
    """


    Args:
        messaging_service_sid:
            Messaging service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        brand_registration_sid:
            The unique string to identify the A2P brand.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://messaging.twilio.com/v1/Services/{messaging_service_sid}/Compliance/Usa2p/Usecases?&brand_registration_sid=%s](
    https://messaging.twilio.com/v1/Services/{messaging_service_sid}/Compliance/Usa2p/Usecases?&brand_registration_sid=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://messaging.twilio.com/v1/Services/{messaging_service_sid}/Compliance/Usa2p/Usecases"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "brand_registration_sid": brand_registration_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def delete_v1_services_messaging_service_sid_compliance_usa2p_sid(
    messaging_service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        messaging_service_sid:
            Messaging service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://messaging.twilio.com/v1/Services/{messaging_service_sid}/Compliance/Usa2p/{sid}?](
    https://messaging.twilio.com/v1/Services/{messaging_service_sid}/Compliance/Usa2p/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://messaging.twilio.com/v1/Services/{messaging_service_sid}/Compliance/Usa2p/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_messaging_service_sid_compliance_usa2p_sid(
    messaging_service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        messaging_service_sid:
            Messaging service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://messaging.twilio.com/v1/Services/{messaging_service_sid}/Compliance/Usa2p/{sid}?](
    https://messaging.twilio.com/v1/Services/{messaging_service_sid}/Compliance/Usa2p/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://messaging.twilio.com/v1/Services/{messaging_service_sid}/Compliance/Usa2p/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_alpha_senders(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://messaging.twilio.com/v1/Services/{service_sid}/AlphaSenders?&page_size=%s](
    https://messaging.twilio.com/v1/Services/{service_sid}/AlphaSenders?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://messaging.twilio.com/v1/Services/{service_sid}/AlphaSenders"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_alpha_senders(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    alpha_sender: str = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        alpha_sender:
            The Alphanumeric Sender ID string. Can be up to 11 characters long.
            Valid characters are A-Z, a-z, 0-9, space, and hyphen `-`.
            This value cannot contain only numbers.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://messaging.twilio.com/v1/Services/{service_sid}/AlphaSenders?](
    https://messaging.twilio.com/v1/Services/{service_sid}/AlphaSenders?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://messaging.twilio.com/v1/Services/{service_sid}/AlphaSenders"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "alpha_sender": alpha_sender,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_service_sid_alpha_senders_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://messaging.twilio.com/v1/Services/{service_sid}/AlphaSenders/{sid}?](
    https://messaging.twilio.com/v1/Services/{service_sid}/AlphaSenders/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://messaging.twilio.com/v1/Services/{service_sid}/AlphaSenders/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_alpha_senders_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://messaging.twilio.com/v1/Services/{service_sid}/AlphaSenders/{sid}?](
    https://messaging.twilio.com/v1/Services/{service_sid}/AlphaSenders/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://messaging.twilio.com/v1/Services/{service_sid}/AlphaSenders/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_phone_numbers(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://messaging.twilio.com/v1/Services/{service_sid}/PhoneNumbers?&page_size=%s](
    https://messaging.twilio.com/v1/Services/{service_sid}/PhoneNumbers?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://messaging.twilio.com/v1/Services/{service_sid}/PhoneNumbers"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_phone_numbers(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    phone_number_sid: str = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        phone_number_sid:
            The SID of the Phone Number being added to the Service.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://messaging.twilio.com/v1/Services/{service_sid}/PhoneNumbers?](
    https://messaging.twilio.com/v1/Services/{service_sid}/PhoneNumbers?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://messaging.twilio.com/v1/Services/{service_sid}/PhoneNumbers"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "phone_number_sid": phone_number_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_service_sid_phone_numbers_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://messaging.twilio.com/v1/Services/{service_sid}/PhoneNumbers/{sid}?](
    https://messaging.twilio.com/v1/Services/{service_sid}/PhoneNumbers/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://messaging.twilio.com/v1/Services/{service_sid}/PhoneNumbers/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_phone_numbers_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://messaging.twilio.com/v1/Services/{service_sid}/PhoneNumbers/{sid}?](
    https://messaging.twilio.com/v1/Services/{service_sid}/PhoneNumbers/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://messaging.twilio.com/v1/Services/{service_sid}/PhoneNumbers/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_short_codes(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://messaging.twilio.com/v1/Services/{service_sid}/ShortCodes?&page_size=%s](
    https://messaging.twilio.com/v1/Services/{service_sid}/ShortCodes?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://messaging.twilio.com/v1/Services/{service_sid}/ShortCodes"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_short_codes(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    short_code_sid: str = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        short_code_sid:
            The SID of the ShortCode resource being added to the Service.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://messaging.twilio.com/v1/Services/{service_sid}/ShortCodes?](
    https://messaging.twilio.com/v1/Services/{service_sid}/ShortCodes?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://messaging.twilio.com/v1/Services/{service_sid}/ShortCodes"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "short_code_sid": short_code_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_service_sid_short_codes_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://messaging.twilio.com/v1/Services/{service_sid}/ShortCodes/{sid}?](
    https://messaging.twilio.com/v1/Services/{service_sid}/ShortCodes/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://messaging.twilio.com/v1/Services/{service_sid}/ShortCodes/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_short_codes_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://messaging.twilio.com/v1/Services/{service_sid}/ShortCodes/{sid}?](
    https://messaging.twilio.com/v1/Services/{service_sid}/ShortCodes/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://messaging.twilio.com/v1/Services/{service_sid}/ShortCodes/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def delete_v1_services_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://messaging.twilio.com/v1/Services/{sid}?](
    https://messaging.twilio.com/v1/Services/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://messaging.twilio.com/v1/Services/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://messaging.twilio.com/v1/Services/{sid}?](
    https://messaging.twilio.com/v1/Services/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://messaging.twilio.com/v1/Services/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    area_code_geomatch: bool = None,
    fallback_method: str = None,
    fallback_to_long_code: bool = None,
    fallback_url: str = None,
    friendly_name: str = None,
    inbound_method: str = None,
    inbound_request_url: str = None,
    mms_converter: bool = None,
    scan_message_content: str = None,
    smart_encoding: bool = None,
    status_callback: str = None,
    sticky_sender: bool = None,
    synchronous_validation: bool = None,
    use_inbound_webhook_on_number: bool = None,
    usecase: str = None,
    validity_period: int = None,
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        area_code_geomatch:
            Whether to enable [Area Code
            Geomatch](https://www.twilio.com/docs/sms/services
            area-code-geomatch) on the Service Instance.
        fallback_method:
            The HTTP method we should use to call `fallback_url`. Can be: `GET` or
            `POST`.
        fallback_to_long_code:
            Whether to enable [Fallback to Long
            Code](https://www.twilio.com/docs/sms/services
            fallback-to-long-code) for messages sent through the Service
            instance.
        fallback_url:
            The URL that we call using `fallback_method` if an error occurs while
            retrieving or executing the TwiML from the Inbound Request
            URL. If the `use_inbound_webhook_on_number` field is enabled
            then the webhook url defined on the phone number will
            override the `fallback_url` defined for the Messaging
            Service.
        friendly_name:
            A descriptive string that you create to describe the resource. It can be
            up to 64 characters long.
        inbound_method:
            The HTTP method we should use to call `inbound_request_url`. Can be
            `GET` or `POST` and the default is `POST`.
        inbound_request_url:
            The URL we call using `inbound_method` when a message is received by any
            phone number or short code in the Service. When this
            property is `null`, receiving inbound messages is disabled.
            All messages sent to the Twilio phone number or short code
            will not be logged and received on the Account. If the
            `use_inbound_webhook_on_number` field is enabled then the
            webhook url defined on the phone number will override the
            `inbound_request_url` defined for the Messaging Service.
        mms_converter:
            Whether to enable the [MMS
            Converter](https://www.twilio.com/docs/sms/services
            mms-converter) for messages sent through the Service
            instance.
        scan_message_content:
            Reserved.
        smart_encoding:
            Whether to enable [Smart
            Encoding](https://www.twilio.com/docs/sms/services
            smart-encoding) for messages sent through the Service
            instance.
        status_callback:
            The URL we should call to [pass status
            updates](https://www.twilio.com/docs/sms/api/message-
            resource
            message-status-values) about message delivery.
        sticky_sender:
            Whether to enable [Sticky
            Sender](https://www.twilio.com/docs/sms/services
            sticky-sender) on the Service instance.
        synchronous_validation:
            Reserved.
        use_inbound_webhook_on_number:
            A boolean value that indicates either the webhook url configured on the
            phone number will be used or
            `inbound_request_url`/`fallback_url` url will be called when
            a message is received from the phone number. If this field
            is enabled then the webhook url defined on the phone number
            will override the `inbound_request_url`/`fallback_url`
            defined for the Messaging Service.
        usecase:
            A string that describes the scenario in which the Messaging Service will
            be used. Examples: [notification, marketing, verification,
            poll ..].
        validity_period:
            How long, in seconds, messages sent from the Service are valid. Can be
            an integer from `1` to `14,400`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://messaging.twilio.com/v1/Services/{sid}?](
    https://messaging.twilio.com/v1/Services/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://messaging.twilio.com/v1/Services/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "area_code_geomatch": area_code_geomatch,
        "fallback_method": fallback_method,
        "fallback_to_long_code": fallback_to_long_code,
        "fallback_url": fallback_url,
        "friendly_name": friendly_name,
        "inbound_method": inbound_method,
        "inbound_request_url": inbound_request_url,
        "mms_converter": mms_converter,
        "scan_message_content": scan_message_content,
        "smart_encoding": smart_encoding,
        "status_callback": status_callback,
        "sticky_sender": sticky_sender,
        "synchronous_validation": synchronous_validation,
        "use_inbound_webhook_on_number": use_inbound_webhook_on_number,
        "usecase": usecase,
        "validity_period": validity_period,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_a2p_brand_registrations(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://messaging.twilio.com/v1/a2p/BrandRegistrations?&page_size=%s](
    https://messaging.twilio.com/v1/a2p/BrandRegistrations?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://messaging.twilio.com/v1/a2p/BrandRegistrations"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_a2p_brand_registrations(
    twilio_credentials: "TwilioCredentials",
    a2_p_profile_bundle_sid: str = None,
    brand_type: str = None,
    customer_profile_bundle_sid: str = None,
    mock: bool = None,
    skip_automatic_sec_vet: bool = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        a2_p_profile_bundle_sid:
            A2P Messaging Profile Bundle Sid.
        brand_type:
            Type of brand being created. One of: "STANDARD", "STARTER". STARTER is
            for low volume, starter use cases. STANDARD is for all other
            use cases.
        customer_profile_bundle_sid:
            Customer Profile Bundle Sid.
        mock:
            A boolean that specifies whether brand should be a mock or not. If true,
            brand will be registered as a mock brand. Defaults to false
            if no value is provided.
        skip_automatic_sec_vet:
            A flag to disable automatic secondary vetting for brands which it would
            otherwise be done.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://messaging.twilio.com/v1/a2p/BrandRegistrations?](
    https://messaging.twilio.com/v1/a2p/BrandRegistrations?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://messaging.twilio.com/v1/a2p/BrandRegistrations"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "a2_p_profile_bundle_sid": a2_p_profile_bundle_sid,
        "brand_type": brand_type,
        "customer_profile_bundle_sid": customer_profile_bundle_sid,
        "mock": mock,
        "skip_automatic_sec_vet": skip_automatic_sec_vet,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_a2p_brand_registrations_brand_sid_vettings(
    brand_sid: str,
    twilio_credentials: "TwilioCredentials",
    vetting_provider: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        brand_sid:
            Brand sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        vetting_provider:
            The third-party provider of the vettings to read.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://messaging.twilio.com/v1/a2p/BrandRegistrations/{brand_sid}/Vettings?&vetting_provider=%s&page_size=%s](
    https://messaging.twilio.com/v1/a2p/BrandRegistrations/{brand_sid}/Vettings?&vetting_provider=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://messaging.twilio.com/v1/a2p/BrandRegistrations/{brand_sid}/Vettings"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "vetting_provider": vetting_provider,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_a2p_brand_registrations_brand_sid_vettings(
    brand_sid: str,
    twilio_credentials: "TwilioCredentials",
    vetting_id: str = None,
    vetting_provider: str = None,
) -> Dict[str, Any]:
    """


    Args:
        brand_sid:
            Brand sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        vetting_id:
            The unique ID of the vetting.
        vetting_provider:
            The third-party provider of the vettings to create .

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://messaging.twilio.com/v1/a2p/BrandRegistrations/{brand_sid}/Vettings?](
    https://messaging.twilio.com/v1/a2p/BrandRegistrations/{brand_sid}/Vettings?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://messaging.twilio.com/v1/a2p/BrandRegistrations/{brand_sid}/Vettings"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "vetting_id": vetting_id,
        "vetting_provider": vetting_provider,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_a2p_brand_registrations_brand_sid_vettings_brand_vetting_sid(
    brand_sid: str,
    brand_vetting_sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        brand_sid:
            Brand sid used in formatting the endpoint URL.
        brand_vetting_sid:
            Brand vetting sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://messaging.twilio.com/v1/a2p/BrandRegistrations/{brand_sid}/Vettings/{brand_vetting_sid}?](
    https://messaging.twilio.com/v1/a2p/BrandRegistrations/{brand_sid}/Vettings/{brand_vetting_sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://messaging.twilio.com/v1/a2p/BrandRegistrations/{brand_sid}/Vettings/{brand_vetting_sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_a2p_brand_registrations_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://messaging.twilio.com/v1/a2p/BrandRegistrations/{sid}?](
    https://messaging.twilio.com/v1/a2p/BrandRegistrations/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://messaging.twilio.com/v1/a2p/BrandRegistrations/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_a2p_brand_registrations_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://messaging.twilio.com/v1/a2p/BrandRegistrations/{sid}?](
    https://messaging.twilio.com/v1/a2p/BrandRegistrations/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 202 | Accepted. |
    """  # noqa
    url = f"https://messaging.twilio.com/v1/a2p/BrandRegistrations/{sid}"  # noqa
    responses = {
        202: "Accepted.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
    )
    return result


@task
async def get_v1_alerts(
    twilio_credentials: "TwilioCredentials",
    log_level: str = None,
    start_date: str = None,
    end_date: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        log_level:
            Only show alerts for this log-level.  Can be: `error`, `warning`,
            `notice`, or `debug`.
        start_date:
            Only include alerts that occurred on or after this date and time.
            Specify the date and time in GMT and format as `YYYY-MM-DD`
            or `YYYY-MM-DDThh:mm:ssZ`. Queries for alerts older than 30
            days are not supported.
        end_date:
            Only include alerts that occurred on or before this date and time.
            Specify the date and time in GMT and format as `YYYY-MM-DD`
            or `YYYY-MM-DDThh:mm:ssZ`. Queries for alerts older than 30
            days are not supported.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://monitor.twilio.com/v1/Alerts?&log_level=%s&start_date=%s&end_date=%s&page_size=%s](
    https://monitor.twilio.com/v1/Alerts?&log_level=%s&start_date=%s&end_date=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://monitor.twilio.com/v1/Alerts"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "log_level": log_level,
        "start_date": start_date,
        "end_date": end_date,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_alerts_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://monitor.twilio.com/v1/Alerts/{sid}?](
    https://monitor.twilio.com/v1/Alerts/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://monitor.twilio.com/v1/Alerts/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_events(
    twilio_credentials: "TwilioCredentials",
    actor_sid: str = None,
    event_type: str = None,
    resource_sid: str = None,
    source_ip_address: str = None,
    start_date: str = None,
    end_date: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Returns a list of events in the account, sorted by event-date.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        actor_sid:
            Only include events initiated by this Actor. Useful for auditing actions
            taken by specific users or API credentials.
        event_type:
            Only include events of this [Event
            Type](https://www.twilio.com/docs/usage/monitor-events
            event-types).
        resource_sid:
            Only include events that refer to this resource. Useful for discovering
            the history of a specific resource.
        source_ip_address:
            Only include events that originated from this IP address. Useful for
            tracking suspicious activity originating from the API or the
            Twilio Console.
        start_date:
            Only include events that occurred on or after this date. Specify the
            date in GMT and [ISO
            8601](https://en.wikipedia.org/wiki/ISO_8601) format.
        end_date:
            Only include events that occurred on or before this date. Specify the
            date in GMT and [ISO
            8601](https://en.wikipedia.org/wiki/ISO_8601) format.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://monitor.twilio.com/v1/Events?&actor_sid=%s&event_type=%s&resource_sid=%s&source_ip_address=%s&start_date=%s&end_date=%s&page_size=%s](
    https://monitor.twilio.com/v1/Events?&actor_sid=%s&event_type=%s&resource_sid=%s&source_ip_address=%s&start_date=%s&end_date=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://monitor.twilio.com/v1/Events"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "actor_sid": actor_sid,
        "event_type": event_type,
        "resource_sid": resource_sid,
        "source_ip_address": source_ip_address,
        "start_date": start_date,
        "end_date": end_date,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_events_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://monitor.twilio.com/v1/Events/{sid}?](
    https://monitor.twilio.com/v1/Events/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://monitor.twilio.com/v1/Events/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_credentials(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://notify.twilio.com/v1/Credentials?&page_size=%s](
    https://notify.twilio.com/v1/Credentials?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://notify.twilio.com/v1/Credentials"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_credentials(
    twilio_credentials: "TwilioCredentials",
    api_key: str = None,
    certificate: str = None,
    friendly_name: str = None,
    private_key: str = None,
    sandbox: bool = None,
    secret: str = None,
    type: str = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        api_key:
            [GCM only] The `Server key` of your project from Firebase console under
            Settings / Cloud messaging.
        certificate:
            [APN only] The URL-encoded representation of the certificate. Strip
            everything outside of the headers, e.g. `-----BEGIN
            CERTIFICATE-----
            MIIFnTCCBIWgAwIBAgIIAjy9H849+E8wDQYJKoZIhvcNAQEFBQAwgZYxCzAJBgNV.....A==-----END
            CERTIFICATE-----`.
        friendly_name:
            A descriptive string that you create to describe the resource. It can be
            up to 64 characters long.
        private_key:
            [APN only] The URL-encoded representation of the private key. Strip
            everything outside of the headers, e.g. `-----BEGIN RSA
            PRIVATE KEY-----
            MIIEpQIBAAKCAQEAuyf/lNrH9ck8DmNyo3fGgvCI1l9s+cmBY3WIz+cUDqmxiieR\n.
            -----END RSA PRIVATE KEY-----`.
        sandbox:
            [APN only] Whether to send the credential to sandbox APNs. Can be `true`
            to send to sandbox APNs or `false` to send to production.
        secret:
            [FCM only] The `Server key` of your project from Firebase console under
            Settings / Cloud messaging.
        type:
            The Credential type. Can be: `gcm`, `fcm`, or `apn`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://notify.twilio.com/v1/Credentials?](
    https://notify.twilio.com/v1/Credentials?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://notify.twilio.com/v1/Credentials"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "api_key": api_key,
        "certificate": certificate,
        "friendly_name": friendly_name,
        "private_key": private_key,
        "sandbox": sandbox,
        "secret": secret,
        "type": type,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_credentials_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://notify.twilio.com/v1/Credentials/{sid}?](
    https://notify.twilio.com/v1/Credentials/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://notify.twilio.com/v1/Credentials/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_credentials_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://notify.twilio.com/v1/Credentials/{sid}?](
    https://notify.twilio.com/v1/Credentials/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://notify.twilio.com/v1/Credentials/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_credentials_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    api_key: str = None,
    certificate: str = None,
    friendly_name: str = None,
    private_key: str = None,
    sandbox: bool = None,
    secret: str = None,
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        api_key:
            [GCM only] The `Server key` of your project from Firebase console under
            Settings / Cloud messaging.
        certificate:
            [APN only] The URL-encoded representation of the certificate. Strip
            everything outside of the headers, e.g. `-----BEGIN
            CERTIFICATE-----
            MIIFnTCCBIWgAwIBAgIIAjy9H849+E8wDQYJKoZIhvcNAQEFBQAwgZYxCzAJBgNV.....A==-----END
            CERTIFICATE-----`.
        friendly_name:
            A descriptive string that you create to describe the resource. It can be
            up to 64 characters long.
        private_key:
            [APN only] The URL-encoded representation of the private key. Strip
            everything outside of the headers, e.g. `-----BEGIN RSA
            PRIVATE KEY-----
            MIIEpQIBAAKCAQEAuyf/lNrH9ck8DmNyo3fGgvCI1l9s+cmBY3WIz+cUDqmxiieR\n.
            -----END RSA PRIVATE KEY-----`.
        sandbox:
            [APN only] Whether to send the credential to sandbox APNs. Can be `true`
            to send to sandbox APNs or `false` to send to production.
        secret:
            [FCM only] The `Server key` of your project from Firebase console under
            Settings / Cloud messaging.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://notify.twilio.com/v1/Credentials/{sid}?](
    https://notify.twilio.com/v1/Credentials/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://notify.twilio.com/v1/Credentials/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "api_key": api_key,
        "certificate": certificate,
        "friendly_name": friendly_name,
        "private_key": private_key,
        "sandbox": sandbox,
        "secret": secret,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services(
    twilio_credentials: "TwilioCredentials",
    friendly_name: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        friendly_name:
            The string that identifies the Service resources to read.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://notify.twilio.com/v1/Services?&friendly_name=%s&page_size=%s](
    https://notify.twilio.com/v1/Services?&friendly_name=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://notify.twilio.com/v1/Services"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "friendly_name": friendly_name,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services(
    twilio_credentials: "TwilioCredentials",
    alexa_skill_id: str = None,
    apn_credential_sid: str = None,
    default_alexa_notification_protocol_version: str = None,
    default_apn_notification_protocol_version: str = None,
    default_fcm_notification_protocol_version: str = None,
    default_gcm_notification_protocol_version: str = None,
    delivery_callback_enabled: bool = None,
    delivery_callback_url: str = None,
    facebook_messenger_page_id: str = None,
    fcm_credential_sid: str = None,
    friendly_name: str = None,
    gcm_credential_sid: str = None,
    log_enabled: bool = None,
    messaging_service_sid: str = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        alexa_skill_id:
            Deprecated.
        apn_credential_sid:
            The SID of the
            [Credential](https://www.twilio.com/docs/notify/api/credential-
            resource) to use for APN Bindings.
        default_alexa_notification_protocol_version:
            Deprecated.
        default_apn_notification_protocol_version:
            The protocol version to use for sending APNS notifications. Can be
            overridden on a Binding by Binding basis when creating a
            [Binding](https://www.twilio.com/docs/notify/api/binding-
            resource) resource.
        default_fcm_notification_protocol_version:
            The protocol version to use for sending FCM notifications. Can be
            overridden on a Binding by Binding basis when creating a
            [Binding](https://www.twilio.com/docs/notify/api/binding-
            resource) resource.
        default_gcm_notification_protocol_version:
            The protocol version to use for sending GCM notifications. Can be
            overridden on a Binding by Binding basis when creating a
            [Binding](https://www.twilio.com/docs/notify/api/binding-
            resource) resource.
        delivery_callback_enabled:
            Callback configuration that enables delivery callbacks, default false.
        delivery_callback_url:
            URL to send delivery status callback.
        facebook_messenger_page_id:
            Deprecated.
        fcm_credential_sid:
            The SID of the
            [Credential](https://www.twilio.com/docs/notify/api/credential-
            resource) to use for FCM Bindings.
        friendly_name:
            A descriptive string that you create to describe the resource. It can be
            up to 64 characters long.
        gcm_credential_sid:
            The SID of the
            [Credential](https://www.twilio.com/docs/notify/api/credential-
            resource) to use for GCM Bindings.
        log_enabled:
            Whether to log notifications. Can be: `true` or `false` and the default
            is `true`.
        messaging_service_sid:
            The SID of the [Messaging Service](https://www.twilio.com/docs/sms/send-
            messages
            messaging-services) to use for SMS Bindings. This parameter
            must be set in order to send SMS notifications.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://notify.twilio.com/v1/Services?](
    https://notify.twilio.com/v1/Services?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://notify.twilio.com/v1/Services"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "alexa_skill_id": alexa_skill_id,
        "apn_credential_sid": apn_credential_sid,
        "default_alexa_notification_protocol_version": default_alexa_notification_protocol_version,  # noqa
        "default_apn_notification_protocol_version": default_apn_notification_protocol_version,  # noqa
        "default_fcm_notification_protocol_version": default_fcm_notification_protocol_version,  # noqa
        "default_gcm_notification_protocol_version": default_gcm_notification_protocol_version,  # noqa
        "delivery_callback_enabled": delivery_callback_enabled,
        "delivery_callback_url": delivery_callback_url,
        "facebook_messenger_page_id": facebook_messenger_page_id,
        "fcm_credential_sid": fcm_credential_sid,
        "friendly_name": friendly_name,
        "gcm_credential_sid": gcm_credential_sid,
        "log_enabled": log_enabled,
        "messaging_service_sid": messaging_service_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_service_sid_bindings(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    start_date: str = None,
    end_date: str = None,
    identity: list = None,
    tag: list = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        start_date:
            Only include usage that has occurred on or after this date. Specify the
            date in GMT and format as `YYYY-MM-DD`.
        end_date:
            Only include usage that occurred on or before this date. Specify the
            date in GMT and format as `YYYY-MM-DD`.
        identity:
            The [User](https://www.twilio.com/docs/chat/rest/user-resource)'s
            `identity` value of the resources to read.
        tag:
            Only list Bindings that have all of the specified Tags. The following
            implicit tags are available: `all`, `apn`, `fcm`, `gcm`,
            `sms`, `facebook-messenger`. Up to 5 tags are allowed.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://notify.twilio.com/v1/Services/{service_sid}/Bindings?&start_date=%s&end_date=%s&identity=%s&tag=%s&page_size=%s](
    https://notify.twilio.com/v1/Services/{service_sid}/Bindings?&start_date=%s&end_date=%s&identity=%s&tag=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://notify.twilio.com/v1/Services/{service_sid}/Bindings"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "start_date": start_date,
        "end_date": end_date,
        "identity": identity,
        "tag": tag,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_bindings(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    address: str = None,
    binding_type: str = None,
    credential_sid: str = None,
    endpoint: str = None,
    identity: str = None,
    notification_protocol_version: str = None,
    tag: list = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        address:
            The channel-specific address. For APNS, the device token. For FCM and
            GCM, the registration token. For SMS, a phone number in
            E.164 format. For Facebook Messenger, the Messenger ID of
            the user or a phone number in E.164 format.
        binding_type:
            The transport technology to use for the Binding. Can be: `apn`, `fcm`,
            `gcm`, `sms`, or `facebook-messenger`.
        credential_sid:
            The SID of the
            [Credential](https://www.twilio.com/docs/notify/api/credential-
            resource) resource to be used to send notifications to this
            Binding. If present, this overrides the Credential specified
            in the Service resource. Applies to only `apn`, `fcm`, and
            `gcm` type Bindings.
        endpoint:
            Deprecated.
        identity:
            The `identity` value that uniquely identifies the new resource's
            [User](https://www.twilio.com/docs/chat/rest/user-resource)
            within the
            [Service](https://www.twilio.com/docs/notify/api/service-
            resource). Up to 20 Bindings can be created for the same
            Identity in a given Service.
        notification_protocol_version:
            The protocol version to use to send the notification. This defaults to
            the value of `default_xxxx_notification_protocol_version`
            for the protocol in the
            [Service](https://www.twilio.com/docs/notify/api/service-
            resource). The current version is `"3"` for `apn`, `fcm`,
            and `gcm` type Bindings. The parameter is not applicable to
            `sms` and `facebook-messenger` type Bindings as the data
            format is fixed.
        tag:
            A tag that can be used to select the Bindings to notify. Repeat this
            parameter to specify more than one tag, up to a total of 20
            tags.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://notify.twilio.com/v1/Services/{service_sid}/Bindings?](
    https://notify.twilio.com/v1/Services/{service_sid}/Bindings?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://notify.twilio.com/v1/Services/{service_sid}/Bindings"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "address": address,
        "binding_type": binding_type,
        "credential_sid": credential_sid,
        "endpoint": endpoint,
        "identity": identity,
        "notification_protocol_version": notification_protocol_version,
        "tag": tag,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_service_sid_bindings_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://notify.twilio.com/v1/Services/{service_sid}/Bindings/{sid}?](
    https://notify.twilio.com/v1/Services/{service_sid}/Bindings/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://notify.twilio.com/v1/Services/{service_sid}/Bindings/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_bindings_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://notify.twilio.com/v1/Services/{service_sid}/Bindings/{sid}?](
    https://notify.twilio.com/v1/Services/{service_sid}/Bindings/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://notify.twilio.com/v1/Services/{service_sid}/Bindings/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_notifications(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    action: str = None,
    alexa: str = None,
    apn: str = None,
    body: str = None,
    data: str = None,
    delivery_callback_url: str = None,
    facebook_messenger: str = None,
    fcm: str = None,
    gcm: str = None,
    identity: list = None,
    priority: str = None,
    segment: list = None,
    sms: str = None,
    sound: str = None,
    tag: list = None,
    title: str = None,
    to_binding: list = None,
    ttl: int = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        action:
            The actions to display for the notification. For APNS, translates to the
            `aps.category` value. For GCM, translates to the
            `data.twi_action` value. For SMS, this parameter is not
            supported and is omitted from deliveries to those channels.
        alexa:
            Deprecated.
        apn:
            The APNS-specific payload that overrides corresponding attributes in the
            generic payload for APNS Bindings. This property maps to the
            APNS `Payload` item, therefore the `aps` key must be used to
            change standard attributes. Adds custom key-value pairs to
            the root of the dictionary. See the [APNS
            documentation](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CommunicatingwithAPNs.html)
            for more details. We reserve keys that start with `twi_` for
            future use. Custom keys that start with `twi_` are not
            allowed.
        body:
            The notification text. For FCM and GCM, translates to `data.twi_body`.
            For APNS, translates to `aps.alert.body`. For SMS,
            translates to `body`. SMS requires either this `body` value,
            or `media_urls` attribute defined in the `sms` parameter of
            the notification.
        data:
            The custom key-value pairs of the notification's payload. For FCM and
            GCM, this value translates to `data` in the FCM and GCM
            payloads. FCM and GCM [reserve certain
            keys](https://firebase.google.com/docs/cloud-messaging/http-
            server-ref) that cannot be used in those channels. For APNS,
            attributes of `data` are inserted into the APNS payload as
            custom properties outside of the `aps` dictionary. In all
            channels, we reserve keys that start with `twi_` for future
            use. Custom keys that start with `twi_` are not allowed and
            are rejected as 400 Bad request with no delivery attempted.
            For SMS, this parameter is not supported and is omitted from
            deliveries to those channels.
        delivery_callback_url:
            URL to send webhooks.
        facebook_messenger:
            Deprecated.
        fcm:
            The FCM-specific payload that overrides corresponding attributes in the
            generic payload for FCM Bindings. This property maps to the
            root JSON dictionary. See the [FCM
            documentation](https://firebase.google.com/docs/cloud-
            messaging/http-server-ref
            downstream) for more details. Target parameters `to`,
            `registration_ids`, `condition`, and `notification_key` are
            not allowed in this parameter. We reserve keys that start
            with `twi_` for future use. Custom keys that start with
            `twi_` are not allowed. FCM also [reserves certain
            keys](https://firebase.google.com/docs/cloud-messaging/http-
            server-ref), which cannot be used in that channel.
        gcm:
            The GCM-specific payload that overrides corresponding attributes in the
            generic payload for GCM Bindings.  This property maps to the
            root JSON dictionary. See the [GCM
            documentation](https://firebase.google.com/docs/cloud-
            messaging/http-server-ref) for more details. Target
            parameters `to`, `registration_ids`, and `notification_key`
            are not allowed. We reserve keys that start with `twi_` for
            future use. Custom keys that start with `twi_` are not
            allowed. GCM also [reserves certain
            keys](https://firebase.google.com/docs/cloud-messaging/http-
            server-ref).
        identity:
            The `identity` value that uniquely identifies the new resource's
            [User](https://www.twilio.com/docs/chat/rest/user-resource)
            within the
            [Service](https://www.twilio.com/docs/notify/api/service-
            resource). Delivery will be attempted only to Bindings with
            an Identity in this list. No more than 20 items are allowed
            in this list.
        priority:
            The priority of the notification. Can be: `low` or `high` and the
            default is `high`. A value of `low` optimizes the client
            app's battery consumption; however, notifications may be
            delivered with unspecified delay. For FCM and GCM, `low`
            priority is the same as `Normal` priority. For APNS `low`
            priority is the same as `5`. A value of `high` sends the
            notification immediately, and can wake up a sleeping device.
            For FCM and GCM, `high` is the same as `High` priority. For
            APNS, `high` is a priority `10`. SMS does not support this
            property.
        segment:
            The Segment resource is deprecated. Use the `tag` parameter, instead.
        sms:
            The SMS-specific payload that overrides corresponding attributes in the
            generic payload for SMS Bindings.  Each attribute in this
            value maps to the corresponding `form` parameter of the
            Twilio [Message](https://www.twilio.com/docs/sms/send-
            messages) resource.  These parameters of the Message
            resource are supported in snake case format: `body`,
            `media_urls`, `status_callback`, and `max_price`.  The
            `status_callback` parameter overrides the corresponding
            parameter in the messaging service, if configured. The
            `media_urls` property expects a JSON array.
        sound:
            The name of the sound to be played for the notification. For FCM and
            GCM, this Translates to `data.twi_sound`.  For APNS, this
            translates to `aps.sound`.  SMS does not support this
            property.
        tag:
            A tag that selects the Bindings to notify. Repeat this parameter to
            specify more than one tag, up to a total of 5 tags. The
            implicit tag `all` is available to notify all Bindings in a
            Service instance. Similarly, the implicit tags `apn`, `fcm`,
            `gcm`, `sms` and `facebook-messenger` are available to
            notify all Bindings in a specific channel.
        title:
            The notification title. For FCM and GCM, this translates to the
            `data.twi_title` value. For APNS, this translates to the
            `aps.alert.title` value. SMS does not support this property.
            This field is not visible on iOS phones and tablets but
            appears on Apple Watch and Android devices.
        to_binding:
            The destination address specified as a JSON string.  Multiple
            `to_binding` parameters can be included but the total size
            of the request entity should not exceed 1MB. This is
            typically sufficient for 10,000 phone numbers.
        ttl:
            How long, in seconds, the notification is valid. Can be an integer
            between 0 and 2,419,200, which is 4 weeks, the default and
            the maximum supported time to live (TTL). Delivery should be
            attempted if the device is offline until the TTL elapses.
            Zero means that the notification delivery is attempted
            immediately, only once, and is not stored for future
            delivery. SMS does not support this property.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://notify.twilio.com/v1/Services/{service_sid}/Notifications?](
    https://notify.twilio.com/v1/Services/{service_sid}/Notifications?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://notify.twilio.com/v1/Services/{service_sid}/Notifications"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "action": action,
        "alexa": alexa,
        "apn": apn,
        "body": body,
        "data": data,
        "delivery_callback_url": delivery_callback_url,
        "facebook_messenger": facebook_messenger,
        "fcm": fcm,
        "gcm": gcm,
        "identity": identity,
        "priority": priority,
        "segment": segment,
        "sms": sms,
        "sound": sound,
        "tag": tag,
        "title": title,
        "to_binding": to_binding,
        "ttl": ttl,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://notify.twilio.com/v1/Services/{sid}?](
    https://notify.twilio.com/v1/Services/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://notify.twilio.com/v1/Services/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://notify.twilio.com/v1/Services/{sid}?](
    https://notify.twilio.com/v1/Services/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://notify.twilio.com/v1/Services/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    alexa_skill_id: str = None,
    apn_credential_sid: str = None,
    default_alexa_notification_protocol_version: str = None,
    default_apn_notification_protocol_version: str = None,
    default_fcm_notification_protocol_version: str = None,
    default_gcm_notification_protocol_version: str = None,
    delivery_callback_enabled: bool = None,
    delivery_callback_url: str = None,
    facebook_messenger_page_id: str = None,
    fcm_credential_sid: str = None,
    friendly_name: str = None,
    gcm_credential_sid: str = None,
    log_enabled: bool = None,
    messaging_service_sid: str = None,
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        alexa_skill_id:
            Deprecated.
        apn_credential_sid:
            The SID of the
            [Credential](https://www.twilio.com/docs/notify/api/credential-
            resource) to use for APN Bindings.
        default_alexa_notification_protocol_version:
            Deprecated.
        default_apn_notification_protocol_version:
            The protocol version to use for sending APNS notifications. Can be
            overridden on a Binding by Binding basis when creating a
            [Binding](https://www.twilio.com/docs/notify/api/binding-
            resource) resource.
        default_fcm_notification_protocol_version:
            The protocol version to use for sending FCM notifications. Can be
            overridden on a Binding by Binding basis when creating a
            [Binding](https://www.twilio.com/docs/notify/api/binding-
            resource) resource.
        default_gcm_notification_protocol_version:
            The protocol version to use for sending GCM notifications. Can be
            overridden on a Binding by Binding basis when creating a
            [Binding](https://www.twilio.com/docs/notify/api/binding-
            resource) resource.
        delivery_callback_enabled:
            Callback configuration that enables delivery callbacks, default false.
        delivery_callback_url:
            URL to send delivery status callback.
        facebook_messenger_page_id:
            Deprecated.
        fcm_credential_sid:
            The SID of the
            [Credential](https://www.twilio.com/docs/notify/api/credential-
            resource) to use for FCM Bindings.
        friendly_name:
            A descriptive string that you create to describe the resource. It can be
            up to 64 characters long.
        gcm_credential_sid:
            The SID of the
            [Credential](https://www.twilio.com/docs/notify/api/credential-
            resource) to use for GCM Bindings.
        log_enabled:
            Whether to log notifications. Can be: `true` or `false` and the default
            is `true`.
        messaging_service_sid:
            The SID of the [Messaging Service](https://www.twilio.com/docs/sms/send-
            messages
            messaging-services) to use for SMS Bindings. This parameter
            must be set in order to send SMS notifications.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://notify.twilio.com/v1/Services/{sid}?](
    https://notify.twilio.com/v1/Services/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://notify.twilio.com/v1/Services/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "alexa_skill_id": alexa_skill_id,
        "apn_credential_sid": apn_credential_sid,
        "default_alexa_notification_protocol_version": default_alexa_notification_protocol_version,  # noqa
        "default_apn_notification_protocol_version": default_apn_notification_protocol_version,  # noqa
        "default_fcm_notification_protocol_version": default_fcm_notification_protocol_version,  # noqa
        "default_gcm_notification_protocol_version": default_gcm_notification_protocol_version,  # noqa
        "delivery_callback_enabled": delivery_callback_enabled,
        "delivery_callback_url": delivery_callback_url,
        "facebook_messenger_page_id": facebook_messenger_page_id,
        "fcm_credential_sid": fcm_credential_sid,
        "friendly_name": friendly_name,
        "gcm_credential_sid": gcm_credential_sid,
        "log_enabled": log_enabled,
        "messaging_service_sid": messaging_service_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_messaging_countries(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://pricing.twilio.com/v1/Messaging/Countries?&page_size=%s](
    https://pricing.twilio.com/v1/Messaging/Countries?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://pricing.twilio.com/v1/Messaging/Countries"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_messaging_countries_iso_country(
    iso_country: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        iso_country:
            Iso country used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://pricing.twilio.com/v1/Messaging/Countries/{iso_country}?](
    https://pricing.twilio.com/v1/Messaging/Countries/{iso_country}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://pricing.twilio.com/v1/Messaging/Countries/{iso_country}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_phone_numbers_countries(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://pricing.twilio.com/v1/PhoneNumbers/Countries?&page_size=%s](
    https://pricing.twilio.com/v1/PhoneNumbers/Countries?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://pricing.twilio.com/v1/PhoneNumbers/Countries"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_phone_numbers_countries_iso_country(
    iso_country: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        iso_country:
            Iso country used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://pricing.twilio.com/v1/PhoneNumbers/Countries/{iso_country}?](
    https://pricing.twilio.com/v1/PhoneNumbers/Countries/{iso_country}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://pricing.twilio.com/v1/PhoneNumbers/Countries/{iso_country}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_voice_countries(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://pricing.twilio.com/v1/Voice/Countries?&page_size=%s](
    https://pricing.twilio.com/v1/Voice/Countries?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://pricing.twilio.com/v1/Voice/Countries"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_voice_countries_iso_country(
    iso_country: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        iso_country:
            Iso country used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://pricing.twilio.com/v1/Voice/Countries/{iso_country}?](
    https://pricing.twilio.com/v1/Voice/Countries/{iso_country}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://pricing.twilio.com/v1/Voice/Countries/{iso_country}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_voice_numbers_number(
    number: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        number:
            Number used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://pricing.twilio.com/v1/Voice/Numbers/{number}?](
    https://pricing.twilio.com/v1/Voice/Numbers/{number}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://pricing.twilio.com/v1/Voice/Numbers/{number}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_services(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Services for Twilio Proxy. A maximum of 100 records will
    be returned per page.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://proxy.twilio.com/v1/Services?&page_size=%s](
    https://proxy.twilio.com/v1/Services?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://proxy.twilio.com/v1/Services"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services(
    twilio_credentials: "TwilioCredentials",
    callback_url: str = None,
    chat_instance_sid: str = None,
    default_ttl: int = None,
    geo_match_level: str = None,
    intercept_callback_url: str = None,
    number_selection_behavior: str = None,
    out_of_session_callback_url: str = None,
    unique_name: str = None,
) -> Dict[str, Any]:
    """
    Create a new Service for Twilio Proxy.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        callback_url:
            The URL we should call when the interaction status changes.
        chat_instance_sid:
            The SID of the Chat Service Instance managed by Proxy Service. The Chat
            Service enables Proxy to forward SMS and channel messages to
            this chat instance. This is a one-to-one relationship.
        default_ttl:
            The default `ttl` value to set for Sessions created in the Service. The
            TTL (time to live) is measured in seconds after the
            Session's last create or last Interaction. The default value
            of `0` indicates an unlimited Session length. You can
            override a Session's default TTL value by setting its `ttl`
            value.
        geo_match_level:
            Where a proxy number must be located relative to the participant
            identifier. Can be: `country`, `area-code`, or `extended-
            area-code`. The default value is `country` and more specific
            areas than `country` are only available in North America.
        intercept_callback_url:
            The URL we call on each interaction. If we receive a 403 status, we
            block the interaction; otherwise the interaction continues.
        number_selection_behavior:
            The preference for Proxy Number selection in the Service instance. Can
            be: `prefer-sticky` or `avoid-sticky` and the default is
            `prefer-sticky`. `prefer-sticky` means that we will try and
            select the same Proxy Number for a given participant if they
            have previous
            [Sessions](https://www.twilio.com/docs/proxy/api/session),
            but we will not fail if that Proxy Number cannot be used.
            `avoid-sticky` means that we will try to use different Proxy
            Numbers as long as that is possible within a given pool
            rather than try and use a previously assigned number.
        out_of_session_callback_url:
            The URL we should call when an inbound call or SMS action occurs on a
            closed or non-existent Session. If your server (or a Twilio
            [function](https://www.twilio.com/functions)) responds with
            valid [TwiML](https://www.twilio.com/docs/voice/twiml), we
            will process it. This means it is possible, for example, to
            play a message for a call, send an automated text message
            response, or redirect a call to another Phone Number. See
            [Out-of-Session Callback Response
            Guide](https://www.twilio.com/docs/proxy/out-session-
            callback-response-guide) for more information.
        unique_name:
            An application-defined string that uniquely identifies the resource.
            This value must be 191 characters or fewer in length and be
            unique. **This value should not have PII.**.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://proxy.twilio.com/v1/Services?](
    https://proxy.twilio.com/v1/Services?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://proxy.twilio.com/v1/Services"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "callback_url": callback_url,
        "chat_instance_sid": chat_instance_sid,
        "default_ttl": default_ttl,
        "geo_match_level": geo_match_level,
        "intercept_callback_url": intercept_callback_url,
        "number_selection_behavior": number_selection_behavior,
        "out_of_session_callback_url": out_of_session_callback_url,
        "unique_name": unique_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_service_sid_phone_numbers(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Phone Numbers in the Proxy Number Pool for a Service. A
    maximum of 100 records will be returned per page.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://proxy.twilio.com/v1/Services/{service_sid}/PhoneNumbers?&page_size=%s](
    https://proxy.twilio.com/v1/Services/{service_sid}/PhoneNumbers?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://proxy.twilio.com/v1/Services/{service_sid}/PhoneNumbers"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_phone_numbers(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    is_reserved: bool = None,
    phone_number: str = None,
    sid: str = None,
) -> Dict[str, Any]:
    """
    Add a Phone Number to a Service's Proxy Number Pool.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        is_reserved:
            Whether the new phone number should be reserved and not be assigned to a
            participant using proxy pool logic. See [Reserved Phone
            Numbers](https://www.twilio.com/docs/proxy/reserved-phone-
            numbers) for more information.
        phone_number:
            The phone number in
            [E.164](https://www.twilio.com/docs/glossary/what-e164)
            format.  E.164 phone numbers consist of a + followed by the
            country code and subscriber number without punctuation
            characters. For example, +14155551234.
        sid:
            The SID of a Twilio
            [IncomingPhoneNumber](https://www.twilio.com/docs/phone-
            numbers/api/incomingphonenumber-resource) resource that
            represents the Twilio Number you would like to assign to
            your Proxy Service.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://proxy.twilio.com/v1/Services/{service_sid}/PhoneNumbers?](
    https://proxy.twilio.com/v1/Services/{service_sid}/PhoneNumbers?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://proxy.twilio.com/v1/Services/{service_sid}/PhoneNumbers"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "is_reserved": is_reserved,
        "phone_number": phone_number,
        "sid": sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_service_sid_phone_numbers_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete a specific Phone Number from a Service.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://proxy.twilio.com/v1/Services/{service_sid}/PhoneNumbers/{sid}?](
    https://proxy.twilio.com/v1/Services/{service_sid}/PhoneNumbers/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = (
        f"https://proxy.twilio.com/v1/Services/{service_sid}/PhoneNumbers/{sid}"  # noqa
    )
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_phone_numbers_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a specific Phone Number.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://proxy.twilio.com/v1/Services/{service_sid}/PhoneNumbers/{sid}?](
    https://proxy.twilio.com/v1/Services/{service_sid}/PhoneNumbers/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = (
        f"https://proxy.twilio.com/v1/Services/{service_sid}/PhoneNumbers/{sid}"  # noqa
    )
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_phone_numbers_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    is_reserved: bool = None,
) -> Dict[str, Any]:
    """
    Update a specific Proxy Number.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        is_reserved:
            Whether the phone number should be reserved and not be assigned to a
            participant using proxy pool logic. See [Reserved Phone
            Numbers](https://www.twilio.com/docs/proxy/reserved-phone-
            numbers) for more information.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://proxy.twilio.com/v1/Services/{service_sid}/PhoneNumbers/{sid}?](
    https://proxy.twilio.com/v1/Services/{service_sid}/PhoneNumbers/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = (
        f"https://proxy.twilio.com/v1/Services/{service_sid}/PhoneNumbers/{sid}"  # noqa
    )
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "is_reserved": is_reserved,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_service_sid_sessions(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Sessions for the Service. A maximum of 100 records will
    be returned per page.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://proxy.twilio.com/v1/Services/{service_sid}/Sessions?&page_size=%s](
    https://proxy.twilio.com/v1/Services/{service_sid}/Sessions?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://proxy.twilio.com/v1/Services/{service_sid}/Sessions"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_sessions(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    date_expiry: str = None,
    fail_on_participant_conflict: bool = None,
    mode: str = None,
    participants: list = None,
    status: str = None,
    ttl: int = None,
    unique_name: str = None,
) -> Dict[str, Any]:
    """
    Create a new Session.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        date_expiry:
            The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date when the
            Session should expire. If this is value is present, it
            overrides the `ttl` value.
        fail_on_participant_conflict:
            [Experimental] For accounts with the ProxyAllowParticipantConflict
            account flag, setting to true enables per-request opt-in to
            allowing Proxy to reject a Session create (with
            Participants) request that could cause the same
            Identifier/ProxyIdentifier pair to be active in multiple
            Sessions. Depending on the context, this could be a 409
            error (Twilio error code 80623) or a 400 error (Twilio error
            code 80604). If not provided, requests will be allowed to
            succeed and a Debugger notification (80802) will be emitted.
            Having multiple, active Participants with the same
            Identifier/ProxyIdentifier pair causes calls and messages
            from affected Participants to be routed incorrectly. Please
            note, the default behavior for accounts without the
            ProxyAllowParticipantConflict flag is to reject the request
            as described.  This will eventually be the default for all
            accounts.
        mode:
            The Mode of the Session. Can be: `message-only`, `voice-only`, or
            `voice-and-message` and the default value is `voice-and-
            message`.
        participants:
            The Participant objects to include in the new session.
        status:
            The initial status of the Session. Can be: `open`, `in-progress`,
            `closed`, `failed`, or `unknown`. The default is `open` on
            create.
        ttl:
            The time, in seconds, when the session will expire. The time is measured
            from the last Session create or the Session's last
            Interaction.
        unique_name:
            An application-defined string that uniquely identifies the resource.
            This value must be 191 characters or fewer in length and be
            unique. **This value should not have PII.**.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://proxy.twilio.com/v1/Services/{service_sid}/Sessions?](
    https://proxy.twilio.com/v1/Services/{service_sid}/Sessions?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://proxy.twilio.com/v1/Services/{service_sid}/Sessions"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "date_expiry": date_expiry,
        "fail_on_participant_conflict": fail_on_participant_conflict,
        "mode": mode,
        "participants": participants,
        "status": status,
        "ttl": ttl,
        "unique_name": unique_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_service_sid_sessions_session_sid_interactions(
    service_sid: str,
    session_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Interactions for a Session. A maximum of 100 records will
    be returned per page.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        session_sid:
            Session sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{session_sid}/Interactions?&page_size=%s](
    https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{session_sid}/Interactions?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{session_sid}/Interactions"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def delete_v1_services_service_sid_sessions_session_sid_interactions_sid(
    service_sid: str,
    session_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete a specific Interaction.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        session_sid:
            Session sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{session_sid}/Interactions/{sid}?](
    https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{session_sid}/Interactions/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{session_sid}/Interactions/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_sessions_session_sid_interactions_sid(
    service_sid: str,
    session_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Retrieve a list of Interactions for a given
    [Session](https://www.twilio.com/docs/proxy/api/session).

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        session_sid:
            Session sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{session_sid}/Interactions/{sid}?](
    https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{session_sid}/Interactions/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{session_sid}/Interactions/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_sessions_session_sid_participants(
    service_sid: str,
    session_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Participants in a Session.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        session_sid:
            Session sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{session_sid}/Participants?&page_size=%s](
    https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{session_sid}/Participants?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{session_sid}/Participants"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_sessions_session_sid_participants(
    service_sid: str,
    session_sid: str,
    twilio_credentials: "TwilioCredentials",
    fail_on_participant_conflict: bool = None,
    friendly_name: str = None,
    identifier: str = None,
    proxy_identifier: str = None,
    proxy_identifier_sid: str = None,
) -> Dict[str, Any]:
    """
    Add a new Participant to the Session.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        session_sid:
            Session sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        fail_on_participant_conflict:
            [Experimental] For accounts with the ProxyAllowParticipantConflict
            account flag, setting to true enables per-request opt-in to
            allowing Proxy to reject a Participant create request that
            could cause the same Identifier/ProxyIdentifier pair to be
            active in multiple Sessions. Depending on the context, this
            could be a 409 error (Twilio error code 80623) or a 400
            error (Twilio error code 80604). If not provided, requests
            will be allowed to succeed and a Debugger notification
            (80802) will be emitted. Having multiple, active
            Participants with the same Identifier/ProxyIdentifier pair
            causes calls and messages from affected Participants to be
            routed incorrectly. Please note, the default behavior for
            accounts without the ProxyAllowParticipantConflict flag is
            to reject the request as described.  This will eventually be
            the default for all accounts.
        friendly_name:
            The string that you assigned to describe the participant. This value
            must be 255 characters or fewer. **This value should not
            have PII.**.
        identifier:
            The phone number of the Participant.
        proxy_identifier:
            The proxy phone number to use for the Participant. If not specified,
            Proxy will select a number from the pool.
        proxy_identifier_sid:
            The SID of the Proxy Identifier to assign to the Participant.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{session_sid}/Participants?](
    https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{session_sid}/Participants?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{session_sid}/Participants"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "fail_on_participant_conflict": fail_on_participant_conflict,
        "friendly_name": friendly_name,
        "identifier": identifier,
        "proxy_identifier": proxy_identifier,
        "proxy_identifier_sid": proxy_identifier_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_service_sid_sessions_session_sid_participants_participant_sid_message_interactions(
    service_sid: str,
    session_sid: str,
    participant_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        session_sid:
            Session sid used in formatting the endpoint URL.
        participant_sid:
            Participant sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{session_sid}/Participants/{participant_sid}/MessageInteractions?&page_size=%s](
    https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{session_sid}/Participants/{participant_sid}/MessageInteractions?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{session_sid}/Participants/{participant_sid}/MessageInteractions"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_sessions_session_sid_participants_participant_sid_message_interactions(
    service_sid: str,
    session_sid: str,
    participant_sid: str,
    twilio_credentials: "TwilioCredentials",
    body: str = None,
    media_url: list = None,
) -> Dict[str, Any]:
    """
    Create a new message Interaction to send directly from your system to one
    [Participant](https://www.twilio.com/docs/proxy/api/participant).  The
    `inbound` properties for the Interaction will always be empty.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        session_sid:
            Session sid used in formatting the endpoint URL.
        participant_sid:
            Participant sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        body:
            The message to send to the participant.
        media_url:
            Reserved. Not currently supported.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{session_sid}/Participants/{participant_sid}/MessageInteractions?](
    https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{session_sid}/Participants/{participant_sid}/MessageInteractions?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{session_sid}/Participants/{participant_sid}/MessageInteractions"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "body": body,
        "media_url": media_url,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_service_sid_sessions_session_sid_participants_participant_sid_message_interactions_sid(
    service_sid: str,
    session_sid: str,
    participant_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        session_sid:
            Session sid used in formatting the endpoint URL.
        participant_sid:
            Participant sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{session_sid}/Participants/{participant_sid}/MessageInteractions/{sid}?](
    https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{session_sid}/Participants/{participant_sid}/MessageInteractions/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{session_sid}/Participants/{participant_sid}/MessageInteractions/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def delete_v1_services_service_sid_sessions_session_sid_participants_sid(
    service_sid: str,
    session_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete a specific Participant. This is a soft-delete. The participant remains
    associated with the session and cannot be re-added. Participants are only
    permanently deleted when the
    [Session](https://www.twilio.com/docs/proxy/api/session) is deleted.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        session_sid:
            Session sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{session_sid}/Participants/{sid}?](
    https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{session_sid}/Participants/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{session_sid}/Participants/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_sessions_session_sid_participants_sid(
    service_sid: str,
    session_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a specific Participant.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        session_sid:
            Session sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{session_sid}/Participants/{sid}?](
    https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{session_sid}/Participants/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{session_sid}/Participants/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def delete_v1_services_service_sid_sessions_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete a specific Session.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{sid}?](
    https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_sessions_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a specific Session.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{sid}?](
    https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_sessions_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    date_expiry: str = None,
    fail_on_participant_conflict: bool = None,
    status: str = None,
    ttl: int = None,
) -> Dict[str, Any]:
    """
    Update a specific Session.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        date_expiry:
            The [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) date when the
            Session should expire. If this is value is present, it
            overrides the `ttl` value.
        fail_on_participant_conflict:
            [Experimental] For accounts with the ProxyAllowParticipantConflict
            account flag, setting to true enables per-request opt-in to
            allowing Proxy to return a 400 error (Twilio error code
            80604) when a request to set a Session to in-progress would
            cause Participants with the same Identifier/ProxyIdentifier
            pair to be active in multiple Sessions. If not provided,
            requests will be allowed to succeed, and a Debugger
            notification (80801) will be emitted. Having multiple,
            active Participants with the same Identifier/ProxyIdentifier
            pair causes calls and messages from affected Participants to
            be routed incorrectly. Please note, the default behavior for
            accounts without the ProxyAllowParticipantConflict flag is
            to reject the request as described.  This will eventually be
            the default for all accounts.
        status:
            The new status of the resource. Can be: `in-progress` to re-open a
            session or `closed` to close a session.
        ttl:
            The time, in seconds, when the session will expire. The time is measured
            from the last Session create or the Session's last
            Interaction.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{sid}?](
    https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://proxy.twilio.com/v1/Services/{service_sid}/Sessions/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "date_expiry": date_expiry,
        "fail_on_participant_conflict": fail_on_participant_conflict,
        "status": status,
        "ttl": ttl,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_service_sid_short_codes(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Short Codes in the Proxy Number Pool for the Service. A
    maximum of 100 records will be returned per page.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://proxy.twilio.com/v1/Services/{service_sid}/ShortCodes?&page_size=%s](
    https://proxy.twilio.com/v1/Services/{service_sid}/ShortCodes?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://proxy.twilio.com/v1/Services/{service_sid}/ShortCodes"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_short_codes(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    sid: str = None,
) -> Dict[str, Any]:
    """
    Add a Short Code to the Proxy Number Pool for the Service.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        sid:
            The SID of a Twilio
            [ShortCode](https://www.twilio.com/docs/sms/api/short-code)
            resource that represents the short code you would like to
            assign to your Proxy Service.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://proxy.twilio.com/v1/Services/{service_sid}/ShortCodes?](
    https://proxy.twilio.com/v1/Services/{service_sid}/ShortCodes?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://proxy.twilio.com/v1/Services/{service_sid}/ShortCodes"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "sid": sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_service_sid_short_codes_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete a specific Short Code from a Service.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://proxy.twilio.com/v1/Services/{service_sid}/ShortCodes/{sid}?](
    https://proxy.twilio.com/v1/Services/{service_sid}/ShortCodes/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://proxy.twilio.com/v1/Services/{service_sid}/ShortCodes/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_short_codes_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a specific Short Code.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://proxy.twilio.com/v1/Services/{service_sid}/ShortCodes/{sid}?](
    https://proxy.twilio.com/v1/Services/{service_sid}/ShortCodes/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://proxy.twilio.com/v1/Services/{service_sid}/ShortCodes/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_short_codes_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    is_reserved: bool = None,
) -> Dict[str, Any]:
    """
    Update a specific Short Code.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        is_reserved:
            Whether the short code should be reserved and not be assigned to a
            participant using proxy pool logic. See [Reserved Phone
            Numbers](https://www.twilio.com/docs/proxy/reserved-phone-
            numbers) for more information.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://proxy.twilio.com/v1/Services/{service_sid}/ShortCodes/{sid}?](
    https://proxy.twilio.com/v1/Services/{service_sid}/ShortCodes/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://proxy.twilio.com/v1/Services/{service_sid}/ShortCodes/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "is_reserved": is_reserved,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete a specific Service.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://proxy.twilio.com/v1/Services/{sid}?](
    https://proxy.twilio.com/v1/Services/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://proxy.twilio.com/v1/Services/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a specific Service.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://proxy.twilio.com/v1/Services/{sid}?](
    https://proxy.twilio.com/v1/Services/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://proxy.twilio.com/v1/Services/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    callback_url: str = None,
    chat_instance_sid: str = None,
    default_ttl: int = None,
    geo_match_level: str = None,
    intercept_callback_url: str = None,
    number_selection_behavior: str = None,
    out_of_session_callback_url: str = None,
    unique_name: str = None,
) -> Dict[str, Any]:
    """
    Update a specific Service.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        callback_url:
            The URL we should call when the interaction status changes.
        chat_instance_sid:
            The SID of the Chat Service Instance managed by Proxy Service. The Chat
            Service enables Proxy to forward SMS and channel messages to
            this chat instance. This is a one-to-one relationship.
        default_ttl:
            The default `ttl` value to set for Sessions created in the Service. The
            TTL (time to live) is measured in seconds after the
            Session's last create or last Interaction. The default value
            of `0` indicates an unlimited Session length. You can
            override a Session's default TTL value by setting its `ttl`
            value.
        geo_match_level:
            Where a proxy number must be located relative to the participant
            identifier. Can be: `country`, `area-code`, or `extended-
            area-code`. The default value is `country` and more specific
            areas than `country` are only available in North America.
        intercept_callback_url:
            The URL we call on each interaction. If we receive a 403 status, we
            block the interaction; otherwise the interaction continues.
        number_selection_behavior:
            The preference for Proxy Number selection in the Service instance. Can
            be: `prefer-sticky` or `avoid-sticky` and the default is
            `prefer-sticky`. `prefer-sticky` means that we will try and
            select the same Proxy Number for a given participant if they
            have previous
            [Sessions](https://www.twilio.com/docs/proxy/api/session),
            but we will not fail if that Proxy Number cannot be used.
            `avoid-sticky` means that we will try to use different Proxy
            Numbers as long as that is possible within a given pool
            rather than try and use a previously assigned number.
        out_of_session_callback_url:
            The URL we should call when an inbound call or SMS action occurs on a
            closed or non-existent Session. If your server (or a Twilio
            [function](https://www.twilio.com/functions)) responds with
            valid [TwiML](https://www.twilio.com/docs/voice/twiml), we
            will process it. This means it is possible, for example, to
            play a message for a call, send an automated text message
            response, or redirect a call to another Phone Number. See
            [Out-of-Session Callback Response
            Guide](https://www.twilio.com/docs/proxy/out-session-
            callback-response-guide) for more information.
        unique_name:
            An application-defined string that uniquely identifies the resource.
            This value must be 191 characters or fewer in length and be
            unique. **This value should not have PII.**.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://proxy.twilio.com/v1/Services/{sid}?](
    https://proxy.twilio.com/v1/Services/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://proxy.twilio.com/v1/Services/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "callback_url": callback_url,
        "chat_instance_sid": chat_instance_sid,
        "default_ttl": default_ttl,
        "geo_match_level": geo_match_level,
        "intercept_callback_url": intercept_callback_url,
        "number_selection_behavior": number_selection_behavior,
        "out_of_session_callback_url": out_of_session_callback_url,
        "unique_name": unique_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Services.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services?&page_size=%s](
    https://serverless.twilio.com/v1/Services?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://serverless.twilio.com/v1/Services"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services(
    twilio_credentials: "TwilioCredentials",
    friendly_name: str = None,
    include_credentials: bool = None,
    ui_editable: bool = None,
    unique_name: str = None,
) -> Dict[str, Any]:
    """
    Create a new Service resource.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        friendly_name:
            A descriptive string that you create to describe the Service resource.
            It can be a maximum of 255 characters.
        include_credentials:
            Whether to inject Account credentials into a function invocation
            context. The default value is `true`.
        ui_editable:
            Whether the Service's properties and subresources can be edited via the
            UI. The default value is `false`.
        unique_name:
            A user-defined string that uniquely identifies the Service resource. It
            can be used as an alternative to the `sid` in the URL path
            to address the Service resource. This value must be 50
            characters or less in length and be unique.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services?](
    https://serverless.twilio.com/v1/Services?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://serverless.twilio.com/v1/Services"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "friendly_name": friendly_name,
        "include_credentials": include_credentials,
        "ui_editable": ui_editable,
        "unique_name": unique_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_service_sid_assets(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Assets.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{service_sid}/Assets?&page_size=%s](
    https://serverless.twilio.com/v1/Services/{service_sid}/Assets?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://serverless.twilio.com/v1/Services/{service_sid}/Assets"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_assets(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    friendly_name: str = None,
) -> Dict[str, Any]:
    """
    Create a new Asset resource.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        friendly_name:
            A descriptive string that you create to describe the Asset resource. It
            can be a maximum of 255 characters.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{service_sid}/Assets?](
    https://serverless.twilio.com/v1/Services/{service_sid}/Assets?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://serverless.twilio.com/v1/Services/{service_sid}/Assets"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "friendly_name": friendly_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_service_sid_assets_asset_sid_versions(
    service_sid: str,
    asset_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Asset Versions.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        asset_sid:
            Asset sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{service_sid}/Assets/{asset_sid}/Versions?&page_size=%s](
    https://serverless.twilio.com/v1/Services/{service_sid}/Assets/{asset_sid}/Versions?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://serverless.twilio.com/v1/Services/{service_sid}/Assets/{asset_sid}/Versions"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_assets_asset_sid_versions_sid(
    service_sid: str,
    asset_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Retrieve a specific Asset Version.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        asset_sid:
            Asset sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{service_sid}/Assets/{asset_sid}/Versions/{sid}?](
    https://serverless.twilio.com/v1/Services/{service_sid}/Assets/{asset_sid}/Versions/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://serverless.twilio.com/v1/Services/{service_sid}/Assets/{asset_sid}/Versions/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def delete_v1_services_service_sid_assets_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete an Asset resource.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{service_sid}/Assets/{sid}?](
    https://serverless.twilio.com/v1/Services/{service_sid}/Assets/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = (
        f"https://serverless.twilio.com/v1/Services/{service_sid}/Assets/{sid}"  # noqa
    )
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_assets_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Retrieve a specific Asset resource.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{service_sid}/Assets/{sid}?](
    https://serverless.twilio.com/v1/Services/{service_sid}/Assets/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = (
        f"https://serverless.twilio.com/v1/Services/{service_sid}/Assets/{sid}"  # noqa
    )
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_assets_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    friendly_name: str = None,
) -> Dict[str, Any]:
    """
    Update a specific Asset resource.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        friendly_name:
            A descriptive string that you create to describe the Asset resource. It
            can be a maximum of 255 characters.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{service_sid}/Assets/{sid}?](
    https://serverless.twilio.com/v1/Services/{service_sid}/Assets/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = (
        f"https://serverless.twilio.com/v1/Services/{service_sid}/Assets/{sid}"  # noqa
    )
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "friendly_name": friendly_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_service_sid_builds(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Builds.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{service_sid}/Builds?&page_size=%s](
    https://serverless.twilio.com/v1/Services/{service_sid}/Builds?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://serverless.twilio.com/v1/Services/{service_sid}/Builds"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_builds(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    asset_versions: list = None,
    dependencies: str = None,
    function_versions: list = None,
    runtime: str = None,
) -> Dict[str, Any]:
    """
    Create a new Build resource. At least one function version or asset version is
    required.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        asset_versions:
            The list of Asset Version resource SIDs to include in the Build.
        dependencies:
            A list of objects that describe the Dependencies included in the Build.
            Each object contains the `name` and `version` of the
            dependency.
        function_versions:
            The list of the Function Version resource SIDs to include in the Build.
        runtime:
            The Runtime version that will be used to run the Build resource when it
            is deployed.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{service_sid}/Builds?](
    https://serverless.twilio.com/v1/Services/{service_sid}/Builds?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://serverless.twilio.com/v1/Services/{service_sid}/Builds"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "asset_versions": asset_versions,
        "dependencies": dependencies,
        "function_versions": function_versions,
        "runtime": runtime,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_service_sid_builds_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete a Build resource.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{service_sid}/Builds/{sid}?](
    https://serverless.twilio.com/v1/Services/{service_sid}/Builds/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = (
        f"https://serverless.twilio.com/v1/Services/{service_sid}/Builds/{sid}"  # noqa
    )
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_builds_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Retrieve a specific Build resource.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{service_sid}/Builds/{sid}?](
    https://serverless.twilio.com/v1/Services/{service_sid}/Builds/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = (
        f"https://serverless.twilio.com/v1/Services/{service_sid}/Builds/{sid}"  # noqa
    )
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_builds_sid_status(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Retrieve a specific Build resource.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{service_sid}/Builds/{sid}/Status?](
    https://serverless.twilio.com/v1/Services/{service_sid}/Builds/{sid}/Status?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://serverless.twilio.com/v1/Services/{service_sid}/Builds/{sid}/Status"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_environments(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all environments.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{service_sid}/Environments?&page_size=%s](
    https://serverless.twilio.com/v1/Services/{service_sid}/Environments?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = (
        f"https://serverless.twilio.com/v1/Services/{service_sid}/Environments"  # noqa
    )
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_environments(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    domain_suffix: str = None,
    unique_name: str = None,
) -> Dict[str, Any]:
    """
    Create a new environment.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        domain_suffix:
            A URL-friendly name that represents the environment and forms part of
            the domain name. It can be a maximum of 16 characters.
        unique_name:
            A user-defined string that uniquely identifies the Environment resource.
            It can be a maximum of 100 characters.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{service_sid}/Environments?](
    https://serverless.twilio.com/v1/Services/{service_sid}/Environments?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = (
        f"https://serverless.twilio.com/v1/Services/{service_sid}/Environments"  # noqa
    )
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "domain_suffix": domain_suffix,
        "unique_name": unique_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_service_sid_environments_environment_sid_deployments(
    service_sid: str,
    environment_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Deployments.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        environment_sid:
            Environment sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{environment_sid}/Deployments?&page_size=%s](
    https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{environment_sid}/Deployments?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{environment_sid}/Deployments"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_environments_environment_sid_deployments(
    service_sid: str,
    environment_sid: str,
    twilio_credentials: "TwilioCredentials",
    build_sid: str = None,
) -> Dict[str, Any]:
    """
    Create a new Deployment.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        environment_sid:
            Environment sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        build_sid:
            The SID of the Build for the Deployment.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{environment_sid}/Deployments?](
    https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{environment_sid}/Deployments?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{environment_sid}/Deployments"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "build_sid": build_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_service_sid_environments_environment_sid_deployments_sid(
    service_sid: str,
    environment_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Retrieve a specific Deployment.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        environment_sid:
            Environment sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{environment_sid}/Deployments/{sid}?](
    https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{environment_sid}/Deployments/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{environment_sid}/Deployments/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_environments_environment_sid_logs(
    service_sid: str,
    environment_sid: str,
    twilio_credentials: "TwilioCredentials",
    function_sid: str = None,
    start_date: str = None,
    end_date: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all logs.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        environment_sid:
            Environment sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        function_sid:
            The SID of the function whose invocation produced the Log resources to
            read.
        start_date:
            The date/time (in GMT, ISO 8601) after which the Log resources must have
            been created. Defaults to 1 day prior to current date/time.
        end_date:
            The date/time (in GMT, ISO 8601) before which the Log resources must
            have been created. Defaults to current date/time.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{environment_sid}/Logs?&function_sid=%s&start_date=%s&end_date=%s&page_size=%s](
    https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{environment_sid}/Logs?&function_sid=%s&start_date=%s&end_date=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{environment_sid}/Logs"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "function_sid": function_sid,
        "start_date": start_date,
        "end_date": end_date,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_environments_environment_sid_logs_sid(
    service_sid: str,
    environment_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Retrieve a specific log.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        environment_sid:
            Environment sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{environment_sid}/Logs/{sid}?](
    https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{environment_sid}/Logs/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{environment_sid}/Logs/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_environments_environment_sid_variables(
    service_sid: str,
    environment_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Variables.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        environment_sid:
            Environment sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{environment_sid}/Variables?&page_size=%s](
    https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{environment_sid}/Variables?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{environment_sid}/Variables"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_environments_environment_sid_variables(
    service_sid: str,
    environment_sid: str,
    twilio_credentials: "TwilioCredentials",
    key: str = None,
    value: str = None,
) -> Dict[str, Any]:
    """
    Create a new Variable.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        environment_sid:
            Environment sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        key:
            A string by which the Variable resource can be referenced. It can be a
            maximum of 128 characters.
        value:
            A string that contains the actual value of the Variable. It can be a
            maximum of 450 bytes in size.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{environment_sid}/Variables?](
    https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{environment_sid}/Variables?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{environment_sid}/Variables"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "key": key,
        "value": value,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_service_sid_environments_environment_sid_variables_sid(
    service_sid: str,
    environment_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete a specific Variable.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        environment_sid:
            Environment sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{environment_sid}/Variables/{sid}?](
    https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{environment_sid}/Variables/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{environment_sid}/Variables/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_environments_environment_sid_variables_sid(
    service_sid: str,
    environment_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Retrieve a specific Variable.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        environment_sid:
            Environment sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{environment_sid}/Variables/{sid}?](
    https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{environment_sid}/Variables/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{environment_sid}/Variables/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_environments_environment_sid_variables_sid(
    service_sid: str,
    environment_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    key: str = None,
    value: str = None,
) -> Dict[str, Any]:
    """
    Update a specific Variable.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        environment_sid:
            Environment sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        key:
            A string by which the Variable resource can be referenced. It can be a
            maximum of 128 characters.
        value:
            A string that contains the actual value of the Variable. It can be a
            maximum of 450 bytes in size.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{environment_sid}/Variables/{sid}?](
    https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{environment_sid}/Variables/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{environment_sid}/Variables/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "key": key,
        "value": value,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_service_sid_environments_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete a specific environment.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{sid}?](
    https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_environments_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Retrieve a specific environment.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{sid}?](
    https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://serverless.twilio.com/v1/Services/{service_sid}/Environments/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_functions(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Functions.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{service_sid}/Functions?&page_size=%s](
    https://serverless.twilio.com/v1/Services/{service_sid}/Functions?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://serverless.twilio.com/v1/Services/{service_sid}/Functions"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_functions(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    friendly_name: str = None,
) -> Dict[str, Any]:
    """
    Create a new Function resource.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        friendly_name:
            A descriptive string that you create to describe the Function resource.
            It can be a maximum of 255 characters.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{service_sid}/Functions?](
    https://serverless.twilio.com/v1/Services/{service_sid}/Functions?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://serverless.twilio.com/v1/Services/{service_sid}/Functions"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "friendly_name": friendly_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_service_sid_functions_function_sid_versions(
    service_sid: str,
    function_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Function Version resources.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        function_sid:
            Function sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{service_sid}/Functions/{function_sid}/Versions?&page_size=%s](
    https://serverless.twilio.com/v1/Services/{service_sid}/Functions/{function_sid}/Versions?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://serverless.twilio.com/v1/Services/{service_sid}/Functions/{function_sid}/Versions"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_functions_function_sid_versions_sid(
    service_sid: str,
    function_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Retrieve a specific Function Version resource.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        function_sid:
            Function sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{service_sid}/Functions/{function_sid}/Versions/{sid}?](
    https://serverless.twilio.com/v1/Services/{service_sid}/Functions/{function_sid}/Versions/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://serverless.twilio.com/v1/Services/{service_sid}/Functions/{function_sid}/Versions/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_functions_function_sid_versions_sid_content(
    service_sid: str,
    function_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Retrieve a the content of a specific Function Version resource.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        function_sid:
            Function sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{service_sid}/Functions/{function_sid}/Versions/{sid}/Content?](
    https://serverless.twilio.com/v1/Services/{service_sid}/Functions/{function_sid}/Versions/{sid}/Content?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://serverless.twilio.com/v1/Services/{service_sid}/Functions/{function_sid}/Versions/{sid}/Content"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def delete_v1_services_service_sid_functions_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete a Function resource.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{service_sid}/Functions/{sid}?](
    https://serverless.twilio.com/v1/Services/{service_sid}/Functions/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://serverless.twilio.com/v1/Services/{service_sid}/Functions/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_functions_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Retrieve a specific Function resource.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{service_sid}/Functions/{sid}?](
    https://serverless.twilio.com/v1/Services/{service_sid}/Functions/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://serverless.twilio.com/v1/Services/{service_sid}/Functions/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_functions_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    friendly_name: str = None,
) -> Dict[str, Any]:
    """
    Update a specific Function resource.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        friendly_name:
            A descriptive string that you create to describe the Function resource.
            It can be a maximum of 255 characters.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{service_sid}/Functions/{sid}?](
    https://serverless.twilio.com/v1/Services/{service_sid}/Functions/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://serverless.twilio.com/v1/Services/{service_sid}/Functions/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "friendly_name": friendly_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete a Service resource.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{sid}?](
    https://serverless.twilio.com/v1/Services/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://serverless.twilio.com/v1/Services/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Retrieve a specific Service resource.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{sid}?](
    https://serverless.twilio.com/v1/Services/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://serverless.twilio.com/v1/Services/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    friendly_name: str = None,
    include_credentials: bool = None,
    ui_editable: bool = None,
) -> Dict[str, Any]:
    """
    Update a specific Service resource.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        friendly_name:
            A descriptive string that you create to describe the Service resource.
            It can be a maximum of 255 characters.
        include_credentials:
            Whether to inject Account credentials into a function invocation
            context.
        ui_editable:
            Whether the Service resource's properties and subresources can be edited
            via the UI. The default value is `false`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://serverless.twilio.com/v1/Services/{sid}?](
    https://serverless.twilio.com/v1/Services/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://serverless.twilio.com/v1/Services/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "friendly_name": friendly_name,
        "include_credentials": include_credentials,
        "ui_editable": ui_editable,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_flows(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Flows.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://studio.twilio.com/v1/Flows?&page_size=%s](
    https://studio.twilio.com/v1/Flows?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://studio.twilio.com/v1/Flows"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_flows_flow_sid_engagements(
    flow_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Engagements for the Flow.

    Args:
        flow_sid:
            Flow sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://studio.twilio.com/v1/Flows/{flow_sid}/Engagements?&page_size=%s](
    https://studio.twilio.com/v1/Flows/{flow_sid}/Engagements?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://studio.twilio.com/v1/Flows/{flow_sid}/Engagements"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_flows_flow_sid_engagements(
    flow_sid: str,
    twilio_credentials: "TwilioCredentials",
    from_: str = None,
    parameters: str = None,
    to: str = None,
) -> Dict[str, Any]:
    """
    Triggers a new Engagement for the Flow.

    Args:
        flow_sid:
            Flow sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        from_:
            The Twilio phone number to send messages or initiate calls from during
            the Flow Engagement. Available as variable
            `{{flow.channel.address}}`.
        parameters:
            A JSON string we will add to your flow's context and that you can access
            as variables inside your flow. For example, if you pass in
            `Parameters={'name':'Zeke'}` then inside a widget you can
            reference the variable `{{flow.data.name}}` which will
            return the string 'Zeke'. Note: the JSON value must
            explicitly be passed as a string, not as a hash object.
            Depending on your particular HTTP library, you may need to
            add quotes or URL encode your JSON string.
        to:
            The Contact phone number to start a Studio Flow Engagement, available as
            variable `{{contact.channel.address}}`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://studio.twilio.com/v1/Flows/{flow_sid}/Engagements?](
    https://studio.twilio.com/v1/Flows/{flow_sid}/Engagements?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://studio.twilio.com/v1/Flows/{flow_sid}/Engagements"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "from_": from_,
        "parameters": parameters,
        "to": to,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_flows_flow_sid_engagements_engagement_sid_context(
    flow_sid: str,
    engagement_sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Retrieve the most recent context for an Engagement.

    Args:
        flow_sid:
            Flow sid used in formatting the endpoint URL.
        engagement_sid:
            Engagement sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://studio.twilio.com/v1/Flows/{flow_sid}/Engagements/{engagement_sid}/Context?](
    https://studio.twilio.com/v1/Flows/{flow_sid}/Engagements/{engagement_sid}/Context?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://studio.twilio.com/v1/Flows/{flow_sid}/Engagements/{engagement_sid}/Context"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_flows_flow_sid_engagements_engagement_sid_steps(
    flow_sid: str,
    engagement_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Steps for an Engagement.

    Args:
        flow_sid:
            Flow sid used in formatting the endpoint URL.
        engagement_sid:
            Engagement sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://studio.twilio.com/v1/Flows/{flow_sid}/Engagements/{engagement_sid}/Steps?&page_size=%s](
    https://studio.twilio.com/v1/Flows/{flow_sid}/Engagements/{engagement_sid}/Steps?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://studio.twilio.com/v1/Flows/{flow_sid}/Engagements/{engagement_sid}/Steps"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_flows_flow_sid_engagements_engagement_sid_steps_sid(
    flow_sid: str,
    engagement_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Retrieve a Step.

    Args:
        flow_sid:
            Flow sid used in formatting the endpoint URL.
        engagement_sid:
            Engagement sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://studio.twilio.com/v1/Flows/{flow_sid}/Engagements/{engagement_sid}/Steps/{sid}?](
    https://studio.twilio.com/v1/Flows/{flow_sid}/Engagements/{engagement_sid}/Steps/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://studio.twilio.com/v1/Flows/{flow_sid}/Engagements/{engagement_sid}/Steps/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_flows_flow_sid_engagements_engagement_sid_steps_step_sid_context(
    flow_sid: str,
    engagement_sid: str,
    step_sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Retrieve the context for an Engagement Step.

    Args:
        flow_sid:
            Flow sid used in formatting the endpoint URL.
        engagement_sid:
            Engagement sid used in formatting the endpoint URL.
        step_sid:
            Step sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://studio.twilio.com/v1/Flows/{flow_sid}/Engagements/{engagement_sid}/Steps/{step_sid}/Context?](
    https://studio.twilio.com/v1/Flows/{flow_sid}/Engagements/{engagement_sid}/Steps/{step_sid}/Context?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://studio.twilio.com/v1/Flows/{flow_sid}/Engagements/{engagement_sid}/Steps/{step_sid}/Context"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def delete_v1_flows_flow_sid_engagements_sid(
    flow_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete this Engagement and all Steps relating to it.

    Args:
        flow_sid:
            Flow sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://studio.twilio.com/v1/Flows/{flow_sid}/Engagements/{sid}?](
    https://studio.twilio.com/v1/Flows/{flow_sid}/Engagements/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://studio.twilio.com/v1/Flows/{flow_sid}/Engagements/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_flows_flow_sid_engagements_sid(
    flow_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Retrieve an Engagement.

    Args:
        flow_sid:
            Flow sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://studio.twilio.com/v1/Flows/{flow_sid}/Engagements/{sid}?](
    https://studio.twilio.com/v1/Flows/{flow_sid}/Engagements/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://studio.twilio.com/v1/Flows/{flow_sid}/Engagements/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_flows_flow_sid_executions(
    flow_sid: str,
    twilio_credentials: "TwilioCredentials",
    date_created_from: str = None,
    date_created_to: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Executions for the Flow.

    Args:
        flow_sid:
            Flow sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        date_created_from:
            Only show Execution resources starting on or after this [ISO
            8601](https://en.wikipedia.org/wiki/ISO_8601) date-time,
            given as `YYYY-MM-DDThh:mm:ss-hh:mm`.
        date_created_to:
            Only show Execution resources starting before this [ISO
            8601](https://en.wikipedia.org/wiki/ISO_8601) date-time,
            given as `YYYY-MM-DDThh:mm:ss-hh:mm`.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://studio.twilio.com/v1/Flows/{flow_sid}/Executions?&date_created_from=%s&date_created_to=%s&page_size=%s](
    https://studio.twilio.com/v1/Flows/{flow_sid}/Executions?&date_created_from=%s&date_created_to=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://studio.twilio.com/v1/Flows/{flow_sid}/Executions"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "date_created_from": date_created_from,
        "date_created_to": date_created_to,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_flows_flow_sid_executions(
    flow_sid: str,
    twilio_credentials: "TwilioCredentials",
    from_: str = None,
    parameters: str = None,
    to: str = None,
) -> Dict[str, Any]:
    """
    Triggers a new Execution for the Flow.

    Args:
        flow_sid:
            Flow sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        from_:
            The Twilio phone number to send messages or initiate calls from during
            the Flow's Execution. Available as variable
            `{{flow.channel.address}}`. For SMS, this can also be a
            Messaging Service SID.
        parameters:
            JSON data that will be added to the Flow's context and that can be
            accessed as variables inside your Flow. For example, if you
            pass in `Parameters={"name":"Zeke"}`, a widget in your Flow
            can reference the variable `{{flow.data.name}}`, which
            returns "Zeke". Note: the JSON value must explicitly be
            passed as a string, not as a hash object. Depending on your
            particular HTTP library, you may need to add quotes or URL
            encode the JSON string.
        to:
            The Contact phone number to start a Studio Flow Execution, available as
            variable `{{contact.channel.address}}`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://studio.twilio.com/v1/Flows/{flow_sid}/Executions?](
    https://studio.twilio.com/v1/Flows/{flow_sid}/Executions?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://studio.twilio.com/v1/Flows/{flow_sid}/Executions"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "from_": from_,
        "parameters": parameters,
        "to": to,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_flows_flow_sid_executions_execution_sid_context(
    flow_sid: str,
    execution_sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Retrieve the most recent context for an Execution.

    Args:
        flow_sid:
            Flow sid used in formatting the endpoint URL.
        execution_sid:
            Execution sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://studio.twilio.com/v1/Flows/{flow_sid}/Executions/{execution_sid}/Context?](
    https://studio.twilio.com/v1/Flows/{flow_sid}/Executions/{execution_sid}/Context?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://studio.twilio.com/v1/Flows/{flow_sid}/Executions/{execution_sid}/Context"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_flows_flow_sid_executions_execution_sid_steps(
    flow_sid: str,
    execution_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Steps for an Execution.

    Args:
        flow_sid:
            Flow sid used in formatting the endpoint URL.
        execution_sid:
            Execution sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://studio.twilio.com/v1/Flows/{flow_sid}/Executions/{execution_sid}/Steps?&page_size=%s](
    https://studio.twilio.com/v1/Flows/{flow_sid}/Executions/{execution_sid}/Steps?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://studio.twilio.com/v1/Flows/{flow_sid}/Executions/{execution_sid}/Steps"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_flows_flow_sid_executions_execution_sid_steps_sid(
    flow_sid: str,
    execution_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Retrieve a Step.

    Args:
        flow_sid:
            Flow sid used in formatting the endpoint URL.
        execution_sid:
            Execution sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://studio.twilio.com/v1/Flows/{flow_sid}/Executions/{execution_sid}/Steps/{sid}?](
    https://studio.twilio.com/v1/Flows/{flow_sid}/Executions/{execution_sid}/Steps/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://studio.twilio.com/v1/Flows/{flow_sid}/Executions/{execution_sid}/Steps/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_flows_flow_sid_executions_execution_sid_steps_step_sid_context(
    flow_sid: str,
    execution_sid: str,
    step_sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Retrieve the context for an Execution Step.

    Args:
        flow_sid:
            Flow sid used in formatting the endpoint URL.
        execution_sid:
            Execution sid used in formatting the endpoint URL.
        step_sid:
            Step sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://studio.twilio.com/v1/Flows/{flow_sid}/Executions/{execution_sid}/Steps/{step_sid}/Context?](
    https://studio.twilio.com/v1/Flows/{flow_sid}/Executions/{execution_sid}/Steps/{step_sid}/Context?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://studio.twilio.com/v1/Flows/{flow_sid}/Executions/{execution_sid}/Steps/{step_sid}/Context"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def delete_v1_flows_flow_sid_executions_sid(
    flow_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete the Execution and all Steps relating to it.

    Args:
        flow_sid:
            Flow sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://studio.twilio.com/v1/Flows/{flow_sid}/Executions/{sid}?](
    https://studio.twilio.com/v1/Flows/{flow_sid}/Executions/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://studio.twilio.com/v1/Flows/{flow_sid}/Executions/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_flows_flow_sid_executions_sid(
    flow_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Retrieve an Execution.

    Args:
        flow_sid:
            Flow sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://studio.twilio.com/v1/Flows/{flow_sid}/Executions/{sid}?](
    https://studio.twilio.com/v1/Flows/{flow_sid}/Executions/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://studio.twilio.com/v1/Flows/{flow_sid}/Executions/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_flows_flow_sid_executions_sid(
    flow_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    status: str = None,
) -> Dict[str, Any]:
    """
    Update the status of an Execution to `ended`.

    Args:
        flow_sid:
            Flow sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        status:
            The status of the Execution. Can only be `ended`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://studio.twilio.com/v1/Flows/{flow_sid}/Executions/{sid}?](
    https://studio.twilio.com/v1/Flows/{flow_sid}/Executions/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://studio.twilio.com/v1/Flows/{flow_sid}/Executions/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "status": status,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_flows_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete a specific Flow.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://studio.twilio.com/v1/Flows/{sid}?](
    https://studio.twilio.com/v1/Flows/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://studio.twilio.com/v1/Flows/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_flows_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Retrieve a specific Flow.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://studio.twilio.com/v1/Flows/{sid}?](
    https://studio.twilio.com/v1/Flows/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://studio.twilio.com/v1/Flows/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_e_sim_profiles(
    twilio_credentials: "TwilioCredentials",
    eid: str = None,
    sim_sid: str = None,
    status: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of eSIM Profiles.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        eid:
            List the eSIM Profiles that have been associated with an EId.
        sim_sid:
            Find the eSIM Profile resource related to a
            [Sim](https://www.twilio.com/docs/wireless/api/sim-resource)
            resource by providing the SIM SID. Will always return an
            array with either 1 or 0 records.
        status:
            List the eSIM Profiles that are in a given status.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://supersim.twilio.com/v1/ESimProfiles?&eid=%s&sim_sid=%s&status=%s&page_size=%s](
    https://supersim.twilio.com/v1/ESimProfiles?&eid=%s&sim_sid=%s&status=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://supersim.twilio.com/v1/ESimProfiles"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "eid": eid,
        "sim_sid": sim_sid,
        "status": status,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_e_sim_profiles(
    twilio_credentials: "TwilioCredentials",
    callback_method: str = None,
    callback_url: str = None,
    eid: str = None,
) -> Dict[str, Any]:
    """
    Order an eSIM Profile.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        callback_method:
            The HTTP method we should use to call `callback_url`. Can be: `GET` or
            `POST` and the default is POST.
        callback_url:
            The URL we should call using the `callback_method` when the status of
            the eSIM Profile changes. At this stage of the eSIM Profile
            pilot, the a request to the URL will only be called when the
            ESimProfile resource changes from `reserving` to
            `available`.
        eid:
            Identifier of the eUICC that will claim the eSIM Profile.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://supersim.twilio.com/v1/ESimProfiles?](
    https://supersim.twilio.com/v1/ESimProfiles?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://supersim.twilio.com/v1/ESimProfiles"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "callback_method": callback_method,
        "callback_url": callback_url,
        "eid": eid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_e_sim_profiles_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch an eSIM Profile.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://supersim.twilio.com/v1/ESimProfiles/{sid}?](
    https://supersim.twilio.com/v1/ESimProfiles/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://supersim.twilio.com/v1/ESimProfiles/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_fleets(
    twilio_credentials: "TwilioCredentials",
    network_access_profile: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of Fleets from your account.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        network_access_profile:
            The SID or unique name of the Network Access Profile that controls which
            cellular networks the Fleet's SIMs can connect to.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://supersim.twilio.com/v1/Fleets?&network_access_profile=%s&page_size=%s](
    https://supersim.twilio.com/v1/Fleets?&network_access_profile=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://supersim.twilio.com/v1/Fleets"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "network_access_profile": network_access_profile,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_fleets(
    twilio_credentials: "TwilioCredentials",
    data_enabled: bool = None,
    data_limit: int = None,
    ip_commands_method: str = None,
    ip_commands_url: str = None,
    network_access_profile: str = None,
    sms_commands_enabled: bool = None,
    sms_commands_method: str = None,
    sms_commands_url: str = None,
    unique_name: str = None,
) -> Dict[str, Any]:
    """
    Create a Fleet.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        data_enabled:
            Defines whether SIMs in the Fleet are capable of using
            2G/3G/4G/LTE/CAT-M data connectivity. Defaults to `true`.
        data_limit:
            The total data usage (download and upload combined) in Megabytes that
            each Sim resource assigned to the Fleet resource can consume
            during a billing period (normally one month). Value must be
            between 1MB (1) and 2TB (2,000,000). Defaults to 1GB
            (1,000).
        ip_commands_method:
            A string representing the HTTP method to use when making a request to
            `ip_commands_url`. Can be one of `POST` or `GET`. Defaults
            to `POST`.
        ip_commands_url:
            The URL that will receive a webhook when a Super SIM in the Fleet is
            used to send an IP Command from your device to a special IP
            address. Your server should respond with an HTTP status code
            in the 200 range; any response body will be ignored.
        network_access_profile:
            The SID or unique name of the Network Access Profile that will control
            which cellular networks the Fleet's SIMs can connect to.
        sms_commands_enabled:
            Defines whether SIMs in the Fleet are capable of sending and receiving
            machine-to-machine SMS via Commands. Defaults to `true`.
        sms_commands_method:
            A string representing the HTTP method to use when making a request to
            `sms_commands_url`. Can be one of `POST` or `GET`. Defaults
            to `POST`.
        sms_commands_url:
            The URL that will receive a webhook when a Super SIM in the Fleet is
            used to send an SMS from your device to the SMS Commands
            number. Your server should respond with an HTTP status code
            in the 200 range; any response body will be ignored.
        unique_name:
            An application-defined string that uniquely identifies the resource. It
            can be used in place of the resource's `sid` in the URL to
            address the resource.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://supersim.twilio.com/v1/Fleets?](
    https://supersim.twilio.com/v1/Fleets?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://supersim.twilio.com/v1/Fleets"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "data_enabled": data_enabled,
        "data_limit": data_limit,
        "ip_commands_method": ip_commands_method,
        "ip_commands_url": ip_commands_url,
        "network_access_profile": network_access_profile,
        "sms_commands_enabled": sms_commands_enabled,
        "sms_commands_method": sms_commands_method,
        "sms_commands_url": sms_commands_url,
        "unique_name": unique_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_fleets_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a Fleet instance from your account.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://supersim.twilio.com/v1/Fleets/{sid}?](
    https://supersim.twilio.com/v1/Fleets/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://supersim.twilio.com/v1/Fleets/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_fleets_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    ip_commands_method: str = None,
    ip_commands_url: str = None,
    network_access_profile: str = None,
    sms_commands_method: str = None,
    sms_commands_url: str = None,
    unique_name: str = None,
) -> Dict[str, Any]:
    """
    Updates the given properties of a Super SIM Fleet instance from your account.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        ip_commands_method:
            A string representing the HTTP method to use when making a request to
            `ip_commands_url`. Can be one of `POST` or `GET`. Defaults
            to `POST`.
        ip_commands_url:
            The URL that will receive a webhook when a Super SIM in the Fleet is
            used to send an IP Command from your device to a special IP
            address. Your server should respond with an HTTP status code
            in the 200 range; any response body will be ignored.
        network_access_profile:
            The SID or unique name of the Network Access Profile that will control
            which cellular networks the Fleet's SIMs can connect to.
        sms_commands_method:
            A string representing the HTTP method to use when making a request to
            `sms_commands_url`. Can be one of `POST` or `GET`. Defaults
            to `POST`.
        sms_commands_url:
            The URL that will receive a webhook when a Super SIM in the Fleet is
            used to send an SMS from your device to the SMS Commands
            number. Your server should respond with an HTTP status code
            in the 200 range; any response body will be ignored.
        unique_name:
            An application-defined string that uniquely identifies the resource. It
            can be used in place of the resource's `sid` in the URL to
            address the resource.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://supersim.twilio.com/v1/Fleets/{sid}?](
    https://supersim.twilio.com/v1/Fleets/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://supersim.twilio.com/v1/Fleets/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "ip_commands_method": ip_commands_method,
        "ip_commands_url": ip_commands_url,
        "network_access_profile": network_access_profile,
        "sms_commands_method": sms_commands_method,
        "sms_commands_url": sms_commands_url,
        "unique_name": unique_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_ip_commands(
    twilio_credentials: "TwilioCredentials",
    sim: str = None,
    sim_iccid: str = None,
    status: str = None,
    direction: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of IP Commands from your account.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        sim:
            The SID or unique name of the Sim resource that IP Command was sent to
            or from.
        sim_iccid:
            The ICCID of the Sim resource that IP Command was sent to or from.
        status:
            The status of the IP Command. Can be: `queued`, `sent`, `received` or
            `failed`. See the [IP Command Status
            Values](https://www.twilio.com/docs/wireless/api/ipcommand-
            resource
            status-values) for a description of each.
        direction:
            The direction of the IP Command. Can be `to_sim` or `from_sim`. The
            value of `to_sim` is synonymous with the term `mobile
            terminated`, and `from_sim` is synonymous with the term
            `mobile originated`.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://supersim.twilio.com/v1/IpCommands?&sim=%s&sim_iccid=%s&status=%s&direction=%s&page_size=%s](
    https://supersim.twilio.com/v1/IpCommands?&sim=%s&sim_iccid=%s&status=%s&direction=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://supersim.twilio.com/v1/IpCommands"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "sim": sim,
        "sim_iccid": sim_iccid,
        "status": status,
        "direction": direction,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_ip_commands(
    twilio_credentials: "TwilioCredentials",
    callback_method: str = None,
    callback_url: str = None,
    device_port: int = None,
    payload: str = None,
    payload_type: str = None,
    sim: str = None,
) -> Dict[str, Any]:
    """
    Send an IP Command to a Super SIM.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        callback_method:
            The HTTP method we should use to call `callback_url`. Can be `GET` or
            `POST`, and the default is `POST`.
        callback_url:
            The URL we should call using the `callback_method` after we have sent
            the IP Command.
        device_port:
            The device port to which the IP Command will be sent.
        payload:
            The payload to be delivered to the device.
        payload_type:
            Indicates how the payload is encoded. Either `text` or `binary`.
            Defaults to `text`.
        sim:
            The `sid` or `unique_name` of the [Super
            SIM](https://www.twilio.com/docs/iot/supersim/api/sim-
            resource) to send the IP Command to.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://supersim.twilio.com/v1/IpCommands?](
    https://supersim.twilio.com/v1/IpCommands?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://supersim.twilio.com/v1/IpCommands"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "callback_method": callback_method,
        "callback_url": callback_url,
        "device_port": device_port,
        "payload": payload,
        "payload_type": payload_type,
        "sim": sim,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_ip_commands_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch IP Command instance from your account.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://supersim.twilio.com/v1/IpCommands/{sid}?](
    https://supersim.twilio.com/v1/IpCommands/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://supersim.twilio.com/v1/IpCommands/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_network_access_profiles(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of Network Access Profiles from your account.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://supersim.twilio.com/v1/NetworkAccessProfiles?&page_size=%s](
    https://supersim.twilio.com/v1/NetworkAccessProfiles?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://supersim.twilio.com/v1/NetworkAccessProfiles"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_network_access_profiles(
    twilio_credentials: "TwilioCredentials",
    networks: list = None,
    unique_name: str = None,
) -> Dict[str, Any]:
    """
    Create a new Network Access Profile.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        networks:
            List of Network SIDs that this Network Access Profile will allow
            connections to.
        unique_name:
            An application-defined string that uniquely identifies the resource. It
            can be used in place of the resource's `sid` in the URL to
            address the resource.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://supersim.twilio.com/v1/NetworkAccessProfiles?](
    https://supersim.twilio.com/v1/NetworkAccessProfiles?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://supersim.twilio.com/v1/NetworkAccessProfiles"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "networks": networks,
        "unique_name": unique_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_network_access_profiles_network_access_profile_sid_networks(
    network_access_profile_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of Network Access Profile resource's Network resource.

    Args:
        network_access_profile_sid:
            Network access profile sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://supersim.twilio.com/v1/NetworkAccessProfiles/{network_access_profile_sid}/Networks?&page_size=%s](
    https://supersim.twilio.com/v1/NetworkAccessProfiles/{network_access_profile_sid}/Networks?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://supersim.twilio.com/v1/NetworkAccessProfiles/{network_access_profile_sid}/Networks"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_network_access_profiles_network_access_profile_sid_networks(
    network_access_profile_sid: str,
    twilio_credentials: "TwilioCredentials",
    network: str = None,
) -> Dict[str, Any]:
    """
    Add a Network resource to the Network Access Profile resource.

    Args:
        network_access_profile_sid:
            Network access profile sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        network:
            The SID of the Network resource to be added to the Network Access
            Profile resource.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://supersim.twilio.com/v1/NetworkAccessProfiles/{network_access_profile_sid}/Networks?](
    https://supersim.twilio.com/v1/NetworkAccessProfiles/{network_access_profile_sid}/Networks?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://supersim.twilio.com/v1/NetworkAccessProfiles/{network_access_profile_sid}/Networks"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "network": network,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_network_access_profiles_network_access_profile_sid_networks_sid(
    network_access_profile_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Remove a Network resource from the Network Access Profile resource's.

    Args:
        network_access_profile_sid:
            Network access profile sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://supersim.twilio.com/v1/NetworkAccessProfiles/{network_access_profile_sid}/Networks/{sid}?](
    https://supersim.twilio.com/v1/NetworkAccessProfiles/{network_access_profile_sid}/Networks/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://supersim.twilio.com/v1/NetworkAccessProfiles/{network_access_profile_sid}/Networks/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_network_access_profiles_network_access_profile_sid_networks_sid(
    network_access_profile_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a Network Access Profile resource's Network resource.

    Args:
        network_access_profile_sid:
            Network access profile sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://supersim.twilio.com/v1/NetworkAccessProfiles/{network_access_profile_sid}/Networks/{sid}?](
    https://supersim.twilio.com/v1/NetworkAccessProfiles/{network_access_profile_sid}/Networks/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://supersim.twilio.com/v1/NetworkAccessProfiles/{network_access_profile_sid}/Networks/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_network_access_profiles_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a Network Access Profile instance from your account.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://supersim.twilio.com/v1/NetworkAccessProfiles/{sid}?](
    https://supersim.twilio.com/v1/NetworkAccessProfiles/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://supersim.twilio.com/v1/NetworkAccessProfiles/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_network_access_profiles_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    unique_name: str = None,
) -> Dict[str, Any]:
    """
    Updates the given properties of a Network Access Profile in your account.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        unique_name:
            The new unique name of the Network Access Profile.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://supersim.twilio.com/v1/NetworkAccessProfiles/{sid}?](
    https://supersim.twilio.com/v1/NetworkAccessProfiles/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://supersim.twilio.com/v1/NetworkAccessProfiles/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "unique_name": unique_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_networks(
    twilio_credentials: "TwilioCredentials",
    iso_country: str = None,
    mcc: str = None,
    mnc: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of Network resources.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        iso_country:
            The [ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
            of the Network resources to read.
        mcc:
            The 'mobile country code' of a country. Network resources with this
            `mcc` in their `identifiers` will be read.
        mnc:
            The 'mobile network code' of a mobile operator network. Network
            resources with this `mnc` in their `identifiers` will be
            read.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://supersim.twilio.com/v1/Networks?&iso_country=%s&mcc=%s&mnc=%s&page_size=%s](
    https://supersim.twilio.com/v1/Networks?&iso_country=%s&mcc=%s&mnc=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://supersim.twilio.com/v1/Networks"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "iso_country": iso_country,
        "mcc": mcc,
        "mnc": mnc,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_networks_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a Network resource.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://supersim.twilio.com/v1/Networks/{sid}?](
    https://supersim.twilio.com/v1/Networks/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://supersim.twilio.com/v1/Networks/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_sims(
    twilio_credentials: "TwilioCredentials",
    status: str = None,
    fleet: str = None,
    iccid: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of Super SIMs from your account.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        status:
            The status of the Sim resources to read. Can be `new`, `ready`,
            `active`, `inactive`, or `scheduled`.
        fleet:
            The SID or unique name of the Fleet to which a list of Sims are
            assigned.
        iccid:
            The [ICCID](https://en.wikipedia.org/wiki/Subscriber_identity_module
            ICCID) associated with a Super SIM to filter the list by.
            Passing this parameter will always return a list containing
            zero or one SIMs.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://supersim.twilio.com/v1/Sims?&status=%s&fleet=%s&iccid=%s&page_size=%s](
    https://supersim.twilio.com/v1/Sims?&status=%s&fleet=%s&iccid=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://supersim.twilio.com/v1/Sims"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "status": status,
        "fleet": fleet,
        "iccid": iccid,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_sims(
    twilio_credentials: "TwilioCredentials",
    iccid: str = None,
    registration_code: str = None,
) -> Dict[str, Any]:
    """
    Register a Super SIM to your Account.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        iccid:
            The [ICCID](https://en.wikipedia.org/wiki/Subscriber_identity_module
            ICCID) of the Super SIM to be added to your Account.
        registration_code:
            The 10-digit code required to claim the Super SIM for your Account.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://supersim.twilio.com/v1/Sims?](
    https://supersim.twilio.com/v1/Sims?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://supersim.twilio.com/v1/Sims"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "iccid": iccid,
        "registration_code": registration_code,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_sims_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a Super SIM instance from your account.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://supersim.twilio.com/v1/Sims/{sid}?](
    https://supersim.twilio.com/v1/Sims/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://supersim.twilio.com/v1/Sims/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_sims_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    account_sid: str = None,
    callback_method: str = None,
    callback_url: str = None,
    fleet: str = None,
    status: str = None,
    unique_name: str = None,
) -> Dict[str, Any]:
    """
    Updates the given properties of a Super SIM instance from your account.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        account_sid:
            The SID of the Account to which the Sim resource should belong. The
            Account SID can only be that of the requesting Account or
            that of a Subaccount of the requesting Account. Only valid
            when the Sim resource's status is new.
        callback_method:
            The HTTP method we should use to call `callback_url`. Can be: `GET` or
            `POST` and the default is POST.
        callback_url:
            The URL we should call using the `callback_method` after an asynchronous
            update has finished.
        fleet:
            The SID or unique name of the Fleet to which the SIM resource should be
            assigned.
        status:
            The new status of the resource. Can be: `ready`, `active`, or
            `inactive`. See the [Super SIM Status
            Values](https://www.twilio.com/docs/iot/supersim/api/sim-
            resource
            status-values) for more info.
        unique_name:
            An application-defined string that uniquely identifies the resource. It
            can be used in place of the resource's `sid` in the URL to
            address the resource.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://supersim.twilio.com/v1/Sims/{sid}?](
    https://supersim.twilio.com/v1/Sims/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    | 202 | Accepted. |
    """  # noqa
    url = f"https://supersim.twilio.com/v1/Sims/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
        202: "Accepted.",  # noqa
    }

    data = {
        "account_sid": account_sid,
        "callback_method": callback_method,
        "callback_url": callback_url,
        "fleet": fleet,
        "status": status,
        "unique_name": unique_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_sims_sim_sid_billing_periods(
    sim_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of Billing Periods for a Super SIM.

    Args:
        sim_sid:
            Sim sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://supersim.twilio.com/v1/Sims/{sim_sid}/BillingPeriods?&page_size=%s](
    https://supersim.twilio.com/v1/Sims/{sim_sid}/BillingPeriods?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://supersim.twilio.com/v1/Sims/{sim_sid}/BillingPeriods"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_sms_commands(
    twilio_credentials: "TwilioCredentials",
    sim: str = None,
    status: str = None,
    direction: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of SMS Commands from your account.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        sim:
            The SID or unique name of the Sim resource that SMS Command was sent to
            or from.
        status:
            The status of the SMS Command. Can be: `queued`, `sent`, `delivered`,
            `received` or `failed`. See the [SMS Command Status
            Values](https://www.twilio.com/docs/wireless/api/smscommand-
            resource
            status-values) for a description of each.
        direction:
            The direction of the SMS Command. Can be `to_sim` or `from_sim`. The
            value of `to_sim` is synonymous with the term `mobile
            terminated`, and `from_sim` is synonymous with the term
            `mobile originated`.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://supersim.twilio.com/v1/SmsCommands?&sim=%s&status=%s&direction=%s&page_size=%s](
    https://supersim.twilio.com/v1/SmsCommands?&sim=%s&status=%s&direction=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://supersim.twilio.com/v1/SmsCommands"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "sim": sim,
        "status": status,
        "direction": direction,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_sms_commands(
    twilio_credentials: "TwilioCredentials",
    callback_method: str = None,
    callback_url: str = None,
    payload: str = None,
    sim: str = None,
) -> Dict[str, Any]:
    """
    Send SMS Command to a Sim.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        callback_method:
            The HTTP method we should use to call `callback_url`. Can be: `GET` or
            `POST` and the default is POST.
        callback_url:
            The URL we should call using the `callback_method` after we have sent
            the command.
        payload:
            The message body of the SMS Command.
        sim:
            The `sid` or `unique_name` of the
            [SIM](https://www.twilio.com/docs/iot/supersim/api/sim-
            resource) to send the SMS Command to.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://supersim.twilio.com/v1/SmsCommands?](
    https://supersim.twilio.com/v1/SmsCommands?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://supersim.twilio.com/v1/SmsCommands"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "callback_method": callback_method,
        "callback_url": callback_url,
        "payload": payload,
        "sim": sim,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_sms_commands_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch SMS Command instance from your account.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://supersim.twilio.com/v1/SmsCommands/{sid}?](
    https://supersim.twilio.com/v1/SmsCommands/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://supersim.twilio.com/v1/SmsCommands/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_usage_records(
    twilio_credentials: "TwilioCredentials",
    sim: str = None,
    fleet: str = None,
    network: str = None,
    iso_country: str = None,
    group: str = None,
    granularity: str = None,
    start_time: str = None,
    end_time: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """
    List UsageRecords.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        sim:
            SID or unique name of a Sim resource. Only show UsageRecords
            representing usage incurred by this Super SIM.
        fleet:
            SID or unique name of a Fleet resource. Only show UsageRecords
            representing usage for Super SIMs belonging to this Fleet
            resource at the time the usage occurred.
        network:
            SID of a Network resource. Only show UsageRecords representing usage on
            this network.
        iso_country:
            Alpha-2 ISO Country Code. Only show UsageRecords representing usage in
            this country.
        group:
            Dimension over which to aggregate usage records. Can be: `sim`, `fleet`,
            `network`, `isoCountry`. Default is to not aggregate across
            any of these dimensions, UsageRecords will be aggregated
            into the time buckets described by the `Granularity`
            parameter.
        granularity:
            Time-based grouping that UsageRecords should be aggregated by. Can be:
            `hour`, `day`, or `all`. Default is `all`. `all` returns one
            UsageRecord that describes the usage for the entire period.
        start_time:
            Only include usage that occurred at or after this time, specified in
            [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
            Default is one month before the `end_time`.
        end_time:
            Only include usage that occurred before this time (exclusive), specified
            in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
            format. Default is the current time.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://supersim.twilio.com/v1/UsageRecords?&sim=%s&fleet=%s&network=%s&iso_country=%s&group=%s&granularity=%s&start_time=%s&end_time=%s&page_size=%s](
    https://supersim.twilio.com/v1/UsageRecords?&sim=%s&fleet=%s&network=%s&iso_country=%s&group=%s&granularity=%s&start_time=%s&end_time=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://supersim.twilio.com/v1/UsageRecords"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "sim": sim,
        "fleet": fleet,
        "network": network,
        "iso_country": iso_country,
        "group": group,
        "granularity": granularity,
        "start_time": start_time,
        "end_time": end_time,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_services(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services?&page_size=%s](
    https://sync.twilio.com/v1/Services?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://sync.twilio.com/v1/Services"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services(
    twilio_credentials: "TwilioCredentials",
    acl_enabled: bool = None,
    friendly_name: str = None,
    reachability_debouncing_enabled: bool = None,
    reachability_debouncing_window: int = None,
    reachability_webhooks_enabled: bool = None,
    webhook_url: str = None,
    webhooks_from_rest_enabled: bool = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        acl_enabled:
            Whether token identities in the Service must be granted access to Sync
            objects by using the
            [Permissions](https://www.twilio.com/docs/sync/api/sync-
            permissions) resource.
        friendly_name:
            A string that you assign to describe the resource.
        reachability_debouncing_enabled:
            Whether every `endpoint_disconnected` event should occur after a
            configurable delay. The default is `false`, where the
            `endpoint_disconnected` event occurs immediately after
            disconnection. When `true`, intervening reconnections can
            prevent the `endpoint_disconnected` event.
        reachability_debouncing_window:
            The reachability event delay in milliseconds if
            `reachability_debouncing_enabled` = `true`.  Must be between
            1,000 and 30,000 and defaults to 5,000. This is the number
            of milliseconds after the last running client disconnects,
            and a Sync identity is declared offline, before the
            `webhook_url` is called if all endpoints remain offline. A
            reconnection from the same identity by any endpoint during
            this interval prevents the call to `webhook_url`.
        reachability_webhooks_enabled:
            Whether the service instance should call `webhook_url` when client
            endpoints connect to Sync. The default is `false`.
        webhook_url:
            The URL we should call when Sync objects are manipulated.
        webhooks_from_rest_enabled:
            Whether the Service instance should call `webhook_url` when the REST API
            is used to update Sync objects. The default is `false`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services?](
    https://sync.twilio.com/v1/Services?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://sync.twilio.com/v1/Services"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "acl_enabled": acl_enabled,
        "friendly_name": friendly_name,
        "reachability_debouncing_enabled": reachability_debouncing_enabled,
        "reachability_debouncing_window": reachability_debouncing_window,
        "reachability_webhooks_enabled": reachability_webhooks_enabled,
        "webhook_url": webhook_url,
        "webhooks_from_rest_enabled": webhooks_from_rest_enabled,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_service_sid_documents(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Documents?&page_size=%s](
    https://sync.twilio.com/v1/Services/{service_sid}/Documents?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Documents"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_documents(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    data: str = None,
    ttl: int = None,
    unique_name: str = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        data:
            A JSON string that represents an arbitrary, schema-less object that the
            Sync Document stores. Can be up to 16 KiB in length.
        ttl:
            How long, [in seconds](https://www.twilio.com/docs/sync/limits
            sync-payload-limits), before the Sync Document expires and
            is deleted (the Sync Document's time-to-live).
        unique_name:
            An application-defined string that uniquely identifies the Sync Document.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Documents?](
    https://sync.twilio.com/v1/Services/{service_sid}/Documents?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Documents"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "data": data,
        "ttl": ttl,
        "unique_name": unique_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_service_sid_documents_document_sid_permissions(
    service_sid: str,
    document_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Permissions applying to a Sync Document.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        document_sid:
            Document sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Documents/{document_sid}/Permissions?&page_size=%s](
    https://sync.twilio.com/v1/Services/{service_sid}/Documents/{document_sid}/Permissions?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Documents/{document_sid}/Permissions"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def delete_v1_services_service_sid_documents_document_sid_permissions_identity(
    service_sid: str,
    document_sid: str,
    identity: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete a specific Sync Document Permission.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        document_sid:
            Document sid used in formatting the endpoint URL.
        identity:
            Identity used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Documents/{document_sid}/Permissions/{identity}?](
    https://sync.twilio.com/v1/Services/{service_sid}/Documents/{document_sid}/Permissions/{identity}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Documents/{document_sid}/Permissions/{identity}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_documents_document_sid_permissions_identity(
    service_sid: str,
    document_sid: str,
    identity: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a specific Sync Document Permission.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        document_sid:
            Document sid used in formatting the endpoint URL.
        identity:
            Identity used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Documents/{document_sid}/Permissions/{identity}?](
    https://sync.twilio.com/v1/Services/{service_sid}/Documents/{document_sid}/Permissions/{identity}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Documents/{document_sid}/Permissions/{identity}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_documents_document_sid_permissions_identity(
    service_sid: str,
    document_sid: str,
    identity: str,
    twilio_credentials: "TwilioCredentials",
    manage: bool = None,
    read: bool = None,
    write: bool = None,
) -> Dict[str, Any]:
    """
    Update an identity's access to a specific Sync Document.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        document_sid:
            Document sid used in formatting the endpoint URL.
        identity:
            Identity used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        manage:
            Whether the identity can delete the Sync Document. Default value is
            `false`.
        read:
            Whether the identity can read the Sync Document. Default value is
            `false`.
        write:
            Whether the identity can update the Sync Document. Default value is
            `false`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Documents/{document_sid}/Permissions/{identity}?](
    https://sync.twilio.com/v1/Services/{service_sid}/Documents/{document_sid}/Permissions/{identity}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Documents/{document_sid}/Permissions/{identity}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "manage": manage,
        "read": read,
        "write": write,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_service_sid_documents_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Documents/{sid}?](
    https://sync.twilio.com/v1/Services/{service_sid}/Documents/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Documents/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_documents_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Documents/{sid}?](
    https://sync.twilio.com/v1/Services/{service_sid}/Documents/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Documents/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_documents_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    if_match: str = None,
    data: str = None,
    ttl: int = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        if_match:
            The If-Match HTTP request header.
        data:
            A JSON string that represents an arbitrary, schema-less object that the
            Sync Document stores. Can be up to 16 KiB in length.
        ttl:
            How long, [in seconds](https://www.twilio.com/docs/sync/limits
            sync-payload-limits), before the Sync Document expires and
            is deleted (time-to-live).

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Documents/{sid}?&if_match=%s](
    https://sync.twilio.com/v1/Services/{service_sid}/Documents/{sid}?&if_match=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Documents/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "if_match": if_match,
    }

    data = {
        "data": data,
        "ttl": ttl,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        params=params,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_service_sid_lists(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Lists?&page_size=%s](
    https://sync.twilio.com/v1/Services/{service_sid}/Lists?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Lists"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_lists(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    collection_ttl: int = None,
    ttl: int = None,
    unique_name: str = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        collection_ttl:
            How long, [in seconds](https://www.twilio.com/docs/sync/limits
            sync-payload-limits), before the Sync List expires (time-to-
            live) and is deleted.
        ttl:
            Alias for collection_ttl. If both are provided, this value is ignored.
        unique_name:
            An application-defined string that uniquely identifies the resource.
            This value must be unique within its Service and it can be
            up to 320 characters long. The `unique_name` value can be
            used as an alternative to the `sid` in the URL path to
            address the resource.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Lists?](
    https://sync.twilio.com/v1/Services/{service_sid}/Lists?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Lists"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "collection_ttl": collection_ttl,
        "ttl": ttl,
        "unique_name": unique_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_service_sid_lists_list_sid_items(
    service_sid: str,
    list_sid: str,
    twilio_credentials: "TwilioCredentials",
    order: str = None,
    from_: str = None,
    bounds: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        list_sid:
            List sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        order:
            How to order the List Items returned by their `index` value. Can be:
            `asc` (ascending) or `desc` (descending) and the default is
            ascending.
        from_:
            The `index` of the first Sync List Item resource to read. See also
            `bounds`.
        bounds:
            Whether to include the List Item referenced by the `from` parameter. Can
            be: `inclusive` to include the List Item referenced by the
            `from` parameter or `exclusive` to start with the next List
            Item. The default value is `inclusive`.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Lists/{list_sid}/Items?&order=%s&from_=%s&bounds=%s&page_size=%s](
    https://sync.twilio.com/v1/Services/{service_sid}/Lists/{list_sid}/Items?&order=%s&from_=%s&bounds=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Lists/{list_sid}/Items"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "order": order,
        "from_": from_,
        "bounds": bounds,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_lists_list_sid_items(
    service_sid: str,
    list_sid: str,
    twilio_credentials: "TwilioCredentials",
    collection_ttl: int = None,
    data: str = None,
    item_ttl: int = None,
    ttl: int = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        list_sid:
            List sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        collection_ttl:
            How long, [in seconds](https://www.twilio.com/docs/sync/limits
            sync-payload-limits), before the List Item's parent Sync
            List expires (time-to-live) and is deleted.
        data:
            A JSON string that represents an arbitrary, schema-less object that the
            List Item stores. Can be up to 16 KiB in length.
        item_ttl:
            How long, [in seconds](https://www.twilio.com/docs/sync/limits
            sync-payload-limits), before the List Item expires (time-to-
            live) and is deleted.
        ttl:
            An alias for `item_ttl`. If both parameters are provided, this value is
            ignored.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Lists/{list_sid}/Items?](
    https://sync.twilio.com/v1/Services/{service_sid}/Lists/{list_sid}/Items?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Lists/{list_sid}/Items"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "collection_ttl": collection_ttl,
        "data": data,
        "item_ttl": item_ttl,
        "ttl": ttl,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_service_sid_lists_list_sid_items_index(
    service_sid: str,
    list_sid: str,
    index: str,
    twilio_credentials: "TwilioCredentials",
    if_match: str = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        list_sid:
            List sid used in formatting the endpoint URL.
        index:
            Index used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        if_match:
            If provided, applies this mutation if (and only if) the “revision” field
            of this [map item] matches the provided value. This matches
            the semantics of (and is implemented with) the HTTP [If-
            Match header](https://developer.mozilla.org/en-
            US/docs/Web/HTTP/Headers/If-Match).

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Lists/{list_sid}/Items/{index}?&if_match=%s](
    https://sync.twilio.com/v1/Services/{service_sid}/Lists/{list_sid}/Items/{index}?&if_match=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Lists/{list_sid}/Items/{index}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    params = {
        "if_match": if_match,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_lists_list_sid_items_index(
    service_sid: str,
    list_sid: str,
    index: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        list_sid:
            List sid used in formatting the endpoint URL.
        index:
            Index used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Lists/{list_sid}/Items/{index}?](
    https://sync.twilio.com/v1/Services/{service_sid}/Lists/{list_sid}/Items/{index}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Lists/{list_sid}/Items/{index}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_lists_list_sid_items_index(
    service_sid: str,
    list_sid: str,
    index: str,
    twilio_credentials: "TwilioCredentials",
    if_match: str = None,
    collection_ttl: int = None,
    data: str = None,
    item_ttl: int = None,
    ttl: int = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        list_sid:
            List sid used in formatting the endpoint URL.
        index:
            Index used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        if_match:
            If provided, applies this mutation if (and only if) the “revision” field
            of this [map item] matches the provided value. This matches
            the semantics of (and is implemented with) the HTTP [If-
            Match header](https://developer.mozilla.org/en-
            US/docs/Web/HTTP/Headers/If-Match).
        collection_ttl:
            How long, [in seconds](https://www.twilio.com/docs/sync/limits
            sync-payload-limits), before the List Item's parent Sync
            List expires (time-to-live) and is deleted. This parameter
            can only be used when the List Item's `data` or `ttl` is
            updated in the same request.
        data:
            A JSON string that represents an arbitrary, schema-less object that the
            List Item stores. Can be up to 16 KiB in length.
        item_ttl:
            How long, [in seconds](https://www.twilio.com/docs/sync/limits
            sync-payload-limits), before the List Item expires (time-to-
            live) and is deleted.
        ttl:
            An alias for `item_ttl`. If both parameters are provided, this value is
            ignored.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Lists/{list_sid}/Items/{index}?&if_match=%s](
    https://sync.twilio.com/v1/Services/{service_sid}/Lists/{list_sid}/Items/{index}?&if_match=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Lists/{list_sid}/Items/{index}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "if_match": if_match,
    }

    data = {
        "collection_ttl": collection_ttl,
        "data": data,
        "item_ttl": item_ttl,
        "ttl": ttl,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        params=params,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_service_sid_lists_list_sid_permissions(
    service_sid: str,
    list_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Permissions applying to a Sync List.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        list_sid:
            List sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Lists/{list_sid}/Permissions?&page_size=%s](
    https://sync.twilio.com/v1/Services/{service_sid}/Lists/{list_sid}/Permissions?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Lists/{list_sid}/Permissions"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def delete_v1_services_service_sid_lists_list_sid_permissions_identity(
    service_sid: str,
    list_sid: str,
    identity: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete a specific Sync List Permission.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        list_sid:
            List sid used in formatting the endpoint URL.
        identity:
            Identity used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Lists/{list_sid}/Permissions/{identity}?](
    https://sync.twilio.com/v1/Services/{service_sid}/Lists/{list_sid}/Permissions/{identity}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Lists/{list_sid}/Permissions/{identity}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_lists_list_sid_permissions_identity(
    service_sid: str,
    list_sid: str,
    identity: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a specific Sync List Permission.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        list_sid:
            List sid used in formatting the endpoint URL.
        identity:
            Identity used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Lists/{list_sid}/Permissions/{identity}?](
    https://sync.twilio.com/v1/Services/{service_sid}/Lists/{list_sid}/Permissions/{identity}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Lists/{list_sid}/Permissions/{identity}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_lists_list_sid_permissions_identity(
    service_sid: str,
    list_sid: str,
    identity: str,
    twilio_credentials: "TwilioCredentials",
    manage: bool = None,
    read: bool = None,
    write: bool = None,
) -> Dict[str, Any]:
    """
    Update an identity's access to a specific Sync List.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        list_sid:
            List sid used in formatting the endpoint URL.
        identity:
            Identity used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        manage:
            Whether the identity can delete the Sync List. Default value is `false`.
        read:
            Whether the identity can read the Sync List and its Items. Default value
            is `false`.
        write:
            Whether the identity can create, update, and delete Items in the Sync
            List. Default value is `false`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Lists/{list_sid}/Permissions/{identity}?](
    https://sync.twilio.com/v1/Services/{service_sid}/Lists/{list_sid}/Permissions/{identity}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Lists/{list_sid}/Permissions/{identity}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "manage": manage,
        "read": read,
        "write": write,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_service_sid_lists_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Lists/{sid}?](
    https://sync.twilio.com/v1/Services/{service_sid}/Lists/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Lists/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_lists_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Lists/{sid}?](
    https://sync.twilio.com/v1/Services/{service_sid}/Lists/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Lists/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_lists_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    collection_ttl: int = None,
    ttl: int = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        collection_ttl:
            How long, [in seconds](https://www.twilio.com/docs/sync/limits
            sync-payload-limits), before the Sync List expires (time-to-
            live) and is deleted.
        ttl:
            An alias for `collection_ttl`. If both are provided, this value is
            ignored.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Lists/{sid}?](
    https://sync.twilio.com/v1/Services/{service_sid}/Lists/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Lists/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "collection_ttl": collection_ttl,
        "ttl": ttl,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_service_sid_maps(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Maps?&page_size=%s](
    https://sync.twilio.com/v1/Services/{service_sid}/Maps?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Maps"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_maps(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    collection_ttl: int = None,
    ttl: int = None,
    unique_name: str = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        collection_ttl:
            How long, [in seconds](https://www.twilio.com/docs/sync/limits
            sync-payload-limits), before the Sync Map expires (time-to-
            live) and is deleted.
        ttl:
            An alias for `collection_ttl`. If both parameters are provided, this
            value is ignored.
        unique_name:
            An application-defined string that uniquely identifies the resource. It
            can be used as an alternative to the `sid` in the URL path
            to address the resource.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Maps?](
    https://sync.twilio.com/v1/Services/{service_sid}/Maps?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Maps"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "collection_ttl": collection_ttl,
        "ttl": ttl,
        "unique_name": unique_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_service_sid_maps_map_sid_items(
    service_sid: str,
    map_sid: str,
    twilio_credentials: "TwilioCredentials",
    order: str = None,
    from_: str = None,
    bounds: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        map_sid:
            Map sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        order:
            How to order the Map Items returned by their `key` value. Can be: `asc`
            (ascending) or `desc` (descending) and the default is
            ascending. Map Items are [ordered
            lexicographically](https://en.wikipedia.org/wiki/Lexicographical_order)
            by Item key.
        from_:
            The `key` of the first Sync Map Item resource to read. See also
            `bounds`.
        bounds:
            Whether to include the Map Item referenced by the `from` parameter. Can
            be: `inclusive` to include the Map Item referenced by the
            `from` parameter or `exclusive` to start with the next Map
            Item. The default value is `inclusive`.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Maps/{map_sid}/Items?&order=%s&from_=%s&bounds=%s&page_size=%s](
    https://sync.twilio.com/v1/Services/{service_sid}/Maps/{map_sid}/Items?&order=%s&from_=%s&bounds=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Maps/{map_sid}/Items"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "order": order,
        "from_": from_,
        "bounds": bounds,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_maps_map_sid_items(
    service_sid: str,
    map_sid: str,
    twilio_credentials: "TwilioCredentials",
    collection_ttl: int = None,
    data: str = None,
    item_ttl: int = None,
    key: str = None,
    ttl: int = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        map_sid:
            Map sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        collection_ttl:
            How long, [in seconds](https://www.twilio.com/docs/sync/limits
            sync-payload-limits), before the Map Item's parent Sync Map
            expires (time-to-live) and is deleted.
        data:
            A JSON string that represents an arbitrary, schema-less object that the
            Map Item stores. Can be up to 16 KiB in length.
        item_ttl:
            How long, [in seconds](https://www.twilio.com/docs/sync/limits
            sync-payload-limits), before the Map Item expires (time-to-
            live) and is deleted.
        key:
            The unique, user-defined key for the Map Item. Can be up to 320
            characters long.
        ttl:
            An alias for `item_ttl`. If both parameters are provided, this value is
            ignored.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Maps/{map_sid}/Items?](
    https://sync.twilio.com/v1/Services/{service_sid}/Maps/{map_sid}/Items?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Maps/{map_sid}/Items"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "collection_ttl": collection_ttl,
        "data": data,
        "item_ttl": item_ttl,
        "key": key,
        "ttl": ttl,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_service_sid_maps_map_sid_items_key(
    service_sid: str,
    map_sid: str,
    key: str,
    twilio_credentials: "TwilioCredentials",
    if_match: str = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        map_sid:
            Map sid used in formatting the endpoint URL.
        key:
            Key used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        if_match:
            If provided, applies this mutation if (and only if) the “revision” field
            of this [map item] matches the provided value. This matches
            the semantics of (and is implemented with) the HTTP [If-
            Match header](https://developer.mozilla.org/en-
            US/docs/Web/HTTP/Headers/If-Match).

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Maps/{map_sid}/Items/{key}?&if_match=%s](
    https://sync.twilio.com/v1/Services/{service_sid}/Maps/{map_sid}/Items/{key}?&if_match=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Maps/{map_sid}/Items/{key}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    params = {
        "if_match": if_match,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_maps_map_sid_items_key(
    service_sid: str,
    map_sid: str,
    key: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        map_sid:
            Map sid used in formatting the endpoint URL.
        key:
            Key used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Maps/{map_sid}/Items/{key}?](
    https://sync.twilio.com/v1/Services/{service_sid}/Maps/{map_sid}/Items/{key}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Maps/{map_sid}/Items/{key}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_maps_map_sid_items_key(
    service_sid: str,
    map_sid: str,
    key: str,
    twilio_credentials: "TwilioCredentials",
    if_match: str = None,
    collection_ttl: int = None,
    data: str = None,
    item_ttl: int = None,
    ttl: int = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        map_sid:
            Map sid used in formatting the endpoint URL.
        key:
            Key used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        if_match:
            If provided, applies this mutation if (and only if) the “revision” field
            of this [map item] matches the provided value. This matches
            the semantics of (and is implemented with) the HTTP [If-
            Match header](https://developer.mozilla.org/en-
            US/docs/Web/HTTP/Headers/If-Match).
        collection_ttl:
            How long, [in seconds](https://www.twilio.com/docs/sync/limits
            sync-payload-limits), before the Map Item's parent Sync Map
            expires (time-to-live) and is deleted. This parameter can
            only be used when the Map Item's `data` or `ttl` is updated
            in the same request.
        data:
            A JSON string that represents an arbitrary, schema-less object that the
            Map Item stores. Can be up to 16 KiB in length.
        item_ttl:
            How long, [in seconds](https://www.twilio.com/docs/sync/limits
            sync-payload-limits), before the Map Item expires (time-to-
            live) and is deleted.
        ttl:
            An alias for `item_ttl`. If both parameters are provided, this value is
            ignored.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Maps/{map_sid}/Items/{key}?&if_match=%s](
    https://sync.twilio.com/v1/Services/{service_sid}/Maps/{map_sid}/Items/{key}?&if_match=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Maps/{map_sid}/Items/{key}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "if_match": if_match,
    }

    data = {
        "collection_ttl": collection_ttl,
        "data": data,
        "item_ttl": item_ttl,
        "ttl": ttl,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        params=params,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_service_sid_maps_map_sid_permissions(
    service_sid: str,
    map_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Permissions applying to a Sync Map.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        map_sid:
            Map sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Maps/{map_sid}/Permissions?&page_size=%s](
    https://sync.twilio.com/v1/Services/{service_sid}/Maps/{map_sid}/Permissions?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Maps/{map_sid}/Permissions"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def delete_v1_services_service_sid_maps_map_sid_permissions_identity(
    service_sid: str,
    map_sid: str,
    identity: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete a specific Sync Map Permission.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        map_sid:
            Map sid used in formatting the endpoint URL.
        identity:
            Identity used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Maps/{map_sid}/Permissions/{identity}?](
    https://sync.twilio.com/v1/Services/{service_sid}/Maps/{map_sid}/Permissions/{identity}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Maps/{map_sid}/Permissions/{identity}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_maps_map_sid_permissions_identity(
    service_sid: str,
    map_sid: str,
    identity: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a specific Sync Map Permission.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        map_sid:
            Map sid used in formatting the endpoint URL.
        identity:
            Identity used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Maps/{map_sid}/Permissions/{identity}?](
    https://sync.twilio.com/v1/Services/{service_sid}/Maps/{map_sid}/Permissions/{identity}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Maps/{map_sid}/Permissions/{identity}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_maps_map_sid_permissions_identity(
    service_sid: str,
    map_sid: str,
    identity: str,
    twilio_credentials: "TwilioCredentials",
    manage: bool = None,
    read: bool = None,
    write: bool = None,
) -> Dict[str, Any]:
    """
    Update an identity's access to a specific Sync Map.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        map_sid:
            Map sid used in formatting the endpoint URL.
        identity:
            Identity used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        manage:
            Whether the identity can delete the Sync Map. Default value is `false`.
        read:
            Whether the identity can read the Sync Map and its Items. Default value
            is `false`.
        write:
            Whether the identity can create, update, and delete Items in the Sync
            Map. Default value is `false`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Maps/{map_sid}/Permissions/{identity}?](
    https://sync.twilio.com/v1/Services/{service_sid}/Maps/{map_sid}/Permissions/{identity}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Maps/{map_sid}/Permissions/{identity}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "manage": manage,
        "read": read,
        "write": write,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_service_sid_maps_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Maps/{sid}?](
    https://sync.twilio.com/v1/Services/{service_sid}/Maps/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Maps/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_maps_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Maps/{sid}?](
    https://sync.twilio.com/v1/Services/{service_sid}/Maps/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Maps/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_maps_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    collection_ttl: int = None,
    ttl: int = None,
) -> Dict[str, Any]:
    """


    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        collection_ttl:
            How long, [in seconds](https://www.twilio.com/docs/sync/limits
            sync-payload-limits), before the Sync Map expires (time-to-
            live) and is deleted.
        ttl:
            An alias for `collection_ttl`. If both parameters are provided, this
            value is ignored.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Maps/{sid}?](
    https://sync.twilio.com/v1/Services/{service_sid}/Maps/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Maps/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "collection_ttl": collection_ttl,
        "ttl": ttl,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_services_service_sid_streams(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Streams in a Service Instance.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Streams?&page_size=%s](
    https://sync.twilio.com/v1/Services/{service_sid}/Streams?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Streams"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_streams(
    service_sid: str,
    twilio_credentials: "TwilioCredentials",
    ttl: int = None,
    unique_name: str = None,
) -> Dict[str, Any]:
    """
    Create a new Stream.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        ttl:
            How long, [in seconds](https://www.twilio.com/docs/sync/limits
            sync-payload-limits), before the Stream expires and is
            deleted (time-to-live).
        unique_name:
            An application-defined string that uniquely identifies the resource.
            This value must be unique within its Service and it can be
            up to 320 characters long. The `unique_name` value can be
            used as an alternative to the `sid` in the URL path to
            address the resource.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Streams?](
    https://sync.twilio.com/v1/Services/{service_sid}/Streams?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Streams"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "ttl": ttl,
        "unique_name": unique_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_service_sid_streams_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete a specific Stream.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Streams/{sid}?](
    https://sync.twilio.com/v1/Services/{service_sid}/Streams/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Streams/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_service_sid_streams_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a specific Stream.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Streams/{sid}?](
    https://sync.twilio.com/v1/Services/{service_sid}/Streams/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Streams/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_service_sid_streams_sid(
    service_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    ttl: int = None,
) -> Dict[str, Any]:
    """
    Update a specific Stream.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        ttl:
            How long, [in seconds](https://www.twilio.com/docs/sync/limits
            sync-payload-limits), before the Stream expires and is
            deleted (time-to-live).

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Streams/{sid}?](
    https://sync.twilio.com/v1/Services/{service_sid}/Streams/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Streams/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "ttl": ttl,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def post_v1_services_service_sid_streams_stream_sid_messages(
    service_sid: str,
    stream_sid: str,
    twilio_credentials: "TwilioCredentials",
    data: str = None,
) -> Dict[str, Any]:
    """
    Create a new Stream Message.

    Args:
        service_sid:
            Service sid used in formatting the endpoint URL.
        stream_sid:
            Stream sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        data:
            A JSON string that represents an arbitrary, schema-less object that
            makes up the Stream Message body. Can be up to 4 KiB in
            length.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{service_sid}/Streams/{stream_sid}/Messages?](
    https://sync.twilio.com/v1/Services/{service_sid}/Streams/{stream_sid}/Messages?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{service_sid}/Streams/{stream_sid}/Messages"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "data": data,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_services_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{sid}?](
    https://sync.twilio.com/v1/Services/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_services_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{sid}?](
    https://sync.twilio.com/v1/Services/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_services_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    acl_enabled: bool = None,
    friendly_name: str = None,
    reachability_debouncing_enabled: bool = None,
    reachability_debouncing_window: int = None,
    reachability_webhooks_enabled: bool = None,
    webhook_url: str = None,
    webhooks_from_rest_enabled: bool = None,
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        acl_enabled:
            Whether token identities in the Service must be granted access to Sync
            objects by using the
            [Permissions](https://www.twilio.com/docs/sync/api/sync-
            permissions) resource.
        friendly_name:
            A string that you assign to describe the resource.
        reachability_debouncing_enabled:
            Whether every `endpoint_disconnected` event should occur after a
            configurable delay. The default is `false`, where the
            `endpoint_disconnected` event occurs immediately after
            disconnection. When `true`, intervening reconnections can
            prevent the `endpoint_disconnected` event.
        reachability_debouncing_window:
            The reachability event delay in milliseconds if
            `reachability_debouncing_enabled` = `true`.  Must be between
            1,000 and 30,000 and defaults to 5,000. This is the number
            of milliseconds after the last running client disconnects,
            and a Sync identity is declared offline, before the webhook
            is called if all endpoints remain offline. A reconnection
            from the same identity by any endpoint during this interval
            prevents the webhook from being called.
        reachability_webhooks_enabled:
            Whether the service instance should call `webhook_url` when client
            endpoints connect to Sync. The default is `false`.
        webhook_url:
            The URL we should call when Sync objects are manipulated.
        webhooks_from_rest_enabled:
            Whether the Service instance should call `webhook_url` when the REST API
            is used to update Sync objects. The default is `false`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://sync.twilio.com/v1/Services/{sid}?](
    https://sync.twilio.com/v1/Services/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://sync.twilio.com/v1/Services/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "acl_enabled": acl_enabled,
        "friendly_name": friendly_name,
        "reachability_debouncing_enabled": reachability_debouncing_enabled,
        "reachability_debouncing_window": reachability_debouncing_window,
        "reachability_webhooks_enabled": reachability_webhooks_enabled,
        "webhook_url": webhook_url,
        "webhooks_from_rest_enabled": webhooks_from_rest_enabled,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_workspaces(
    twilio_credentials: "TwilioCredentials",
    friendly_name: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        friendly_name:
            The `friendly_name` of the Workspace resources to read. For example
            `Customer Support` or `2014 Election Campaign`.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces?&friendly_name=%s&page_size=%s](
    https://taskrouter.twilio.com/v1/Workspaces?&friendly_name=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://taskrouter.twilio.com/v1/Workspaces"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "friendly_name": friendly_name,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_workspaces(
    twilio_credentials: "TwilioCredentials",
    event_callback_url: str = None,
    events_filter: str = None,
    friendly_name: str = None,
    multi_task_enabled: bool = None,
    prioritize_queue_order: str = None,
    template: str = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        event_callback_url:
            The URL we should call when an event occurs. If provided, the Workspace
            will publish events to this URL, for example, to collect
            data for reporting. See [Workspace
            Events](https://www.twilio.com/docs/taskrouter/api/event)
            for more information. This parameter supports Twilio's
            [Webhooks (HTTP callbacks) Connection
            Overrides](https://www.twilio.com/docs/usage/webhooks/webhooks-
            connection-overrides).
        events_filter:
            The list of Workspace events for which to call event_callback_url. For
            example, if `EventsFilter=task.created, task.canceled,
            worker.activity.update`, then TaskRouter will call
            event_callback_url only when a task is created, canceled, or
            a Worker activity is updated.
        friendly_name:
            A descriptive string that you create to describe the Workspace resource.
            It can be up to 64 characters long. For example: `Customer
            Support` or `2014 Election Campaign`.
        multi_task_enabled:
            Whether to enable multi-tasking. Can be: `true` to enable multi-tasking,
            or `false` to disable it. However, all workspaces should be
            created as multi-tasking. The default is `true`. Multi-
            tasking allows Workers to handle multiple Tasks
            simultaneously. When enabled (`true`), each Worker can
            receive parallel reservations up to the per-channel maximums
            defined in the Workers section. In single-tasking mode
            (legacy mode), each Worker will only receive a new
            reservation when the previous task is completed. Learn more
            at
            [Multitasking](https://www.twilio.com/docs/taskrouter/multitasking).
        prioritize_queue_order:
            The type of TaskQueue to prioritize when Workers are receiving Tasks
            from both types of TaskQueues. Can be: `LIFO` or `FIFO` and
            the default is `FIFO`. For more information, see [Queue
            Ordering](https://www.twilio.com/docs/taskrouter/queue-
            ordering-last-first-out-lifo).
        template:
            An available template name. Can be: `NONE` or `FIFO` and the default is
            `NONE`. Pre-configures the Workspace with the Workflow and
            Activities specified in the template. `NONE` will create a
            Workspace with only a set of default activities. `FIFO` will
            configure TaskRouter with a set of default activities and a
            single TaskQueue for first-in, first-out distribution, which
            can be useful when you are getting started with TaskRouter.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces?](
    https://taskrouter.twilio.com/v1/Workspaces?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://taskrouter.twilio.com/v1/Workspaces"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "event_callback_url": event_callback_url,
        "events_filter": events_filter,
        "friendly_name": friendly_name,
        "multi_task_enabled": multi_task_enabled,
        "prioritize_queue_order": prioritize_queue_order,
        "template": template,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_workspaces_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{sid}?](
    https://taskrouter.twilio.com/v1/Workspaces/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_workspaces_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{sid}?](
    https://taskrouter.twilio.com/v1/Workspaces/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_workspaces_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    default_activity_sid: str = None,
    event_callback_url: str = None,
    events_filter: str = None,
    friendly_name: str = None,
    multi_task_enabled: bool = None,
    prioritize_queue_order: str = None,
    timeout_activity_sid: str = None,
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        default_activity_sid:
            The SID of the Activity that will be used when new Workers are created
            in the Workspace.
        event_callback_url:
            The URL we should call when an event occurs. See [Workspace
            Events](https://www.twilio.com/docs/taskrouter/api/event)
            for more information. This parameter supports Twilio's
            [Webhooks (HTTP callbacks) Connection
            Overrides](https://www.twilio.com/docs/usage/webhooks/webhooks-
            connection-overrides).
        events_filter:
            The list of Workspace events for which to call event_callback_url. For
            example if
            `EventsFilter=task.created,task.canceled,worker.activity.update`,
            then TaskRouter will call event_callback_url only when a
            task is created, canceled, or a Worker activity is updated.
        friendly_name:
            A descriptive string that you create to describe the Workspace resource.
            For example: `Sales Call Center` or `Customer Support Team`.
        multi_task_enabled:
            Whether to enable multi-tasking. Can be: `true` to enable multi-tasking,
            or `false` to disable it. However, all workspaces should be
            maintained as multi-tasking. There is no default when
            omitting this parameter. A multi-tasking Workspace can't be
            updated to single-tasking unless it is not a Flex Project
            and another (legacy) single-tasking Workspace exists. Multi-
            tasking allows Workers to handle multiple Tasks
            simultaneously. In multi-tasking mode, each Worker can
            receive parallel reservations up to the per-channel maximums
            defined in the Workers section. In single-tasking mode
            (legacy mode), each Worker will only receive a new
            reservation when the previous task is completed. Learn more
            at
            [Multitasking](https://www.twilio.com/docs/taskrouter/multitasking).
        prioritize_queue_order:
            The type of TaskQueue to prioritize when Workers are receiving Tasks
            from both types of TaskQueues. Can be: `LIFO` or `FIFO`. For
            more information, see [Queue
            Ordering](https://www.twilio.com/docs/taskrouter/queue-
            ordering-last-first-out-lifo).
        timeout_activity_sid:
            The SID of the Activity that will be assigned to a Worker when a Task
            reservation times out without a response.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{sid}?](
    https://taskrouter.twilio.com/v1/Workspaces/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "default_activity_sid": default_activity_sid,
        "event_callback_url": event_callback_url,
        "events_filter": events_filter,
        "friendly_name": friendly_name,
        "multi_task_enabled": multi_task_enabled,
        "prioritize_queue_order": prioritize_queue_order,
        "timeout_activity_sid": timeout_activity_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_workspaces_workspace_sid_activities(
    workspace_sid: str,
    twilio_credentials: "TwilioCredentials",
    friendly_name: str = None,
    available: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        friendly_name:
            The `friendly_name` of the Activity resources to read.
        available:
            Whether return only Activity resources that are available or
            unavailable. A value of `true` returns only available
            activities. Values of '1' or `yes` also indicate `true`. All
            other values represent `false` and return activities that
            are unavailable.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Activities?&friendly_name=%s&available=%s&page_size=%s](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Activities?&friendly_name=%s&available=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Activities"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "friendly_name": friendly_name,
        "available": available,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_workspaces_workspace_sid_activities(
    workspace_sid: str,
    twilio_credentials: "TwilioCredentials",
    available: bool = None,
    friendly_name: str = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        available:
            Whether the Worker should be eligible to receive a Task when it occupies
            the Activity. A value of `true`, `1`, or `yes` specifies the
            Activity is available. All other values specify that it is
            not. The value cannot be changed after the Activity is
            created.
        friendly_name:
            A descriptive string that you create to describe the Activity resource.
            It can be up to 64 characters long. These names are used to
            calculate and expose statistics about Workers, and provide
            visibility into the state of each Worker. Examples of
            friendly names include: `on-call`, `break`, and `email`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Activities?](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Activities?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Activities"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "available": available,
        "friendly_name": friendly_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_workspaces_workspace_sid_activities_sid(
    workspace_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Activities/{sid}?](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Activities/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Activities/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_workspaces_workspace_sid_activities_sid(
    workspace_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Activities/{sid}?](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Activities/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Activities/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_workspaces_workspace_sid_activities_sid(
    workspace_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    friendly_name: str = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        friendly_name:
            A descriptive string that you create to describe the Activity resource.
            It can be up to 64 characters long. These names are used to
            calculate and expose statistics about Workers, and provide
            visibility into the state of each Worker. Examples of
            friendly names include: `on-call`, `break`, and `email`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Activities/{sid}?](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Activities/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Activities/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "friendly_name": friendly_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_workspaces_workspace_sid_cumulative_statistics(
    workspace_sid: str,
    twilio_credentials: "TwilioCredentials",
    end_date: str = None,
    minutes: int = None,
    start_date: str = None,
    task_channel: str = None,
    split_by_wait_time: str = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        end_date:
            Only include usage that occurred on or before this date, specified in
            GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
            date-time.
        minutes:
            Only calculate statistics since this many minutes in the past. The
            default 15 minutes. This is helpful for displaying
            statistics for the last 15 minutes, 240 minutes (4 hours),
            and 480 minutes (8 hours) to see trends.
        start_date:
            Only calculate statistics from this date and time and later, specified
            in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
            format.
        task_channel:
            Only calculate cumulative statistics on this TaskChannel. Can be the
            TaskChannel's SID or its `unique_name`, such as `voice`,
            `sms`, or `default`.
        split_by_wait_time:
            A comma separated list of values that describes the thresholds, in
            seconds, to calculate statistics on. For each threshold
            specified, the number of Tasks canceled and reservations
            accepted above and below the specified thresholds in seconds
            are computed. For example, `5,30` would show splits of Tasks
            that were canceled or accepted before and after 5 seconds
            and before and after 30 seconds. This can be used to show
            short abandoned Tasks or Tasks that failed to meet an SLA.
            TaskRouter will calculate statistics on up to 10,000 Tasks
            for any given threshold.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/CumulativeStatistics?&end_date=%s&minutes=%s&start_date=%s&task_channel=%s&split_by_wait_time=%s](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/CumulativeStatistics?&end_date=%s&minutes=%s&start_date=%s&task_channel=%s&split_by_wait_time=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/CumulativeStatistics"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "end_date": end_date,
        "minutes": minutes,
        "start_date": start_date,
        "task_channel": task_channel,
        "split_by_wait_time": split_by_wait_time,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_workspaces_workspace_sid_events(
    workspace_sid: str,
    twilio_credentials: "TwilioCredentials",
    end_date: str = None,
    event_type: str = None,
    minutes: int = None,
    reservation_sid: str = None,
    start_date: str = None,
    task_queue_sid: str = None,
    task_sid: str = None,
    worker_sid: str = None,
    workflow_sid: str = None,
    task_channel: str = None,
    sid: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        end_date:
            Only include Events that occurred on or before this date, specified in
            GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
            date-time.
        event_type:
            The type of Events to read. Returns only Events of the type specified.
        minutes:
            The period of events to read in minutes. Returns only Events that
            occurred since this many minutes in the past. The default is
            `15` minutes. Task Attributes for Events occuring more
            43,200 minutes ago will be redacted.
        reservation_sid:
            The SID of the Reservation with the Events to read. Returns only Events
            that pertain to the specified Reservation.
        start_date:
            Only include Events from on or after this date and time, specified in
            [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format.
            Task Attributes for Events older than 30 days will be
            redacted.
        task_queue_sid:
            The SID of the TaskQueue with the Events to read. Returns only the
            Events that pertain to the specified TaskQueue.
        task_sid:
            The SID of the Task with the Events to read. Returns only the Events
            that pertain to the specified Task.
        worker_sid:
            The SID of the Worker with the Events to read. Returns only the Events
            that pertain to the specified Worker.
        workflow_sid:
            The SID of the Workflow with the Events to read. Returns only the Events
            that pertain to the specified Workflow.
        task_channel:
            The TaskChannel with the Events to read. Returns only the Events that
            pertain to the specified TaskChannel.
        sid:
            The SID of the Event resource to read.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Events?&end_date=%s&event_type=%s&minutes=%s&reservation_sid=%s&start_date=%s&task_queue_sid=%s&task_sid=%s&worker_sid=%s&workflow_sid=%s&task_channel=%s&sid=%s&page_size=%s](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Events?&end_date=%s&event_type=%s&minutes=%s&reservation_sid=%s&start_date=%s&task_queue_sid=%s&task_sid=%s&worker_sid=%s&workflow_sid=%s&task_channel=%s&sid=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Events"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "end_date": end_date,
        "event_type": event_type,
        "minutes": minutes,
        "reservation_sid": reservation_sid,
        "start_date": start_date,
        "task_queue_sid": task_queue_sid,
        "task_sid": task_sid,
        "worker_sid": worker_sid,
        "workflow_sid": workflow_sid,
        "task_channel": task_channel,
        "sid": sid,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_workspaces_workspace_sid_events_sid(
    workspace_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Events/{sid}?](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Events/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Events/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_workspaces_workspace_sid_real_time_statistics(
    workspace_sid: str,
    twilio_credentials: "TwilioCredentials",
    task_channel: str = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        task_channel:
            Only calculate real-time statistics on this TaskChannel. Can be the
            TaskChannel's SID or its `unique_name`, such as `voice`,
            `sms`, or `default`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/RealTimeStatistics?&task_channel=%s](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/RealTimeStatistics?&task_channel=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/RealTimeStatistics"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "task_channel": task_channel,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_workspaces_workspace_sid_statistics(
    workspace_sid: str,
    twilio_credentials: "TwilioCredentials",
    minutes: int = None,
    start_date: str = None,
    end_date: str = None,
    task_channel: str = None,
    split_by_wait_time: str = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        minutes:
            Only calculate statistics since this many minutes in the past. The
            default 15 minutes. This is helpful for displaying
            statistics for the last 15 minutes, 240 minutes (4 hours),
            and 480 minutes (8 hours) to see trends.
        start_date:
            Only calculate statistics from this date and time and later, specified
            in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
            format.
        end_date:
            Only calculate statistics from this date and time and earlier, specified
            in GMT as an [ISO
            8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
        task_channel:
            Only calculate statistics on this TaskChannel. Can be the TaskChannel's
            SID or its `unique_name`, such as `voice`, `sms`, or
            `default`.
        split_by_wait_time:
            A comma separated list of values that describes the thresholds, in
            seconds, to calculate statistics on. For each threshold
            specified, the number of Tasks canceled and reservations
            accepted above and below the specified thresholds in seconds
            are computed. For example, `5,30` would show splits of Tasks
            that were canceled or accepted before and after 5 seconds
            and before and after 30 seconds. This can be used to show
            short abandoned Tasks or Tasks that failed to meet an SLA.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Statistics?&minutes=%s&start_date=%s&end_date=%s&task_channel=%s&split_by_wait_time=%s](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Statistics?&minutes=%s&start_date=%s&end_date=%s&task_channel=%s&split_by_wait_time=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Statistics"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "minutes": minutes,
        "start_date": start_date,
        "end_date": end_date,
        "task_channel": task_channel,
        "split_by_wait_time": split_by_wait_time,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_workspaces_workspace_sid_task_channels(
    workspace_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskChannels?&page_size=%s](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskChannels?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskChannels"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_workspaces_workspace_sid_task_channels(
    workspace_sid: str,
    twilio_credentials: "TwilioCredentials",
    channel_optimized_routing: bool = None,
    friendly_name: str = None,
    unique_name: str = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        channel_optimized_routing:
            Whether the Task Channel should prioritize Workers that have been idle.
            If `true`, Workers that have been idle the longest are
            prioritized.
        friendly_name:
            A descriptive string that you create to describe the Task Channel. It
            can be up to 64 characters long.
        unique_name:
            An application-defined string that uniquely identifies the Task Channel,
            such as `voice` or `sms`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskChannels?](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskChannels?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskChannels"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "channel_optimized_routing": channel_optimized_routing,
        "friendly_name": friendly_name,
        "unique_name": unique_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_workspaces_workspace_sid_task_channels_sid(
    workspace_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskChannels/{sid}?](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskChannels/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskChannels/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_workspaces_workspace_sid_task_channels_sid(
    workspace_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskChannels/{sid}?](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskChannels/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskChannels/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_workspaces_workspace_sid_task_channels_sid(
    workspace_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    channel_optimized_routing: bool = None,
    friendly_name: str = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        channel_optimized_routing:
            Whether the TaskChannel should prioritize Workers that have been idle.
            If `true`, Workers that have been idle the longest are
            prioritized.
        friendly_name:
            A descriptive string that you create to describe the Task Channel. It
            can be up to 64 characters long.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskChannels/{sid}?](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskChannels/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskChannels/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "channel_optimized_routing": channel_optimized_routing,
        "friendly_name": friendly_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_workspaces_workspace_sid_task_queues(
    workspace_sid: str,
    twilio_credentials: "TwilioCredentials",
    friendly_name: str = None,
    evaluate_worker_attributes: str = None,
    worker_sid: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        friendly_name:
            The `friendly_name` of the TaskQueue resources to read.
        evaluate_worker_attributes:
            The attributes of the Workers to read. Returns the TaskQueues with
            Workers that match the attributes specified in this
            parameter.
        worker_sid:
            The SID of the Worker with the TaskQueue resources to read.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskQueues?&friendly_name=%s&evaluate_worker_attributes=%s&worker_sid=%s&page_size=%s](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskQueues?&friendly_name=%s&evaluate_worker_attributes=%s&worker_sid=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskQueues"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "friendly_name": friendly_name,
        "evaluate_worker_attributes": evaluate_worker_attributes,
        "worker_sid": worker_sid,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_workspaces_workspace_sid_task_queues(
    workspace_sid: str,
    twilio_credentials: "TwilioCredentials",
    assignment_activity_sid: str = None,
    friendly_name: str = None,
    max_reserved_workers: int = None,
    reservation_activity_sid: str = None,
    target_workers: str = None,
    task_order: str = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        assignment_activity_sid:
            The SID of the Activity to assign Workers when a task is assigned to
            them.
        friendly_name:
            A descriptive string that you create to describe the TaskQueue. For
            example `Support-Tier 1`, `Sales`, or `Escalation`.
        max_reserved_workers:
            The maximum number of Workers to reserve for the assignment of a Task in
            the queue. Can be an integer between 1 and 50, inclusive and
            defaults to 1.
        reservation_activity_sid:
            The SID of the Activity to assign Workers when a task is reserved for
            them.
        target_workers:
            A string that describes the Worker selection criteria for any Tasks that
            enter the TaskQueue. For example, `'"language" ==
            "spanish"'`. The default value is `1==1`. If this value is
            empty, Tasks will wait in the TaskQueue until they are
            deleted or moved to another TaskQueue. For more information
            about Worker selection, see [Describing Worker selection
            criteria](https://www.twilio.com/docs/taskrouter/api/taskqueues
            target-workers).
        task_order:
            How Tasks will be assigned to Workers. Set this parameter to `LIFO` to
            assign most recently created Task first or FIFO to assign
            the oldest Task first. Default is `FIFO`. [Click
            here](https://www.twilio.com/docs/taskrouter/queue-ordering-
            last-first-out-lifo) to learn more.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskQueues?](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskQueues?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskQueues"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "assignment_activity_sid": assignment_activity_sid,
        "friendly_name": friendly_name,
        "max_reserved_workers": max_reserved_workers,
        "reservation_activity_sid": reservation_activity_sid,
        "target_workers": target_workers,
        "task_order": task_order,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_workspaces_workspace_sid_task_queues_statistics(
    workspace_sid: str,
    twilio_credentials: "TwilioCredentials",
    end_date: str = None,
    friendly_name: str = None,
    minutes: int = None,
    start_date: str = None,
    task_channel: str = None,
    split_by_wait_time: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        end_date:
            Only calculate statistics from this date and time and earlier, specified
            in GMT as an [ISO
            8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
        friendly_name:
            The `friendly_name` of the TaskQueue statistics to read.
        minutes:
            Only calculate statistics since this many minutes in the past. The
            default is 15 minutes.
        start_date:
            Only calculate statistics from this date and time and later, specified
            in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
            format.
        task_channel:
            Only calculate statistics on this TaskChannel. Can be the TaskChannel's
            SID or its `unique_name`, such as `voice`, `sms`, or
            `default`.
        split_by_wait_time:
            A comma separated list of values that describes the thresholds, in
            seconds, to calculate statistics on. For each threshold
            specified, the number of Tasks canceled and reservations
            accepted above and below the specified thresholds in seconds
            are computed.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskQueues/Statistics?&end_date=%s&friendly_name=%s&minutes=%s&start_date=%s&task_channel=%s&split_by_wait_time=%s&page_size=%s](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskQueues/Statistics?&end_date=%s&friendly_name=%s&minutes=%s&start_date=%s&task_channel=%s&split_by_wait_time=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskQueues/Statistics"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "end_date": end_date,
        "friendly_name": friendly_name,
        "minutes": minutes,
        "start_date": start_date,
        "task_channel": task_channel,
        "split_by_wait_time": split_by_wait_time,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def delete_v1_workspaces_workspace_sid_task_queues_sid(
    workspace_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskQueues/{sid}?](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskQueues/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskQueues/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_workspaces_workspace_sid_task_queues_sid(
    workspace_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskQueues/{sid}?](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskQueues/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskQueues/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_workspaces_workspace_sid_task_queues_sid(
    workspace_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    assignment_activity_sid: str = None,
    friendly_name: str = None,
    max_reserved_workers: int = None,
    reservation_activity_sid: str = None,
    target_workers: str = None,
    task_order: str = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        assignment_activity_sid:
            The SID of the Activity to assign Workers when a task is assigned for
            them.
        friendly_name:
            A descriptive string that you create to describe the TaskQueue. For
            example `Support-Tier 1`, `Sales`, or `Escalation`.
        max_reserved_workers:
            The maximum number of Workers to create reservations for the assignment
            of a task while in the queue. Maximum of 50.
        reservation_activity_sid:
            The SID of the Activity to assign Workers when a task is reserved for
            them.
        target_workers:
            A string describing the Worker selection criteria for any Tasks that
            enter the TaskQueue. For example '"language" == "spanish"'
            If no TargetWorkers parameter is provided, Tasks will wait
            in the queue until they are either deleted or moved to
            another queue. Additional examples on how to describing
            Worker selection criteria below.
        task_order:
            How Tasks will be assigned to Workers. Can be: `FIFO` or `LIFO` and the
            default is `FIFO`. Use `FIFO` to assign the oldest task
            first and `LIFO` to assign the most recent task first. For
            more information, see [Queue
            Ordering](https://www.twilio.com/docs/taskrouter/queue-
            ordering-last-first-out-lifo).

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskQueues/{sid}?](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskQueues/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskQueues/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "assignment_activity_sid": assignment_activity_sid,
        "friendly_name": friendly_name,
        "max_reserved_workers": max_reserved_workers,
        "reservation_activity_sid": reservation_activity_sid,
        "target_workers": target_workers,
        "task_order": task_order,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_workspaces_workspace_sid_task_queues_task_queue_sid_cumulative_statistics(
    workspace_sid: str,
    task_queue_sid: str,
    twilio_credentials: "TwilioCredentials",
    end_date: str = None,
    minutes: int = None,
    start_date: str = None,
    task_channel: str = None,
    split_by_wait_time: str = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        task_queue_sid:
            Task queue sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        end_date:
            Only calculate statistics from this date and time and earlier, specified
            in GMT as an [ISO
            8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
        minutes:
            Only calculate statistics since this many minutes in the past. The
            default is 15 minutes.
        start_date:
            Only calculate statistics from this date and time and later, specified
            in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
            format.
        task_channel:
            Only calculate cumulative statistics on this TaskChannel. Can be the
            TaskChannel's SID or its `unique_name`, such as `voice`,
            `sms`, or `default`.
        split_by_wait_time:
            A comma separated list of values that describes the thresholds, in
            seconds, to calculate statistics on. For each threshold
            specified, the number of Tasks canceled and reservations
            accepted above and below the specified thresholds in seconds
            are computed. TaskRouter will calculate statistics on up to
            10,000 Tasks/Reservations for any given threshold.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskQueues/{task_queue_sid}/CumulativeStatistics?&end_date=%s&minutes=%s&start_date=%s&task_channel=%s&split_by_wait_time=%s](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskQueues/{task_queue_sid}/CumulativeStatistics?&end_date=%s&minutes=%s&start_date=%s&task_channel=%s&split_by_wait_time=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskQueues/{task_queue_sid}/CumulativeStatistics"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "end_date": end_date,
        "minutes": minutes,
        "start_date": start_date,
        "task_channel": task_channel,
        "split_by_wait_time": split_by_wait_time,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_workspaces_workspace_sid_task_queues_task_queue_sid_real_time_statistics(
    workspace_sid: str,
    task_queue_sid: str,
    twilio_credentials: "TwilioCredentials",
    task_channel: str = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        task_queue_sid:
            Task queue sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        task_channel:
            The TaskChannel for which to fetch statistics. Can be the TaskChannel's
            SID or its `unique_name`, such as `voice`, `sms`, or
            `default`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskQueues/{task_queue_sid}/RealTimeStatistics?&task_channel=%s](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskQueues/{task_queue_sid}/RealTimeStatistics?&task_channel=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskQueues/{task_queue_sid}/RealTimeStatistics"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "task_channel": task_channel,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_workspaces_workspace_sid_task_queues_task_queue_sid_statistics(
    workspace_sid: str,
    task_queue_sid: str,
    twilio_credentials: "TwilioCredentials",
    end_date: str = None,
    minutes: int = None,
    start_date: str = None,
    task_channel: str = None,
    split_by_wait_time: str = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        task_queue_sid:
            Task queue sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        end_date:
            Only calculate statistics from this date and time and earlier, specified
            in GMT as an [ISO
            8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
        minutes:
            Only calculate statistics since this many minutes in the past. The
            default is 15 minutes.
        start_date:
            Only calculate statistics from this date and time and later, specified
            in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
            format.
        task_channel:
            Only calculate real-time and cumulative statistics for the specified
            TaskChannel. Can be the TaskChannel's SID or its
            `unique_name`, such as `voice`, `sms`, or `default`.
        split_by_wait_time:
            A comma separated list of values that describes the thresholds, in
            seconds, to calculate statistics on. For each threshold
            specified, the number of Tasks canceled and reservations
            accepted above and below the specified thresholds in seconds
            are computed.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskQueues/{task_queue_sid}/Statistics?&end_date=%s&minutes=%s&start_date=%s&task_channel=%s&split_by_wait_time=%s](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskQueues/{task_queue_sid}/Statistics?&end_date=%s&minutes=%s&start_date=%s&task_channel=%s&split_by_wait_time=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/TaskQueues/{task_queue_sid}/Statistics"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "end_date": end_date,
        "minutes": minutes,
        "start_date": start_date,
        "task_channel": task_channel,
        "split_by_wait_time": split_by_wait_time,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_workspaces_workspace_sid_tasks(
    workspace_sid: str,
    twilio_credentials: "TwilioCredentials",
    priority: int = None,
    assignment_status: list = None,
    workflow_sid: str = None,
    workflow_name: str = None,
    task_queue_sid: str = None,
    task_queue_name: str = None,
    evaluate_task_attributes: str = None,
    ordering: str = None,
    has_addons: bool = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        priority:
            The priority value of the Tasks to read. Returns the list of all Tasks
            in the Workspace with the specified priority.
        assignment_status:
            The `assignment_status` of the Tasks you want to read. Can be:
            `pending`, `reserved`, `assigned`, `canceled`, `wrapping`,
            or `completed`. Returns all Tasks in the Workspace with the
            specified `assignment_status`.
        workflow_sid:
            The SID of the Workflow with the Tasks to read. Returns the Tasks
            controlled by the Workflow identified by this SID.
        workflow_name:
            The friendly name of the Workflow with the Tasks to read. Returns the
            Tasks controlled by the Workflow identified by this friendly
            name.
        task_queue_sid:
            The SID of the TaskQueue with the Tasks to read. Returns the Tasks
            waiting in the TaskQueue identified by this SID.
        task_queue_name:
            The `friendly_name` of the TaskQueue with the Tasks to read. Returns the
            Tasks waiting in the TaskQueue identified by this friendly
            name.
        evaluate_task_attributes:
            The attributes of the Tasks to read. Returns the Tasks that match the
            attributes specified in this parameter.
        ordering:
            How to order the returned Task resources. y default, Tasks are sorted by
            ascending DateCreated. This value is specified as:
            `Attribute:Order`, where `Attribute` can be either
            `Priority` or `DateCreated` and `Order` can be either `asc`
            or `desc`. For example, `Priority:desc` returns Tasks
            ordered in descending order of their Priority. Multiple sort
            orders can be specified in a comma-separated list such as
            `Priority:desc,DateCreated:asc`, which returns the Tasks in
            descending Priority order and ascending DateCreated Order.
        has_addons:
            Whether to read Tasks with addons. If `true`, returns only Tasks with
            addons. If `false`, returns only Tasks without addons.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Tasks?&priority=%s&assignment_status=%s&workflow_sid=%s&workflow_name=%s&task_queue_sid=%s&task_queue_name=%s&evaluate_task_attributes=%s&ordering=%s&has_addons=%s&page_size=%s](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Tasks?&priority=%s&assignment_status=%s&workflow_sid=%s&workflow_name=%s&task_queue_sid=%s&task_queue_name=%s&evaluate_task_attributes=%s&ordering=%s&has_addons=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Tasks"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "priority": priority,
        "assignment_status": assignment_status,
        "workflow_sid": workflow_sid,
        "workflow_name": workflow_name,
        "task_queue_sid": task_queue_sid,
        "task_queue_name": task_queue_name,
        "evaluate_task_attributes": evaluate_task_attributes,
        "ordering": ordering,
        "has_addons": has_addons,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_workspaces_workspace_sid_tasks(
    workspace_sid: str,
    twilio_credentials: "TwilioCredentials",
    attributes: str = None,
    priority: int = None,
    task_channel: str = None,
    timeout: int = None,
    workflow_sid: str = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        attributes:
            A URL-encoded JSON string with the attributes of the new task. This
            value is passed to the Workflow's `assignment_callback_url`
            when the Task is assigned to a Worker. For example: `{
            "task_type": "call", "twilio_call_sid": "CAxxx",
            "customer_ticket_number": "12345" }`.
        priority:
            The priority to assign the new task and override the default. When
            supplied, the new Task will have this priority unless it
            matches a Workflow Target with a Priority set. When not
            supplied, the new Task will have the priority of the
            matching Workflow Target. Value can be 0 to 2^31^
            (2,147,483,647).
        task_channel:
            When MultiTasking is enabled, specify the TaskChannel by passing either
            its `unique_name` or `sid`. Default value is `default`.
        timeout:
            The amount of time in seconds the new task can live before being
            assigned. Can be up to a maximum of 2 weeks (1,209,600
            seconds). The default value is 24 hours (86,400 seconds). On
            timeout, the `task.canceled` event will fire with
            description `Task TTL Exceeded`.
        workflow_sid:
            The SID of the Workflow that you would like to handle routing for the
            new Task. If there is only one Workflow defined for the
            Workspace that you are posting the new task to, this
            parameter is optional.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Tasks?](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Tasks?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Tasks"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "attributes": attributes,
        "priority": priority,
        "task_channel": task_channel,
        "timeout": timeout,
        "workflow_sid": workflow_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_workspaces_workspace_sid_tasks_sid(
    workspace_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    if_match: str = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        if_match:
            If provided, deletes this Task if (and only if) the
            [ETag](https://developer.mozilla.org/en-
            US/docs/Web/HTTP/Headers/ETag) header of the Task matches
            the provided value. This matches the semantics of (and is
            implemented with) the HTTP [If-Match
            header](https://developer.mozilla.org/en-
            US/docs/Web/HTTP/Headers/If-Match).

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Tasks/{sid}?&if_match=%s](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Tasks/{sid}?&if_match=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Tasks/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    params = {
        "if_match": if_match,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_workspaces_workspace_sid_tasks_sid(
    workspace_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Tasks/{sid}?](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Tasks/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Tasks/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_workspaces_workspace_sid_tasks_sid(
    workspace_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    if_match: str = None,
    assignment_status: str = None,
    attributes: str = None,
    priority: int = None,
    reason: str = None,
    task_channel: str = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        if_match:
            If provided, applies this mutation if (and only if) the
            [ETag](https://developer.mozilla.org/en-
            US/docs/Web/HTTP/Headers/ETag) header of the Task matches
            the provided value. This matches the semantics of (and is
            implemented with) the HTTP [If-Match
            header](https://developer.mozilla.org/en-
            US/docs/Web/HTTP/Headers/If-Match).
        assignment_status:
            The new status of the task. Can be: `canceled`, to cancel a Task that is
            currently `pending` or `reserved`; `wrapping`, to move the
            Task to wrapup state; or `completed`, to move a Task to the
            completed state.
        attributes:
            The JSON string that describes the custom attributes of the task.
        priority:
            The Task's new priority value. When supplied, the Task takes on the
            specified priority unless it matches a Workflow Target with
            a Priority set. Value can be 0 to 2^31^ (2,147,483,647).
        reason:
            The reason that the Task was canceled or completed. This parameter is
            required only if the Task is canceled or completed. Setting
            this value queues the task for deletion and logs the reason.
        task_channel:
            When MultiTasking is enabled, specify the TaskChannel with the task to
            update. Can be the TaskChannel's SID or its `unique_name`,
            such as `voice`, `sms`, or `default`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Tasks/{sid}?&if_match=%s](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Tasks/{sid}?&if_match=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Tasks/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "if_match": if_match,
    }

    data = {
        "assignment_status": assignment_status,
        "attributes": attributes,
        "priority": priority,
        "reason": reason,
        "task_channel": task_channel,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        params=params,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_workspaces_workspace_sid_tasks_task_sid_reservations(
    workspace_sid: str,
    task_sid: str,
    twilio_credentials: "TwilioCredentials",
    reservation_status: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        task_sid:
            Task sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        reservation_status:
            Returns the list of reservations for a task with a specified
            ReservationStatus.  Can be: `pending`, `accepted`,
            `rejected`, or `timeout`.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Tasks/{task_sid}/Reservations?&reservation_status=%s&page_size=%s](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Tasks/{task_sid}/Reservations?&reservation_status=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Tasks/{task_sid}/Reservations"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "reservation_status": reservation_status,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_workspaces_workspace_sid_tasks_task_sid_reservations_sid(
    workspace_sid: str,
    task_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        task_sid:
            Task sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Tasks/{task_sid}/Reservations/{sid}?](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Tasks/{task_sid}/Reservations/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Tasks/{task_sid}/Reservations/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_workspaces_workspace_sid_tasks_task_sid_reservations_sid(
    workspace_sid: str,
    task_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    if_match: str = None,
    beep: str = None,
    beep_on_customer_entrance: bool = None,
    call_accept: bool = None,
    call_from: str = None,
    call_record: str = None,
    call_status_callback_url: str = None,
    call_timeout: int = None,
    call_to: str = None,
    call_url: str = None,
    conference_record: str = None,
    conference_recording_status_callback: str = None,
    conference_recording_status_callback_method: str = None,
    conference_status_callback: str = None,
    conference_status_callback_event: list = None,
    conference_status_callback_method: str = None,
    conference_trim: str = None,
    dequeue_from: str = None,
    dequeue_post_work_activity_sid: str = None,
    dequeue_record: str = None,
    dequeue_status_callback_event: list = None,
    dequeue_status_callback_url: str = None,
    dequeue_timeout: int = None,
    dequeue_to: str = None,
    early_media: bool = None,
    end_conference_on_customer_exit: bool = None,
    end_conference_on_exit: bool = None,
    from_: str = None,
    instruction: str = None,
    max_participants: int = None,
    muted: bool = None,
    post_work_activity_sid: str = None,
    record: bool = None,
    recording_channels: str = None,
    recording_status_callback: str = None,
    recording_status_callback_method: str = None,
    redirect_accept: bool = None,
    redirect_call_sid: str = None,
    redirect_url: str = None,
    region: str = None,
    reservation_status: str = None,
    sip_auth_password: str = None,
    sip_auth_username: str = None,
    start_conference_on_enter: bool = None,
    status_callback: str = None,
    status_callback_event: list = None,
    status_callback_method: str = None,
    supervisor: str = None,
    supervisor_mode: str = None,
    timeout: int = None,
    to: str = None,
    wait_method: str = None,
    wait_url: str = None,
    worker_activity_sid: str = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        task_sid:
            Task sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        if_match:
            The If-Match HTTP request header.
        beep:
            Whether to play a notification beep when the participant joins or when
            to play a beep. Can be: `true`, `false`, `onEnter`, or
            `onExit`. The default value is `true`.
        beep_on_customer_entrance:
            Whether to play a notification beep when the customer joins.
        call_accept:
            Whether to accept a reservation when executing a Call instruction.
        call_from:
            The Caller ID of the outbound call when executing a Call instruction.
        call_record:
            Whether to record both legs of a call when executing a Call instruction
            or which leg to record.
        call_status_callback_url:
            The URL to call  for the completed call event when executing a Call
            instruction.
        call_timeout:
            Timeout for call when executing a Call instruction.
        call_to:
            The Contact URI of the worker when executing a Call instruction.  Can be
            the URI of the Twilio Client, the SIP URI for Programmable
            SIP, or the
            [E.164](https://www.twilio.com/docs/glossary/what-e164)
            formatted phone number, depending on the destination.
        call_url:
            TwiML URI executed on answering the worker's leg as a result of the Call
            instruction.
        conference_record:
            Whether to record the conference the participant is joining or when to
            record the conference. Can be: `true`, `false`, `record-
            from-start`, and `do-not-record`. The default value is
            `false`.
        conference_recording_status_callback:
            The URL we should call using the
            `conference_recording_status_callback_method` when the
            conference recording is available.
        conference_recording_status_callback_method:
            The HTTP method we should use to call
            `conference_recording_status_callback`. Can be: `GET` or
            `POST` and defaults to `POST`.
        conference_status_callback:
            The URL we should call using the `conference_status_callback_method`
            when the conference events in
            `conference_status_callback_event` occur. Only the value set
            by the first participant to join the conference is used.
            Subsequent `conference_status_callback` values are ignored.
        conference_status_callback_event:
            The conference status events that we will send to
            `conference_status_callback`. Can be: `start`, `end`,
            `join`, `leave`, `mute`, `hold`, `speaker`.
        conference_status_callback_method:
            The HTTP method we should use to call `conference_status_callback`. Can
            be: `GET` or `POST` and defaults to `POST`.
        conference_trim:
            How to trim the leading and trailing silence from your recorded
            conference audio files. Can be: `trim-silence` or `do-not-
            trim` and defaults to `trim-silence`.
        dequeue_from:
            The Caller ID of the call to the worker when executing a Dequeue
            instruction.
        dequeue_post_work_activity_sid:
            The SID of the Activity resource to start after executing a Dequeue
            instruction.
        dequeue_record:
            Whether to record both legs of a call when executing a Dequeue
            instruction or which leg to record.
        dequeue_status_callback_event:
            The Call progress events sent via webhooks as a result of a Dequeue
            instruction.
        dequeue_status_callback_url:
            The Callback URL for completed call event when executing a Dequeue
            instruction.
        dequeue_timeout:
            Timeout for call when executing a Dequeue instruction.
        dequeue_to:
            The Contact URI of the worker when executing a Dequeue instruction. Can
            be the URI of the Twilio Client, the SIP URI for
            Programmable SIP, or the
            [E.164](https://www.twilio.com/docs/glossary/what-e164)
            formatted phone number, depending on the destination.
        early_media:
            Whether to allow an agent to hear the state of the outbound call,
            including ringing or disconnect messages. The default is
            `true`.
        end_conference_on_customer_exit:
            Whether to end the conference when the customer leaves.
        end_conference_on_exit:
            Whether to end the conference when the agent leaves.
        from_:
            The Caller ID of the call to the worker when executing a Conference
            instruction.
        instruction:
            The assignment instruction for reservation.
        max_participants:
            The maximum number of participants in the conference. Can be a positive
            integer from `2` to `250`. The default value is `250`.
        muted:
            Whether the agent is muted in the conference. The default is `false`.
        post_work_activity_sid:
            The new worker activity SID after executing a Conference instruction.
        record:
            Whether to record the participant and their conferences, including the
            time between conferences. The default is `false`.
        recording_channels:
            The recording channels for the final recording. Can be: `mono` or `dual`
            and the default is `mono`.
        recording_status_callback:
            The URL that we should call using the `recording_status_callback_method`
            when the recording status changes.
        recording_status_callback_method:
            The HTTP method we should use when we call `recording_status_callback`.
            Can be: `GET` or `POST` and defaults to `POST`.
        redirect_accept:
            Whether the reservation should be accepted when executing a Redirect
            instruction.
        redirect_call_sid:
            The Call SID of the call parked in the queue when executing a Redirect
            instruction.
        redirect_url:
            TwiML URI to redirect the call to when executing the Redirect
            instruction.
        region:
            The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-
            global-low-latency-routing-and-region-selection-work-for-
            conferences-and-Client-calls) where we should mix the
            recorded audio. Can be:`us1`, `ie1`, `de1`, `sg1`, `br1`,
            `au1`, or `jp1`.
        reservation_status:
            The new status of the reservation. Can be: `pending`, `accepted`,
            `rejected`, or `timeout`.
        sip_auth_password:
            The SIP password for authentication.
        sip_auth_username:
            The SIP username used for authentication.
        start_conference_on_enter:
            Whether to start the conference when the participant joins, if it has
            not already started. The default is `true`. If `false` and
            the conference has not started, the participant is muted and
            hears background music until another participant starts the
            conference.
        status_callback:
            The URL we should call using the `status_callback_method` to send status
            information to your application.
        status_callback_event:
            The call progress events that we will send to `status_callback`. Can be:
            `initiated`, `ringing`, `answered`, or `completed`.
        status_callback_method:
            The HTTP method we should use to call `status_callback`. Can be: `POST`
            or `GET` and the default is `POST`.
        supervisor:
            The Supervisor SID/URI when executing the Supervise instruction.
        supervisor_mode:
            The Supervisor mode when executing the Supervise instruction.
        timeout:
            Timeout for call when executing a Conference instruction.
        to:
            The Contact URI of the worker when executing a Conference instruction.
            Can be the URI of the Twilio Client, the SIP URI for
            Programmable SIP, or the
            [E.164](https://www.twilio.com/docs/glossary/what-e164)
            formatted phone number, depending on the destination.
        wait_method:
            The HTTP method we should use to call `wait_url`. Can be `GET` or `POST`
            and the default is `POST`. When using a static audio file,
            this should be `GET` so that we can cache the file.
        wait_url:
            The URL we should call using the `wait_method` for the music to play
            while participants are waiting for the conference to start.
            The default value is the URL of our standard hold music.
            [Learn more about hold
            music](https://www.twilio.com/labs/twimlets/holdmusic).
        worker_activity_sid:
            The new worker activity SID if rejecting a reservation.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Tasks/{task_sid}/Reservations/{sid}?&if_match=%s](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Tasks/{task_sid}/Reservations/{sid}?&if_match=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Tasks/{task_sid}/Reservations/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "if_match": if_match,
    }

    data = {
        "beep": beep,
        "beep_on_customer_entrance": beep_on_customer_entrance,
        "call_accept": call_accept,
        "call_from": call_from,
        "call_record": call_record,
        "call_status_callback_url": call_status_callback_url,
        "call_timeout": call_timeout,
        "call_to": call_to,
        "call_url": call_url,
        "conference_record": conference_record,
        "conference_recording_status_callback": conference_recording_status_callback,  # noqa
        "conference_recording_status_callback_method": conference_recording_status_callback_method,  # noqa
        "conference_status_callback": conference_status_callback,
        "conference_status_callback_event": conference_status_callback_event,
        "conference_status_callback_method": conference_status_callback_method,
        "conference_trim": conference_trim,
        "dequeue_from": dequeue_from,
        "dequeue_post_work_activity_sid": dequeue_post_work_activity_sid,
        "dequeue_record": dequeue_record,
        "dequeue_status_callback_event": dequeue_status_callback_event,
        "dequeue_status_callback_url": dequeue_status_callback_url,
        "dequeue_timeout": dequeue_timeout,
        "dequeue_to": dequeue_to,
        "early_media": early_media,
        "end_conference_on_customer_exit": end_conference_on_customer_exit,
        "end_conference_on_exit": end_conference_on_exit,
        "from_": from_,
        "instruction": instruction,
        "max_participants": max_participants,
        "muted": muted,
        "post_work_activity_sid": post_work_activity_sid,
        "record": record,
        "recording_channels": recording_channels,
        "recording_status_callback": recording_status_callback,
        "recording_status_callback_method": recording_status_callback_method,
        "redirect_accept": redirect_accept,
        "redirect_call_sid": redirect_call_sid,
        "redirect_url": redirect_url,
        "region": region,
        "reservation_status": reservation_status,
        "sip_auth_password": sip_auth_password,
        "sip_auth_username": sip_auth_username,
        "start_conference_on_enter": start_conference_on_enter,
        "status_callback": status_callback,
        "status_callback_event": status_callback_event,
        "status_callback_method": status_callback_method,
        "supervisor": supervisor,
        "supervisor_mode": supervisor_mode,
        "timeout": timeout,
        "to": to,
        "wait_method": wait_method,
        "wait_url": wait_url,
        "worker_activity_sid": worker_activity_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        params=params,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_workspaces_workspace_sid_workers(
    workspace_sid: str,
    twilio_credentials: "TwilioCredentials",
    activity_name: str = None,
    activity_sid: str = None,
    available: str = None,
    friendly_name: str = None,
    target_workers_expression: str = None,
    task_queue_name: str = None,
    task_queue_sid: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        activity_name:
            The `activity_name` of the Worker resources to read.
        activity_sid:
            The `activity_sid` of the Worker resources to read.
        available:
            Whether to return only Worker resources that are available or
            unavailable. Can be `true`, `1`, or `yes` to return Worker
            resources that are available, and `false`, or any value
            returns the Worker resources that are not available.
        friendly_name:
            The `friendly_name` of the Worker resources to read.
        target_workers_expression:
            Filter by Workers that would match an expression on a TaskQueue. This is
            helpful for debugging which Workers would match a potential
            queue.
        task_queue_name:
            The `friendly_name` of the TaskQueue that the Workers to read are
            eligible for.
        task_queue_sid:
            The SID of the TaskQueue that the Workers to read are eligible for.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers?&activity_name=%s&activity_sid=%s&available=%s&friendly_name=%s&target_workers_expression=%s&task_queue_name=%s&task_queue_sid=%s&page_size=%s](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers?&activity_name=%s&activity_sid=%s&available=%s&friendly_name=%s&target_workers_expression=%s&task_queue_name=%s&task_queue_sid=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "activity_name": activity_name,
        "activity_sid": activity_sid,
        "available": available,
        "friendly_name": friendly_name,
        "target_workers_expression": target_workers_expression,
        "task_queue_name": task_queue_name,
        "task_queue_sid": task_queue_sid,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_workspaces_workspace_sid_workers(
    workspace_sid: str,
    twilio_credentials: "TwilioCredentials",
    activity_sid: str = None,
    attributes: str = None,
    friendly_name: str = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        activity_sid:
            The SID of a valid Activity that will describe the new Worker's initial
            state. See
            [Activities](https://www.twilio.com/docs/taskrouter/api/activity)
            for more information. If not provided, the new Worker's
            initial state is the `default_activity_sid` configured on
            the Workspace.
        attributes:
            A valid JSON string that describes the new Worker. For example: `{
            "email": "Bob@example.com", "phone": "+5095551234" }`. This
            data is passed to the `assignment_callback_url` when
            TaskRouter assigns a Task to the Worker. Defaults to {}.
        friendly_name:
            A descriptive string that you create to describe the new Worker. It can
            be up to 64 characters long.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers?](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "activity_sid": activity_sid,
        "attributes": attributes,
        "friendly_name": friendly_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_workspaces_workspace_sid_workers_cumulative_statistics(
    workspace_sid: str,
    twilio_credentials: "TwilioCredentials",
    end_date: str = None,
    minutes: int = None,
    start_date: str = None,
    task_channel: str = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        end_date:
            Only calculate statistics from this date and time and earlier, specified
            in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
            format.
        minutes:
            Only calculate statistics since this many minutes in the past. The
            default 15 minutes. This is helpful for displaying
            statistics for the last 15 minutes, 240 minutes (4 hours),
            and 480 minutes (8 hours) to see trends.
        start_date:
            Only calculate statistics from this date and time and later, specified
            in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
            format.
        task_channel:
            Only calculate cumulative statistics on this TaskChannel. Can be the
            TaskChannel's SID or its `unique_name`, such as `voice`,
            `sms`, or `default`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/CumulativeStatistics?&end_date=%s&minutes=%s&start_date=%s&task_channel=%s](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/CumulativeStatistics?&end_date=%s&minutes=%s&start_date=%s&task_channel=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/CumulativeStatistics"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "end_date": end_date,
        "minutes": minutes,
        "start_date": start_date,
        "task_channel": task_channel,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_workspaces_workspace_sid_workers_real_time_statistics(
    workspace_sid: str,
    twilio_credentials: "TwilioCredentials",
    task_channel: str = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        task_channel:
            Only calculate real-time statistics on this TaskChannel. Can be the
            TaskChannel's SID or its `unique_name`, such as `voice`,
            `sms`, or `default`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/RealTimeStatistics?&task_channel=%s](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/RealTimeStatistics?&task_channel=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/RealTimeStatistics"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "task_channel": task_channel,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_workspaces_workspace_sid_workers_statistics(
    workspace_sid: str,
    twilio_credentials: "TwilioCredentials",
    minutes: int = None,
    start_date: str = None,
    end_date: str = None,
    task_queue_sid: str = None,
    task_queue_name: str = None,
    friendly_name: str = None,
    task_channel: str = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        minutes:
            Only calculate statistics since this many minutes in the past. The
            default 15 minutes. This is helpful for displaying
            statistics for the last 15 minutes, 240 minutes (4 hours),
            and 480 minutes (8 hours) to see trends.
        start_date:
            Only calculate statistics from this date and time and later, specified
            in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
            format.
        end_date:
            Only calculate statistics from this date and time and earlier, specified
            in GMT as an [ISO
            8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
        task_queue_sid:
            The SID of the TaskQueue for which to fetch Worker statistics.
        task_queue_name:
            The `friendly_name` of the TaskQueue for which to fetch Worker
            statistics.
        friendly_name:
            Only include Workers with `friendly_name` values that match this
            parameter.
        task_channel:
            Only calculate statistics on this TaskChannel. Can be the TaskChannel's
            SID or its `unique_name`, such as `voice`, `sms`, or
            `default`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/Statistics?&minutes=%s&start_date=%s&end_date=%s&task_queue_sid=%s&task_queue_name=%s&friendly_name=%s&task_channel=%s](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/Statistics?&minutes=%s&start_date=%s&end_date=%s&task_queue_sid=%s&task_queue_name=%s&friendly_name=%s&task_channel=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/Statistics"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "minutes": minutes,
        "start_date": start_date,
        "end_date": end_date,
        "task_queue_sid": task_queue_sid,
        "task_queue_name": task_queue_name,
        "friendly_name": friendly_name,
        "task_channel": task_channel,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def delete_v1_workspaces_workspace_sid_workers_sid(
    workspace_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    if_match: str = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        if_match:
            The If-Match HTTP request header.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/{sid}?&if_match=%s](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/{sid}?&if_match=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    params = {
        "if_match": if_match,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_workspaces_workspace_sid_workers_sid(
    workspace_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/{sid}?](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_workspaces_workspace_sid_workers_sid(
    workspace_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    if_match: str = None,
    activity_sid: str = None,
    attributes: str = None,
    friendly_name: str = None,
    reject_pending_reservations: bool = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        if_match:
            The If-Match HTTP request header.
        activity_sid:
            The SID of a valid Activity that will describe the Worker's initial
            state. See
            [Activities](https://www.twilio.com/docs/taskrouter/api/activity)
            for more information.
        attributes:
            The JSON string that describes the Worker. For example: `{ "email":
            "Bob@example.com", "phone": "+5095551234" }`. This data is
            passed to the `assignment_callback_url` when TaskRouter
            assigns a Task to the Worker. Defaults to {}.
        friendly_name:
            A descriptive string that you create to describe the Worker. It can be
            up to 64 characters long.
        reject_pending_reservations:
            Whether to reject the Worker's pending reservations. This option is only
            valid if the Worker's new
            [Activity](https://www.twilio.com/docs/taskrouter/api/activity)
            resource has its `availability` property set to `False`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/{sid}?&if_match=%s](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/{sid}?&if_match=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "if_match": if_match,
    }

    data = {
        "activity_sid": activity_sid,
        "attributes": attributes,
        "friendly_name": friendly_name,
        "reject_pending_reservations": reject_pending_reservations,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        params=params,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_workspaces_workspace_sid_workers_worker_sid_channels(
    workspace_sid: str,
    worker_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        worker_sid:
            Worker sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/{worker_sid}/Channels?&page_size=%s](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/{worker_sid}/Channels?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/{worker_sid}/Channels"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_workspaces_workspace_sid_workers_worker_sid_channels_sid(
    workspace_sid: str,
    worker_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        worker_sid:
            Worker sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/{worker_sid}/Channels/{sid}?](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/{worker_sid}/Channels/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/{worker_sid}/Channels/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_workspaces_workspace_sid_workers_worker_sid_channels_sid(
    workspace_sid: str,
    worker_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    available: bool = None,
    capacity: int = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        worker_sid:
            Worker sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        available:
            Whether the WorkerChannel is available. Set to `false` to prevent the
            Worker from receiving any new Tasks of this TaskChannel
            type.
        capacity:
            The total number of Tasks that the Worker should handle for the
            TaskChannel type. TaskRouter creates reservations for Tasks
            of this TaskChannel type up to the specified capacity. If
            the capacity is 0, no new reservations will be created.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/{worker_sid}/Channels/{sid}?](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/{worker_sid}/Channels/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/{worker_sid}/Channels/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "available": available,
        "capacity": capacity,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_workspaces_workspace_sid_workers_worker_sid_reservations(
    workspace_sid: str,
    worker_sid: str,
    twilio_credentials: "TwilioCredentials",
    reservation_status: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        worker_sid:
            Worker sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        reservation_status:
            Returns the list of reservations for a worker with a specified
            ReservationStatus. Can be: `pending`, `accepted`,
            `rejected`, `timeout`, `canceled`, or `rescinded`.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/{worker_sid}/Reservations?&reservation_status=%s&page_size=%s](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/{worker_sid}/Reservations?&reservation_status=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/{worker_sid}/Reservations"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "reservation_status": reservation_status,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_workspaces_workspace_sid_workers_worker_sid_reservations_sid(
    workspace_sid: str,
    worker_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        worker_sid:
            Worker sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/{worker_sid}/Reservations/{sid}?](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/{worker_sid}/Reservations/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/{worker_sid}/Reservations/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_workspaces_workspace_sid_workers_worker_sid_reservations_sid(
    workspace_sid: str,
    worker_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    if_match: str = None,
    beep: str = None,
    beep_on_customer_entrance: bool = None,
    call_accept: bool = None,
    call_from: str = None,
    call_record: str = None,
    call_status_callback_url: str = None,
    call_timeout: int = None,
    call_to: str = None,
    call_url: str = None,
    conference_record: str = None,
    conference_recording_status_callback: str = None,
    conference_recording_status_callback_method: str = None,
    conference_status_callback: str = None,
    conference_status_callback_event: list = None,
    conference_status_callback_method: str = None,
    conference_trim: str = None,
    dequeue_from: str = None,
    dequeue_post_work_activity_sid: str = None,
    dequeue_record: str = None,
    dequeue_status_callback_event: list = None,
    dequeue_status_callback_url: str = None,
    dequeue_timeout: int = None,
    dequeue_to: str = None,
    early_media: bool = None,
    end_conference_on_customer_exit: bool = None,
    end_conference_on_exit: bool = None,
    from_: str = None,
    instruction: str = None,
    max_participants: int = None,
    muted: bool = None,
    post_work_activity_sid: str = None,
    record: bool = None,
    recording_channels: str = None,
    recording_status_callback: str = None,
    recording_status_callback_method: str = None,
    redirect_accept: bool = None,
    redirect_call_sid: str = None,
    redirect_url: str = None,
    region: str = None,
    reservation_status: str = None,
    sip_auth_password: str = None,
    sip_auth_username: str = None,
    start_conference_on_enter: bool = None,
    status_callback: str = None,
    status_callback_event: list = None,
    status_callback_method: str = None,
    timeout: int = None,
    to: str = None,
    wait_method: str = None,
    wait_url: str = None,
    worker_activity_sid: str = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        worker_sid:
            Worker sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        if_match:
            The If-Match HTTP request header.
        beep:
            Whether to play a notification beep when the participant joins or when
            to play a beep. Can be: `true`, `false`, `onEnter`, or
            `onExit`. The default value is `true`.
        beep_on_customer_entrance:
            Whether to play a notification beep when the customer joins.
        call_accept:
            Whether to accept a reservation when executing a Call instruction.
        call_from:
            The Caller ID of the outbound call when executing a Call instruction.
        call_record:
            Whether to record both legs of a call when executing a Call instruction.
        call_status_callback_url:
            The URL to call for the completed call event when executing a Call
            instruction.
        call_timeout:
            The timeout for a call when executing a Call instruction.
        call_to:
            The contact URI of the worker when executing a Call instruction. Can be
            the URI of the Twilio Client, the SIP URI for Programmable
            SIP, or the
            [E.164](https://www.twilio.com/docs/glossary/what-e164)
            formatted phone number, depending on the destination.
        call_url:
            TwiML URI executed on answering the worker's leg as a result of the Call
            instruction.
        conference_record:
            Whether to record the conference the participant is joining or when to
            record the conference. Can be: `true`, `false`, `record-
            from-start`, and `do-not-record`. The default value is
            `false`.
        conference_recording_status_callback:
            The URL we should call using the
            `conference_recording_status_callback_method` when the
            conference recording is available.
        conference_recording_status_callback_method:
            The HTTP method we should use to call
            `conference_recording_status_callback`. Can be: `GET` or
            `POST` and defaults to `POST`.
        conference_status_callback:
            The URL we should call using the `conference_status_callback_method`
            when the conference events in
            `conference_status_callback_event` occur. Only the value set
            by the first participant to join the conference is used.
            Subsequent `conference_status_callback` values are ignored.
        conference_status_callback_event:
            The conference status events that we will send to
            `conference_status_callback`. Can be: `start`, `end`,
            `join`, `leave`, `mute`, `hold`, `speaker`.
        conference_status_callback_method:
            The HTTP method we should use to call `conference_status_callback`. Can
            be: `GET` or `POST` and defaults to `POST`.
        conference_trim:
            Whether to trim leading and trailing silence from your recorded
            conference audio files. Can be: `trim-silence` or `do-not-
            trim` and defaults to `trim-silence`.
        dequeue_from:
            The caller ID of the call to the worker when executing a Dequeue
            instruction.
        dequeue_post_work_activity_sid:
            The SID of the Activity resource to start after executing a Dequeue
            instruction.
        dequeue_record:
            Whether to record both legs of a call when executing a Dequeue
            instruction or which leg to record.
        dequeue_status_callback_event:
            The call progress events sent via webhooks as a result of a Dequeue
            instruction.
        dequeue_status_callback_url:
            The callback URL for completed call event when executing a Dequeue
            instruction.
        dequeue_timeout:
            The timeout for call when executing a Dequeue instruction.
        dequeue_to:
            The contact URI of the worker when executing a Dequeue instruction. Can
            be the URI of the Twilio Client, the SIP URI for
            Programmable SIP, or the
            [E.164](https://www.twilio.com/docs/glossary/what-e164)
            formatted phone number, depending on the destination.
        early_media:
            Whether to allow an agent to hear the state of the outbound call,
            including ringing or disconnect messages. The default is
            `true`.
        end_conference_on_customer_exit:
            Whether to end the conference when the customer leaves.
        end_conference_on_exit:
            Whether to end the conference when the agent leaves.
        from_:
            The caller ID of the call to the worker when executing a Conference
            instruction.
        instruction:
            The assignment instruction for the reservation.
        max_participants:
            The maximum number of participants allowed in the conference. Can be a
            positive integer from `2` to `250`. The default value is
            `250`.
        muted:
            Whether the agent is muted in the conference. Defaults to `false`.
        post_work_activity_sid:
            The new worker activity SID after executing a Conference instruction.
        record:
            Whether to record the participant and their conferences, including the
            time between conferences. Can be `true` or `false` and the
            default is `false`.
        recording_channels:
            The recording channels for the final recording. Can be: `mono` or `dual`
            and the default is `mono`.
        recording_status_callback:
            The URL that we should call using the `recording_status_callback_method`
            when the recording status changes.
        recording_status_callback_method:
            The HTTP method we should use when we call `recording_status_callback`.
            Can be: `GET` or `POST` and defaults to `POST`.
        redirect_accept:
            Whether the reservation should be accepted when executing a Redirect
            instruction.
        redirect_call_sid:
            The Call SID of the call parked in the queue when executing a Redirect
            instruction.
        redirect_url:
            TwiML URI to redirect the call to when executing the Redirect
            instruction.
        region:
            The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-
            global-low-latency-routing-and-region-selection-work-for-
            conferences-and-Client-calls) where we should mix the
            recorded audio. Can be:`us1`, `ie1`, `de1`, `sg1`, `br1`,
            `au1`, or `jp1`.
        reservation_status:
            The new status of the reservation. Can be: `pending`, `accepted`,
            `rejected`, `timeout`, `canceled`, or `rescinded`.
        sip_auth_password:
            The SIP password for authentication.
        sip_auth_username:
            The SIP username used for authentication.
        start_conference_on_enter:
            Whether to start the conference when the participant joins, if it has
            not already started. Can be: `true` or `false` and the
            default is `true`. If `false` and the conference has not
            started, the participant is muted and hears background music
            until another participant starts the conference.
        status_callback:
            The URL we should call using the `status_callback_method` to send status
            information to your application.
        status_callback_event:
            The call progress events that we will send to `status_callback`. Can be:
            `initiated`, `ringing`, `answered`, or `completed`.
        status_callback_method:
            The HTTP method we should use to call `status_callback`. Can be: `POST`
            or `GET` and the default is `POST`.
        timeout:
            The timeout for a call when executing a Conference instruction.
        to:
            The Contact URI of the worker when executing a Conference instruction.
            Can be the URI of the Twilio Client, the SIP URI for
            Programmable SIP, or the
            [E.164](https://www.twilio.com/docs/glossary/what-e164)
            formatted phone number, depending on the destination.
        wait_method:
            The HTTP method we should use to call `wait_url`. Can be `GET` or `POST`
            and the default is `POST`. When using a static audio file,
            this should be `GET` so that we can cache the file.
        wait_url:
            The URL we should call using the `wait_method` for the music to play
            while participants are waiting for the conference to start.
            The default value is the URL of our standard hold music.
            [Learn more about hold
            music](https://www.twilio.com/labs/twimlets/holdmusic).
        worker_activity_sid:
            The new worker activity SID if rejecting a reservation.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/{worker_sid}/Reservations/{sid}?&if_match=%s](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/{worker_sid}/Reservations/{sid}?&if_match=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/{worker_sid}/Reservations/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "if_match": if_match,
    }

    data = {
        "beep": beep,
        "beep_on_customer_entrance": beep_on_customer_entrance,
        "call_accept": call_accept,
        "call_from": call_from,
        "call_record": call_record,
        "call_status_callback_url": call_status_callback_url,
        "call_timeout": call_timeout,
        "call_to": call_to,
        "call_url": call_url,
        "conference_record": conference_record,
        "conference_recording_status_callback": conference_recording_status_callback,  # noqa
        "conference_recording_status_callback_method": conference_recording_status_callback_method,  # noqa
        "conference_status_callback": conference_status_callback,
        "conference_status_callback_event": conference_status_callback_event,
        "conference_status_callback_method": conference_status_callback_method,
        "conference_trim": conference_trim,
        "dequeue_from": dequeue_from,
        "dequeue_post_work_activity_sid": dequeue_post_work_activity_sid,
        "dequeue_record": dequeue_record,
        "dequeue_status_callback_event": dequeue_status_callback_event,
        "dequeue_status_callback_url": dequeue_status_callback_url,
        "dequeue_timeout": dequeue_timeout,
        "dequeue_to": dequeue_to,
        "early_media": early_media,
        "end_conference_on_customer_exit": end_conference_on_customer_exit,
        "end_conference_on_exit": end_conference_on_exit,
        "from_": from_,
        "instruction": instruction,
        "max_participants": max_participants,
        "muted": muted,
        "post_work_activity_sid": post_work_activity_sid,
        "record": record,
        "recording_channels": recording_channels,
        "recording_status_callback": recording_status_callback,
        "recording_status_callback_method": recording_status_callback_method,
        "redirect_accept": redirect_accept,
        "redirect_call_sid": redirect_call_sid,
        "redirect_url": redirect_url,
        "region": region,
        "reservation_status": reservation_status,
        "sip_auth_password": sip_auth_password,
        "sip_auth_username": sip_auth_username,
        "start_conference_on_enter": start_conference_on_enter,
        "status_callback": status_callback,
        "status_callback_event": status_callback_event,
        "status_callback_method": status_callback_method,
        "timeout": timeout,
        "to": to,
        "wait_method": wait_method,
        "wait_url": wait_url,
        "worker_activity_sid": worker_activity_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        params=params,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_workspaces_workspace_sid_workers_worker_sid_statistics(
    workspace_sid: str,
    worker_sid: str,
    twilio_credentials: "TwilioCredentials",
    minutes: int = None,
    start_date: str = None,
    end_date: str = None,
    task_channel: str = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        worker_sid:
            Worker sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        minutes:
            Only calculate statistics since this many minutes in the past. The
            default 15 minutes. This is helpful for displaying
            statistics for the last 15 minutes, 240 minutes (4 hours),
            and 480 minutes (8 hours) to see trends.
        start_date:
            Only calculate statistics from this date and time and later, specified
            in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
            format.
        end_date:
            Only include usage that occurred on or before this date, specified in
            GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
            date-time.
        task_channel:
            Only calculate statistics on this TaskChannel. Can be the TaskChannel's
            SID or its `unique_name`, such as `voice`, `sms`, or
            `default`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/{worker_sid}/Statistics?&minutes=%s&start_date=%s&end_date=%s&task_channel=%s](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/{worker_sid}/Statistics?&minutes=%s&start_date=%s&end_date=%s&task_channel=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workers/{worker_sid}/Statistics"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "minutes": minutes,
        "start_date": start_date,
        "end_date": end_date,
        "task_channel": task_channel,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_workspaces_workspace_sid_workflows(
    workspace_sid: str,
    twilio_credentials: "TwilioCredentials",
    friendly_name: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        friendly_name:
            The `friendly_name` of the Workflow resources to read.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workflows?&friendly_name=%s&page_size=%s](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workflows?&friendly_name=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = (
        f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workflows"  # noqa
    )
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "friendly_name": friendly_name,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_workspaces_workspace_sid_workflows(
    workspace_sid: str,
    twilio_credentials: "TwilioCredentials",
    assignment_callback_url: str = None,
    configuration: str = None,
    fallback_assignment_callback_url: str = None,
    friendly_name: str = None,
    task_reservation_timeout: int = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        assignment_callback_url:
            The URL from your application that will process task assignment events.
            See [Handling Task Assignment
            Callback](https://www.twilio.com/docs/taskrouter/handle-
            assignment-callbacks) for more details.
        configuration:
            A JSON string that contains the rules to apply to the Workflow. See
            [Configuring
            Workflows](https://www.twilio.com/docs/taskrouter/workflow-
            configuration) for more information.
        fallback_assignment_callback_url:
            The URL that we should call when a call to the `assignment_callback_url`
            fails.
        friendly_name:
            A descriptive string that you create to describe the Workflow resource.
            For example, `Inbound Call Workflow` or `2014 Outbound
            Campaign`.
        task_reservation_timeout:
            How long TaskRouter will wait for a confirmation response from your
            application after it assigns a Task to a Worker. Can be up
            to `86,400` (24 hours) and the default is `120`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workflows?](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workflows?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = (
        f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workflows"  # noqa
    )
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "assignment_callback_url": assignment_callback_url,
        "configuration": configuration,
        "fallback_assignment_callback_url": fallback_assignment_callback_url,
        "friendly_name": friendly_name,
        "task_reservation_timeout": task_reservation_timeout,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_workspaces_workspace_sid_workflows_sid(
    workspace_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workflows/{sid}?](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workflows/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workflows/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_workspaces_workspace_sid_workflows_sid(
    workspace_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workflows/{sid}?](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workflows/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workflows/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_workspaces_workspace_sid_workflows_sid(
    workspace_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    assignment_callback_url: str = None,
    configuration: str = None,
    fallback_assignment_callback_url: str = None,
    friendly_name: str = None,
    re_evaluate_tasks: str = None,
    task_reservation_timeout: int = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        assignment_callback_url:
            The URL from your application that will process task assignment events.
            See [Handling Task Assignment
            Callback](https://www.twilio.com/docs/taskrouter/handle-
            assignment-callbacks) for more details.
        configuration:
            A JSON string that contains the rules to apply to the Workflow. See
            [Configuring
            Workflows](https://www.twilio.com/docs/taskrouter/workflow-
            configuration) for more information.
        fallback_assignment_callback_url:
            The URL that we should call when a call to the `assignment_callback_url`
            fails.
        friendly_name:
            A descriptive string that you create to describe the Workflow resource.
            For example, `Inbound Call Workflow` or `2014 Outbound
            Campaign`.
        re_evaluate_tasks:
            Whether or not to re-evaluate Tasks. The default is `false`, which means
            Tasks in the Workflow will not be processed through the
            assignment loop again.
        task_reservation_timeout:
            How long TaskRouter will wait for a confirmation response from your
            application after it assigns a Task to a Worker. Can be up
            to `86,400` (24 hours) and the default is `120`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workflows/{sid}?](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workflows/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workflows/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "assignment_callback_url": assignment_callback_url,
        "configuration": configuration,
        "fallback_assignment_callback_url": fallback_assignment_callback_url,
        "friendly_name": friendly_name,
        "re_evaluate_tasks": re_evaluate_tasks,
        "task_reservation_timeout": task_reservation_timeout,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_workspaces_workspace_sid_workflows_workflow_sid_cumulative_statistics(
    workspace_sid: str,
    workflow_sid: str,
    twilio_credentials: "TwilioCredentials",
    end_date: str = None,
    minutes: int = None,
    start_date: str = None,
    task_channel: str = None,
    split_by_wait_time: str = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        workflow_sid:
            Workflow sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        end_date:
            Only include usage that occurred on or before this date, specified in
            GMT as an [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
            date-time.
        minutes:
            Only calculate statistics since this many minutes in the past. The
            default 15 minutes. This is helpful for displaying
            statistics for the last 15 minutes, 240 minutes (4 hours),
            and 480 minutes (8 hours) to see trends.
        start_date:
            Only calculate statistics from this date and time and later, specified
            in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
            format.
        task_channel:
            Only calculate cumulative statistics on this TaskChannel. Can be the
            TaskChannel's SID or its `unique_name`, such as `voice`,
            `sms`, or `default`.
        split_by_wait_time:
            A comma separated list of values that describes the thresholds, in
            seconds, to calculate statistics on. For each threshold
            specified, the number of Tasks canceled and reservations
            accepted above and below the specified thresholds in seconds
            are computed. For example, `5,30` would show splits of Tasks
            that were canceled or accepted before and after 5 seconds
            and before and after 30 seconds. This can be used to show
            short abandoned Tasks or Tasks that failed to meet an SLA.
            TaskRouter will calculate statistics on up to 10,000 Tasks
            for any given threshold.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workflows/{workflow_sid}/CumulativeStatistics?&end_date=%s&minutes=%s&start_date=%s&task_channel=%s&split_by_wait_time=%s](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workflows/{workflow_sid}/CumulativeStatistics?&end_date=%s&minutes=%s&start_date=%s&task_channel=%s&split_by_wait_time=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workflows/{workflow_sid}/CumulativeStatistics"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "end_date": end_date,
        "minutes": minutes,
        "start_date": start_date,
        "task_channel": task_channel,
        "split_by_wait_time": split_by_wait_time,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_workspaces_workspace_sid_workflows_workflow_sid_real_time_statistics(
    workspace_sid: str,
    workflow_sid: str,
    twilio_credentials: "TwilioCredentials",
    task_channel: str = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        workflow_sid:
            Workflow sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        task_channel:
            Only calculate real-time statistics on this TaskChannel. Can be the
            TaskChannel's SID or its `unique_name`, such as `voice`,
            `sms`, or `default`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workflows/{workflow_sid}/RealTimeStatistics?&task_channel=%s](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workflows/{workflow_sid}/RealTimeStatistics?&task_channel=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workflows/{workflow_sid}/RealTimeStatistics"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "task_channel": task_channel,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_workspaces_workspace_sid_workflows_workflow_sid_statistics(
    workspace_sid: str,
    workflow_sid: str,
    twilio_credentials: "TwilioCredentials",
    minutes: int = None,
    start_date: str = None,
    end_date: str = None,
    task_channel: str = None,
    split_by_wait_time: str = None,
) -> Dict[str, Any]:
    """


    Args:
        workspace_sid:
            Workspace sid used in formatting the endpoint URL.
        workflow_sid:
            Workflow sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        minutes:
            Only calculate statistics since this many minutes in the past. The
            default 15 minutes. This is helpful for displaying
            statistics for the last 15 minutes, 240 minutes (4 hours),
            and 480 minutes (8 hours) to see trends.
        start_date:
            Only calculate statistics from this date and time and later, specified
            in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)
            format.
        end_date:
            Only calculate statistics from this date and time and earlier, specified
            in GMT as an [ISO
            8601](https://en.wikipedia.org/wiki/ISO_8601) date-time.
        task_channel:
            Only calculate real-time statistics on this TaskChannel. Can be the
            TaskChannel's SID or its `unique_name`, such as `voice`,
            `sms`, or `default`.
        split_by_wait_time:
            A comma separated list of values that describes the thresholds, in
            seconds, to calculate statistics on. For each threshold
            specified, the number of Tasks canceled and reservations
            accepted above and below the specified thresholds in seconds
            are computed. For example, `5,30` would show splits of Tasks
            that were canceled or accepted before and after 5 seconds
            and before and after 30 seconds. This can be used to show
            short abandoned Tasks or Tasks that failed to meet an SLA.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workflows/{workflow_sid}/Statistics?&minutes=%s&start_date=%s&end_date=%s&task_channel=%s&split_by_wait_time=%s](
    https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workflows/{workflow_sid}/Statistics?&minutes=%s&start_date=%s&end_date=%s&task_channel=%s&split_by_wait_time=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://taskrouter.twilio.com/v1/Workspaces/{workspace_sid}/Workflows/{workflow_sid}/Statistics"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "minutes": minutes,
        "start_date": start_date,
        "end_date": end_date,
        "task_channel": task_channel,
        "split_by_wait_time": split_by_wait_time,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_trunks(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trunking.twilio.com/v1/Trunks?&page_size=%s](
    https://trunking.twilio.com/v1/Trunks?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://trunking.twilio.com/v1/Trunks"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_trunks(
    twilio_credentials: "TwilioCredentials",
    cnam_lookup_enabled: bool = None,
    disaster_recovery_method: str = None,
    disaster_recovery_url: str = None,
    domain_name: str = None,
    friendly_name: str = None,
    secure: bool = None,
    transfer_caller_id: str = None,
    transfer_mode: str = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        cnam_lookup_enabled:
            Whether Caller ID Name (CNAM) lookup should be enabled for the trunk. If
            enabled, all inbound calls to the SIP Trunk from the United
            States and Canada automatically perform a CNAM Lookup and
            display Caller ID data on your phone. See [CNAM
            Lookups](https://www.twilio.com/docs/sip-trunking
            CNAM) for more information.
        disaster_recovery_method:
            The HTTP method we should use to call the `disaster_recovery_url`. Can
            be: `GET` or `POST`.
        disaster_recovery_url:
            The URL we should call using the `disaster_recovery_method` if an error
            occurs while sending SIP traffic towards the configured
            Origination URL. We retrieve TwiML from the URL and execute
            the instructions like any other normal TwiML call. See
            [Disaster Recovery](https://www.twilio.com/docs/sip-trunking
            disaster-recovery) for more information.
        domain_name:
            The unique address you reserve on Twilio to which you route your SIP
            traffic. Domain names can contain letters, digits, and `-`
            and must end with `pstn.twilio.com`. See [Termination
            Settings](https://www.twilio.com/docs/sip-trunking
            termination) for more information.
        friendly_name:
            A descriptive string that you create to describe the resource. It can be
            up to 64 characters long.
        secure:
            Whether Secure Trunking is enabled for the trunk. If enabled, all calls
            going through the trunk will be secure using SRTP for media
            and TLS for signaling. If disabled, then RTP will be used
            for media. See [Secure
            Trunking](https://www.twilio.com/docs/sip-trunking
            securetrunking) for more information.
        transfer_caller_id:
            Caller Id for transfer target. Can be: `from-transferee` (default) or
            `from-transferor`.
        transfer_mode:
            The call transfer settings for the trunk. Can be: `enable-all`, `sip-
            only` and `disable-all`. See
            [Transfer](https://www.twilio.com/docs/sip-trunking/call-
            transfer) for more information.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trunking.twilio.com/v1/Trunks?](
    https://trunking.twilio.com/v1/Trunks?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://trunking.twilio.com/v1/Trunks"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "cnam_lookup_enabled": cnam_lookup_enabled,
        "disaster_recovery_method": disaster_recovery_method,
        "disaster_recovery_url": disaster_recovery_url,
        "domain_name": domain_name,
        "friendly_name": friendly_name,
        "secure": secure,
        "transfer_caller_id": transfer_caller_id,
        "transfer_mode": transfer_mode,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_trunks_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trunking.twilio.com/v1/Trunks/{sid}?](
    https://trunking.twilio.com/v1/Trunks/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://trunking.twilio.com/v1/Trunks/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_trunks_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trunking.twilio.com/v1/Trunks/{sid}?](
    https://trunking.twilio.com/v1/Trunks/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://trunking.twilio.com/v1/Trunks/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_trunks_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    cnam_lookup_enabled: bool = None,
    disaster_recovery_method: str = None,
    disaster_recovery_url: str = None,
    domain_name: str = None,
    friendly_name: str = None,
    secure: bool = None,
    transfer_caller_id: str = None,
    transfer_mode: str = None,
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        cnam_lookup_enabled:
            Whether Caller ID Name (CNAM) lookup should be enabled for the trunk. If
            enabled, all inbound calls to the SIP Trunk from the United
            States and Canada automatically perform a CNAM Lookup and
            display Caller ID data on your phone. See [CNAM
            Lookups](https://www.twilio.com/docs/sip-trunking
            CNAM) for more information.
        disaster_recovery_method:
            The HTTP method we should use to call the `disaster_recovery_url`. Can
            be: `GET` or `POST`.
        disaster_recovery_url:
            The URL we should call using the `disaster_recovery_method` if an error
            occurs while sending SIP traffic towards the configured
            Origination URL. We retrieve TwiML from the URL and execute
            the instructions like any other normal TwiML call. See
            [Disaster Recovery](https://www.twilio.com/docs/sip-trunking
            disaster-recovery) for more information.
        domain_name:
            The unique address you reserve on Twilio to which you route your SIP
            traffic. Domain names can contain letters, digits, and `-`
            and must end with `pstn.twilio.com`. See [Termination
            Settings](https://www.twilio.com/docs/sip-trunking
            termination) for more information.
        friendly_name:
            A descriptive string that you create to describe the resource. It can be
            up to 64 characters long.
        secure:
            Whether Secure Trunking is enabled for the trunk. If enabled, all calls
            going through the trunk will be secure using SRTP for media
            and TLS for signaling. If disabled, then RTP will be used
            for media. See [Secure
            Trunking](https://www.twilio.com/docs/sip-trunking
            securetrunking) for more information.
        transfer_caller_id:
            Caller Id for transfer target. Can be: `from-transferee` (default) or
            `from-transferor`.
        transfer_mode:
            The call transfer settings for the trunk. Can be: `enable-all`, `sip-
            only` and `disable-all`. See
            [Transfer](https://www.twilio.com/docs/sip-trunking/call-
            transfer) for more information.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trunking.twilio.com/v1/Trunks/{sid}?](
    https://trunking.twilio.com/v1/Trunks/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://trunking.twilio.com/v1/Trunks/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "cnam_lookup_enabled": cnam_lookup_enabled,
        "disaster_recovery_method": disaster_recovery_method,
        "disaster_recovery_url": disaster_recovery_url,
        "domain_name": domain_name,
        "friendly_name": friendly_name,
        "secure": secure,
        "transfer_caller_id": transfer_caller_id,
        "transfer_mode": transfer_mode,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_trunks_trunk_sid_credential_lists(
    trunk_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        trunk_sid:
            Trunk sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trunking.twilio.com/v1/Trunks/{trunk_sid}/CredentialLists?&page_size=%s](
    https://trunking.twilio.com/v1/Trunks/{trunk_sid}/CredentialLists?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://trunking.twilio.com/v1/Trunks/{trunk_sid}/CredentialLists"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_trunks_trunk_sid_credential_lists(
    trunk_sid: str,
    twilio_credentials: "TwilioCredentials",
    credential_list_sid: str = None,
) -> Dict[str, Any]:
    """


    Args:
        trunk_sid:
            Trunk sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        credential_list_sid:
            The SID of the [Credential
            List](https://www.twilio.com/docs/voice/sip/api/sip-
            credentiallist-resource) that you want to associate with the
            trunk. Once associated, we will authenticate access to the
            trunk against this list.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trunking.twilio.com/v1/Trunks/{trunk_sid}/CredentialLists?](
    https://trunking.twilio.com/v1/Trunks/{trunk_sid}/CredentialLists?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://trunking.twilio.com/v1/Trunks/{trunk_sid}/CredentialLists"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "credential_list_sid": credential_list_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_trunks_trunk_sid_credential_lists_sid(
    trunk_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        trunk_sid:
            Trunk sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trunking.twilio.com/v1/Trunks/{trunk_sid}/CredentialLists/{sid}?](
    https://trunking.twilio.com/v1/Trunks/{trunk_sid}/CredentialLists/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://trunking.twilio.com/v1/Trunks/{trunk_sid}/CredentialLists/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_trunks_trunk_sid_credential_lists_sid(
    trunk_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        trunk_sid:
            Trunk sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trunking.twilio.com/v1/Trunks/{trunk_sid}/CredentialLists/{sid}?](
    https://trunking.twilio.com/v1/Trunks/{trunk_sid}/CredentialLists/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://trunking.twilio.com/v1/Trunks/{trunk_sid}/CredentialLists/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_trunks_trunk_sid_ip_access_control_lists(
    trunk_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    List all IP Access Control Lists for a Trunk.

    Args:
        trunk_sid:
            Trunk sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trunking.twilio.com/v1/Trunks/{trunk_sid}/IpAccessControlLists?&page_size=%s](
    https://trunking.twilio.com/v1/Trunks/{trunk_sid}/IpAccessControlLists?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://trunking.twilio.com/v1/Trunks/{trunk_sid}/IpAccessControlLists"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_trunks_trunk_sid_ip_access_control_lists(
    trunk_sid: str,
    twilio_credentials: "TwilioCredentials",
    ip_access_control_list_sid: str = None,
) -> Dict[str, Any]:
    """
    Associate an IP Access Control List with a Trunk.

    Args:
        trunk_sid:
            Trunk sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        ip_access_control_list_sid:
            The SID of the [IP Access Control
            List](https://www.twilio.com/docs/voice/sip/api/sip-
            ipaccesscontrollist-resource) that you want to associate
            with the trunk.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trunking.twilio.com/v1/Trunks/{trunk_sid}/IpAccessControlLists?](
    https://trunking.twilio.com/v1/Trunks/{trunk_sid}/IpAccessControlLists?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://trunking.twilio.com/v1/Trunks/{trunk_sid}/IpAccessControlLists"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "ip_access_control_list_sid": ip_access_control_list_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_trunks_trunk_sid_ip_access_control_lists_sid(
    trunk_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Remove an associated IP Access Control List from a Trunk.

    Args:
        trunk_sid:
            Trunk sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trunking.twilio.com/v1/Trunks/{trunk_sid}/IpAccessControlLists/{sid}?](
    https://trunking.twilio.com/v1/Trunks/{trunk_sid}/IpAccessControlLists/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://trunking.twilio.com/v1/Trunks/{trunk_sid}/IpAccessControlLists/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_trunks_trunk_sid_ip_access_control_lists_sid(
    trunk_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        trunk_sid:
            Trunk sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trunking.twilio.com/v1/Trunks/{trunk_sid}/IpAccessControlLists/{sid}?](
    https://trunking.twilio.com/v1/Trunks/{trunk_sid}/IpAccessControlLists/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://trunking.twilio.com/v1/Trunks/{trunk_sid}/IpAccessControlLists/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_trunks_trunk_sid_origination_urls(
    trunk_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        trunk_sid:
            Trunk sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trunking.twilio.com/v1/Trunks/{trunk_sid}/OriginationUrls?&page_size=%s](
    https://trunking.twilio.com/v1/Trunks/{trunk_sid}/OriginationUrls?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://trunking.twilio.com/v1/Trunks/{trunk_sid}/OriginationUrls"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_trunks_trunk_sid_origination_urls(
    trunk_sid: str,
    twilio_credentials: "TwilioCredentials",
    enabled: bool = None,
    friendly_name: str = None,
    priority: int = None,
    sip_url: str = None,
    weight: int = None,
) -> Dict[str, Any]:
    """


    Args:
        trunk_sid:
            Trunk sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        enabled:
            Whether the URL is enabled. The default is `true`.
        friendly_name:
            A descriptive string that you create to describe the resource. It can be
            up to 64 characters long.
        priority:
            The relative importance of the URI. Can be an integer from 0 to 65535,
            inclusive, and the default is 10. The lowest number
            represents the most important URI.
        sip_url:
            The SIP address you want Twilio to route your Origination calls to. This
            must be a `sip:` schema.
        weight:
            The value that determines the relative share of the load the URI should
            receive compared to other URIs with the same priority. Can
            be an integer from 1 to 65535, inclusive, and the default is
            10. URLs with higher values receive more load than those
            with lower ones with the same priority.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trunking.twilio.com/v1/Trunks/{trunk_sid}/OriginationUrls?](
    https://trunking.twilio.com/v1/Trunks/{trunk_sid}/OriginationUrls?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://trunking.twilio.com/v1/Trunks/{trunk_sid}/OriginationUrls"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "enabled": enabled,
        "friendly_name": friendly_name,
        "priority": priority,
        "sip_url": sip_url,
        "weight": weight,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_trunks_trunk_sid_origination_urls_sid(
    trunk_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        trunk_sid:
            Trunk sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trunking.twilio.com/v1/Trunks/{trunk_sid}/OriginationUrls/{sid}?](
    https://trunking.twilio.com/v1/Trunks/{trunk_sid}/OriginationUrls/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://trunking.twilio.com/v1/Trunks/{trunk_sid}/OriginationUrls/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_trunks_trunk_sid_origination_urls_sid(
    trunk_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        trunk_sid:
            Trunk sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trunking.twilio.com/v1/Trunks/{trunk_sid}/OriginationUrls/{sid}?](
    https://trunking.twilio.com/v1/Trunks/{trunk_sid}/OriginationUrls/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://trunking.twilio.com/v1/Trunks/{trunk_sid}/OriginationUrls/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_trunks_trunk_sid_origination_urls_sid(
    trunk_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    enabled: bool = None,
    friendly_name: str = None,
    priority: int = None,
    sip_url: str = None,
    weight: int = None,
) -> Dict[str, Any]:
    """


    Args:
        trunk_sid:
            Trunk sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        enabled:
            Whether the URL is enabled. The default is `true`.
        friendly_name:
            A descriptive string that you create to describe the resource. It can be
            up to 64 characters long.
        priority:
            The relative importance of the URI. Can be an integer from 0 to 65535,
            inclusive, and the default is 10. The lowest number
            represents the most important URI.
        sip_url:
            The SIP address you want Twilio to route your Origination calls to. This
            must be a `sip:` schema. `sips` is NOT supported.
        weight:
            The value that determines the relative share of the load the URI should
            receive compared to other URIs with the same priority. Can
            be an integer from 1 to 65535, inclusive, and the default is
            10. URLs with higher values receive more load than those
            with lower ones with the same priority.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trunking.twilio.com/v1/Trunks/{trunk_sid}/OriginationUrls/{sid}?](
    https://trunking.twilio.com/v1/Trunks/{trunk_sid}/OriginationUrls/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://trunking.twilio.com/v1/Trunks/{trunk_sid}/OriginationUrls/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "enabled": enabled,
        "friendly_name": friendly_name,
        "priority": priority,
        "sip_url": sip_url,
        "weight": weight,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_trunks_trunk_sid_phone_numbers(
    trunk_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        trunk_sid:
            Trunk sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trunking.twilio.com/v1/Trunks/{trunk_sid}/PhoneNumbers?&page_size=%s](
    https://trunking.twilio.com/v1/Trunks/{trunk_sid}/PhoneNumbers?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://trunking.twilio.com/v1/Trunks/{trunk_sid}/PhoneNumbers"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_trunks_trunk_sid_phone_numbers(
    trunk_sid: str,
    twilio_credentials: "TwilioCredentials",
    phone_number_sid: str = None,
) -> Dict[str, Any]:
    """


    Args:
        trunk_sid:
            Trunk sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        phone_number_sid:
            The SID of the [Incoming Phone
            Number](https://www.twilio.com/docs/phone-
            numbers/api/incomingphonenumber-resource) that you want to
            associate with the trunk.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trunking.twilio.com/v1/Trunks/{trunk_sid}/PhoneNumbers?](
    https://trunking.twilio.com/v1/Trunks/{trunk_sid}/PhoneNumbers?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://trunking.twilio.com/v1/Trunks/{trunk_sid}/PhoneNumbers"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "phone_number_sid": phone_number_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_trunks_trunk_sid_phone_numbers_sid(
    trunk_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        trunk_sid:
            Trunk sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trunking.twilio.com/v1/Trunks/{trunk_sid}/PhoneNumbers/{sid}?](
    https://trunking.twilio.com/v1/Trunks/{trunk_sid}/PhoneNumbers/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = (
        f"https://trunking.twilio.com/v1/Trunks/{trunk_sid}/PhoneNumbers/{sid}"  # noqa
    )
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_trunks_trunk_sid_phone_numbers_sid(
    trunk_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        trunk_sid:
            Trunk sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trunking.twilio.com/v1/Trunks/{trunk_sid}/PhoneNumbers/{sid}?](
    https://trunking.twilio.com/v1/Trunks/{trunk_sid}/PhoneNumbers/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = (
        f"https://trunking.twilio.com/v1/Trunks/{trunk_sid}/PhoneNumbers/{sid}"  # noqa
    )
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_trunks_trunk_sid_recording(
    trunk_sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        trunk_sid:
            Trunk sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trunking.twilio.com/v1/Trunks/{trunk_sid}/Recording?](
    https://trunking.twilio.com/v1/Trunks/{trunk_sid}/Recording?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://trunking.twilio.com/v1/Trunks/{trunk_sid}/Recording"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_trunks_trunk_sid_recording(
    trunk_sid: str,
    twilio_credentials: "TwilioCredentials",
    mode: str = None,
    trim: str = None,
) -> Dict[str, Any]:
    """


    Args:
        trunk_sid:
            Trunk sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        mode:
            The recording mode for the trunk. Can be do-not-record (default),
            record-from-ringing, record-from-answer, record-from-
            ringing-dual, or record-from-answer-dual.
        trim:
            The recording trim setting for the trunk. Can be do-not-trim (default)
            or trim-silence.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trunking.twilio.com/v1/Trunks/{trunk_sid}/Recording?](
    https://trunking.twilio.com/v1/Trunks/{trunk_sid}/Recording?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 202 | Accepted. |
    """  # noqa
    url = f"https://trunking.twilio.com/v1/Trunks/{trunk_sid}/Recording"  # noqa
    responses = {
        202: "Accepted.",  # noqa
    }

    data = {
        "mode": mode,
        "trim": trim,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_customer_profiles(
    twilio_credentials: "TwilioCredentials",
    status: str = None,
    friendly_name: str = None,
    policy_sid: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Customer-Profiles for an account.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        status:
            The verification status of the Customer-Profile resource.
        friendly_name:
            The string that you assigned to describe the resource.
        policy_sid:
            The unique string of a policy that is associated to the Customer-Profile
            resource.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/CustomerProfiles?&status=%s&friendly_name=%s&policy_sid=%s&page_size=%s](
    https://trusthub.twilio.com/v1/CustomerProfiles?&status=%s&friendly_name=%s&policy_sid=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://trusthub.twilio.com/v1/CustomerProfiles"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "status": status,
        "friendly_name": friendly_name,
        "policy_sid": policy_sid,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_customer_profiles(
    twilio_credentials: "TwilioCredentials",
    email: str = None,
    friendly_name: str = None,
    policy_sid: str = None,
    status_callback: str = None,
) -> Dict[str, Any]:
    """
    Create a new Customer-Profile.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        email:
            The email address that will receive updates when the Customer-Profile
            resource changes status.
        friendly_name:
            The string that you assigned to describe the resource.
        policy_sid:
            The unique string of a policy that is associated to the Customer-Profile
            resource.
        status_callback:
            The URL we call to inform your application of status changes.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/CustomerProfiles?](
    https://trusthub.twilio.com/v1/CustomerProfiles?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://trusthub.twilio.com/v1/CustomerProfiles"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "email": email,
        "friendly_name": friendly_name,
        "policy_sid": policy_sid,
        "status_callback": status_callback,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_customer_profiles_customer_profile_sid_channel_endpoint_assignments(
    customer_profile_sid: str,
    twilio_credentials: "TwilioCredentials",
    channel_endpoint_sid: str = None,
    channel_endpoint_sids: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Assigned Items for an account.

    Args:
        customer_profile_sid:
            Customer profile sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        channel_endpoint_sid:
            The SID of an channel endpoint.
        channel_endpoint_sids:
            comma separated list of channel endpoint sids.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/CustomerProfiles/{customer_profile_sid}/ChannelEndpointAssignments?&channel_endpoint_sid=%s&channel_endpoint_sids=%s&page_size=%s](
    https://trusthub.twilio.com/v1/CustomerProfiles/{customer_profile_sid}/ChannelEndpointAssignments?&channel_endpoint_sid=%s&channel_endpoint_sids=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/CustomerProfiles/{customer_profile_sid}/ChannelEndpointAssignments"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "channel_endpoint_sid": channel_endpoint_sid,
        "channel_endpoint_sids": channel_endpoint_sids,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_customer_profiles_customer_profile_sid_channel_endpoint_assignments(
    customer_profile_sid: str,
    twilio_credentials: "TwilioCredentials",
    channel_endpoint_sid: str = None,
    channel_endpoint_type: str = None,
) -> Dict[str, Any]:
    """
    Create a new Assigned Item.

    Args:
        customer_profile_sid:
            Customer profile sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        channel_endpoint_sid:
            The SID of an channel endpoint.
        channel_endpoint_type:
            The type of channel endpoint. eg: phone-number.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/CustomerProfiles/{customer_profile_sid}/ChannelEndpointAssignments?](
    https://trusthub.twilio.com/v1/CustomerProfiles/{customer_profile_sid}/ChannelEndpointAssignments?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/CustomerProfiles/{customer_profile_sid}/ChannelEndpointAssignments"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "channel_endpoint_sid": channel_endpoint_sid,
        "channel_endpoint_type": channel_endpoint_type,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_customer_profiles_customer_profile_sid_channel_endpoint_assignments_sid(
    customer_profile_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Remove an Assignment Item Instance.

    Args:
        customer_profile_sid:
            Customer profile sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/CustomerProfiles/{customer_profile_sid}/ChannelEndpointAssignments/{sid}?](
    https://trusthub.twilio.com/v1/CustomerProfiles/{customer_profile_sid}/ChannelEndpointAssignments/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/CustomerProfiles/{customer_profile_sid}/ChannelEndpointAssignments/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_customer_profiles_customer_profile_sid_channel_endpoint_assignments_sid(
    customer_profile_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch specific Assigned Item Instance.

    Args:
        customer_profile_sid:
            Customer profile sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/CustomerProfiles/{customer_profile_sid}/ChannelEndpointAssignments/{sid}?](
    https://trusthub.twilio.com/v1/CustomerProfiles/{customer_profile_sid}/ChannelEndpointAssignments/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/CustomerProfiles/{customer_profile_sid}/ChannelEndpointAssignments/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_customer_profiles_customer_profile_sid_entity_assignments(
    customer_profile_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Assigned Items for an account.

    Args:
        customer_profile_sid:
            Customer profile sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/CustomerProfiles/{customer_profile_sid}/EntityAssignments?&page_size=%s](
    https://trusthub.twilio.com/v1/CustomerProfiles/{customer_profile_sid}/EntityAssignments?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/CustomerProfiles/{customer_profile_sid}/EntityAssignments"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_customer_profiles_customer_profile_sid_entity_assignments(
    customer_profile_sid: str,
    twilio_credentials: "TwilioCredentials",
    object_sid: str = None,
) -> Dict[str, Any]:
    """
    Create a new Assigned Item.

    Args:
        customer_profile_sid:
            Customer profile sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        object_sid:
            The SID of an object bag that holds information of the different items.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/CustomerProfiles/{customer_profile_sid}/EntityAssignments?](
    https://trusthub.twilio.com/v1/CustomerProfiles/{customer_profile_sid}/EntityAssignments?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/CustomerProfiles/{customer_profile_sid}/EntityAssignments"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "object_sid": object_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_customer_profiles_customer_profile_sid_entity_assignments_sid(
    customer_profile_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Remove an Assignment Item Instance.

    Args:
        customer_profile_sid:
            Customer profile sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/CustomerProfiles/{customer_profile_sid}/EntityAssignments/{sid}?](
    https://trusthub.twilio.com/v1/CustomerProfiles/{customer_profile_sid}/EntityAssignments/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/CustomerProfiles/{customer_profile_sid}/EntityAssignments/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_customer_profiles_customer_profile_sid_entity_assignments_sid(
    customer_profile_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch specific Assigned Item Instance.

    Args:
        customer_profile_sid:
            Customer profile sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/CustomerProfiles/{customer_profile_sid}/EntityAssignments/{sid}?](
    https://trusthub.twilio.com/v1/CustomerProfiles/{customer_profile_sid}/EntityAssignments/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/CustomerProfiles/{customer_profile_sid}/EntityAssignments/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_customer_profiles_customer_profile_sid_evaluations(
    customer_profile_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of Evaluations associated to the customer_profile resource.

    Args:
        customer_profile_sid:
            Customer profile sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/CustomerProfiles/{customer_profile_sid}/Evaluations?&page_size=%s](
    https://trusthub.twilio.com/v1/CustomerProfiles/{customer_profile_sid}/Evaluations?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/CustomerProfiles/{customer_profile_sid}/Evaluations"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_customer_profiles_customer_profile_sid_evaluations(
    customer_profile_sid: str,
    twilio_credentials: "TwilioCredentials",
    policy_sid: str = None,
) -> Dict[str, Any]:
    """
    Create a new Evaluation.

    Args:
        customer_profile_sid:
            Customer profile sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        policy_sid:
            The unique string of a policy that is associated to the customer_profile
            resource.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/CustomerProfiles/{customer_profile_sid}/Evaluations?](
    https://trusthub.twilio.com/v1/CustomerProfiles/{customer_profile_sid}/Evaluations?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/CustomerProfiles/{customer_profile_sid}/Evaluations"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "policy_sid": policy_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_customer_profiles_customer_profile_sid_evaluations_sid(
    customer_profile_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch specific Evaluation Instance.

    Args:
        customer_profile_sid:
            Customer profile sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/CustomerProfiles/{customer_profile_sid}/Evaluations/{sid}?](
    https://trusthub.twilio.com/v1/CustomerProfiles/{customer_profile_sid}/Evaluations/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/CustomerProfiles/{customer_profile_sid}/Evaluations/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def delete_v1_customer_profiles_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete a specific Customer-Profile.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/CustomerProfiles/{sid}?](
    https://trusthub.twilio.com/v1/CustomerProfiles/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/CustomerProfiles/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_customer_profiles_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a specific Customer-Profile instance.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/CustomerProfiles/{sid}?](
    https://trusthub.twilio.com/v1/CustomerProfiles/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/CustomerProfiles/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_customer_profiles_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    email: str = None,
    friendly_name: str = None,
    status: str = None,
    status_callback: str = None,
) -> Dict[str, Any]:
    """
    Updates a Customer-Profile in an account.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        email:
            The email address that will receive updates when the Customer-Profile
            resource changes status.
        friendly_name:
            The string that you assigned to describe the resource.
        status:
            The verification status of the Customer-Profile resource.
        status_callback:
            The URL we call to inform your application of status changes.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/CustomerProfiles/{sid}?](
    https://trusthub.twilio.com/v1/CustomerProfiles/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/CustomerProfiles/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "email": email,
        "friendly_name": friendly_name,
        "status": status,
        "status_callback": status_callback,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_end_user_types(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all End-User Types.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/EndUserTypes?&page_size=%s](
    https://trusthub.twilio.com/v1/EndUserTypes?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://trusthub.twilio.com/v1/EndUserTypes"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_end_user_types_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a specific End-User Type Instance.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/EndUserTypes/{sid}?](
    https://trusthub.twilio.com/v1/EndUserTypes/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/EndUserTypes/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_end_users(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all End User for an account.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/EndUsers?&page_size=%s](
    https://trusthub.twilio.com/v1/EndUsers?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://trusthub.twilio.com/v1/EndUsers"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_end_users(
    twilio_credentials: "TwilioCredentials",
    attributes: str = None,
    friendly_name: str = None,
    type: str = None,
) -> Dict[str, Any]:
    """
    Create a new End User.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        attributes:
            The set of parameters that are the attributes of the End User resource
            which are derived End User Types.
        friendly_name:
            The string that you assigned to describe the resource.
        type:
            The type of end user of the Bundle resource - can be `individual` or
            `business`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/EndUsers?](
    https://trusthub.twilio.com/v1/EndUsers?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://trusthub.twilio.com/v1/EndUsers"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "attributes": attributes,
        "friendly_name": friendly_name,
        "type": type,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_end_users_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete a specific End User.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/EndUsers/{sid}?](
    https://trusthub.twilio.com/v1/EndUsers/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/EndUsers/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_end_users_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch specific End User Instance.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/EndUsers/{sid}?](
    https://trusthub.twilio.com/v1/EndUsers/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/EndUsers/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_end_users_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    attributes: str = None,
    friendly_name: str = None,
) -> Dict[str, Any]:
    """
    Update an existing End User.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        attributes:
            The set of parameters that are the attributes of the End User resource
            which are derived End User Types.
        friendly_name:
            The string that you assigned to describe the resource.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/EndUsers/{sid}?](
    https://trusthub.twilio.com/v1/EndUsers/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/EndUsers/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "attributes": attributes,
        "friendly_name": friendly_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_policies(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Policys.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/Policies?&page_size=%s](
    https://trusthub.twilio.com/v1/Policies?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://trusthub.twilio.com/v1/Policies"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_policies_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch specific Policy Instance.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/Policies/{sid}?](
    https://trusthub.twilio.com/v1/Policies/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/Policies/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_supporting_document_types(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Supporting Document Types.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/SupportingDocumentTypes?&page_size=%s](
    https://trusthub.twilio.com/v1/SupportingDocumentTypes?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://trusthub.twilio.com/v1/SupportingDocumentTypes"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_supporting_document_types_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a specific Supporting Document Type Instance.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/SupportingDocumentTypes/{sid}?](
    https://trusthub.twilio.com/v1/SupportingDocumentTypes/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/SupportingDocumentTypes/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_supporting_documents(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Supporting Document for an account.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/SupportingDocuments?&page_size=%s](
    https://trusthub.twilio.com/v1/SupportingDocuments?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://trusthub.twilio.com/v1/SupportingDocuments"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_supporting_documents(
    twilio_credentials: "TwilioCredentials",
    attributes: str = None,
    friendly_name: str = None,
    type: str = None,
) -> Dict[str, Any]:
    """
    Create a new Supporting Document.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        attributes:
            The set of parameters that are the attributes of the Supporting
            Documents resource which are derived Supporting Document
            Types.
        friendly_name:
            The string that you assigned to describe the resource.
        type:
            The type of the Supporting Document.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/SupportingDocuments?](
    https://trusthub.twilio.com/v1/SupportingDocuments?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://trusthub.twilio.com/v1/SupportingDocuments"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "attributes": attributes,
        "friendly_name": friendly_name,
        "type": type,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_supporting_documents_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete a specific Supporting Document.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/SupportingDocuments/{sid}?](
    https://trusthub.twilio.com/v1/SupportingDocuments/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/SupportingDocuments/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_supporting_documents_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch specific Supporting Document Instance.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/SupportingDocuments/{sid}?](
    https://trusthub.twilio.com/v1/SupportingDocuments/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/SupportingDocuments/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_supporting_documents_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    attributes: str = None,
    friendly_name: str = None,
) -> Dict[str, Any]:
    """
    Update an existing Supporting Document.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        attributes:
            The set of parameters that are the attributes of the Supporting Document
            resource which are derived Supporting Document Types.
        friendly_name:
            The string that you assigned to describe the resource.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/SupportingDocuments/{sid}?](
    https://trusthub.twilio.com/v1/SupportingDocuments/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/SupportingDocuments/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "attributes": attributes,
        "friendly_name": friendly_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_trust_products(
    twilio_credentials: "TwilioCredentials",
    status: str = None,
    friendly_name: str = None,
    policy_sid: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Customer-Profiles for an account.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        status:
            The verification status of the Customer-Profile resource.
        friendly_name:
            The string that you assigned to describe the resource.
        policy_sid:
            The unique string of a policy that is associated to the Customer-Profile
            resource.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/TrustProducts?&status=%s&friendly_name=%s&policy_sid=%s&page_size=%s](
    https://trusthub.twilio.com/v1/TrustProducts?&status=%s&friendly_name=%s&policy_sid=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://trusthub.twilio.com/v1/TrustProducts"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "status": status,
        "friendly_name": friendly_name,
        "policy_sid": policy_sid,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_trust_products(
    twilio_credentials: "TwilioCredentials",
    email: str = None,
    friendly_name: str = None,
    policy_sid: str = None,
    status_callback: str = None,
) -> Dict[str, Any]:
    """
    Create a new Customer-Profile.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        email:
            The email address that will receive updates when the Customer-Profile
            resource changes status.
        friendly_name:
            The string that you assigned to describe the resource.
        policy_sid:
            The unique string of a policy that is associated to the Customer-Profile
            resource.
        status_callback:
            The URL we call to inform your application of status changes.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/TrustProducts?](
    https://trusthub.twilio.com/v1/TrustProducts?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://trusthub.twilio.com/v1/TrustProducts"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "email": email,
        "friendly_name": friendly_name,
        "policy_sid": policy_sid,
        "status_callback": status_callback,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_trust_products_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete a specific Customer-Profile.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/TrustProducts/{sid}?](
    https://trusthub.twilio.com/v1/TrustProducts/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/TrustProducts/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_trust_products_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a specific Customer-Profile instance.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/TrustProducts/{sid}?](
    https://trusthub.twilio.com/v1/TrustProducts/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/TrustProducts/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_trust_products_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    email: str = None,
    friendly_name: str = None,
    status: str = None,
    status_callback: str = None,
) -> Dict[str, Any]:
    """
    Updates a Customer-Profile in an account.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        email:
            The email address that will receive updates when the Customer-Profile
            resource changes status.
        friendly_name:
            The string that you assigned to describe the resource.
        status:
            The verification status of the Customer-Profile resource.
        status_callback:
            The URL we call to inform your application of status changes.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/TrustProducts/{sid}?](
    https://trusthub.twilio.com/v1/TrustProducts/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/TrustProducts/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "email": email,
        "friendly_name": friendly_name,
        "status": status,
        "status_callback": status_callback,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_trust_products_trust_product_sid_channel_endpoint_assignments(
    trust_product_sid: str,
    twilio_credentials: "TwilioCredentials",
    channel_endpoint_sid: str = None,
    channel_endpoint_sids: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Assigned Items for an account.

    Args:
        trust_product_sid:
            Trust product sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        channel_endpoint_sid:
            The SID of an channel endpoint.
        channel_endpoint_sids:
            comma separated list of channel endpoint sids.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/TrustProducts/{trust_product_sid}/ChannelEndpointAssignments?&channel_endpoint_sid=%s&channel_endpoint_sids=%s&page_size=%s](
    https://trusthub.twilio.com/v1/TrustProducts/{trust_product_sid}/ChannelEndpointAssignments?&channel_endpoint_sid=%s&channel_endpoint_sids=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/TrustProducts/{trust_product_sid}/ChannelEndpointAssignments"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "channel_endpoint_sid": channel_endpoint_sid,
        "channel_endpoint_sids": channel_endpoint_sids,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_trust_products_trust_product_sid_channel_endpoint_assignments(
    trust_product_sid: str,
    twilio_credentials: "TwilioCredentials",
    channel_endpoint_sid: str = None,
    channel_endpoint_type: str = None,
) -> Dict[str, Any]:
    """
    Create a new Assigned Item.

    Args:
        trust_product_sid:
            Trust product sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        channel_endpoint_sid:
            The SID of an channel endpoint.
        channel_endpoint_type:
            The type of channel endpoint. eg: phone-number.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/TrustProducts/{trust_product_sid}/ChannelEndpointAssignments?](
    https://trusthub.twilio.com/v1/TrustProducts/{trust_product_sid}/ChannelEndpointAssignments?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/TrustProducts/{trust_product_sid}/ChannelEndpointAssignments"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "channel_endpoint_sid": channel_endpoint_sid,
        "channel_endpoint_type": channel_endpoint_type,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_trust_products_trust_product_sid_channel_endpoint_assignments_sid(
    trust_product_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Remove an Assignment Item Instance.

    Args:
        trust_product_sid:
            Trust product sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/TrustProducts/{trust_product_sid}/ChannelEndpointAssignments/{sid}?](
    https://trusthub.twilio.com/v1/TrustProducts/{trust_product_sid}/ChannelEndpointAssignments/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/TrustProducts/{trust_product_sid}/ChannelEndpointAssignments/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_trust_products_trust_product_sid_channel_endpoint_assignments_sid(
    trust_product_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch specific Assigned Item Instance.

    Args:
        trust_product_sid:
            Trust product sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/TrustProducts/{trust_product_sid}/ChannelEndpointAssignments/{sid}?](
    https://trusthub.twilio.com/v1/TrustProducts/{trust_product_sid}/ChannelEndpointAssignments/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/TrustProducts/{trust_product_sid}/ChannelEndpointAssignments/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_trust_products_trust_product_sid_entity_assignments(
    trust_product_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of all Assigned Items for an account.

    Args:
        trust_product_sid:
            Trust product sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/TrustProducts/{trust_product_sid}/EntityAssignments?&page_size=%s](
    https://trusthub.twilio.com/v1/TrustProducts/{trust_product_sid}/EntityAssignments?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/TrustProducts/{trust_product_sid}/EntityAssignments"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_trust_products_trust_product_sid_entity_assignments(
    trust_product_sid: str,
    twilio_credentials: "TwilioCredentials",
    object_sid: str = None,
) -> Dict[str, Any]:
    """
    Create a new Assigned Item.

    Args:
        trust_product_sid:
            Trust product sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        object_sid:
            The SID of an object bag that holds information of the different items.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/TrustProducts/{trust_product_sid}/EntityAssignments?](
    https://trusthub.twilio.com/v1/TrustProducts/{trust_product_sid}/EntityAssignments?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/TrustProducts/{trust_product_sid}/EntityAssignments"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "object_sid": object_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_trust_products_trust_product_sid_entity_assignments_sid(
    trust_product_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Remove an Assignment Item Instance.

    Args:
        trust_product_sid:
            Trust product sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/TrustProducts/{trust_product_sid}/EntityAssignments/{sid}?](
    https://trusthub.twilio.com/v1/TrustProducts/{trust_product_sid}/EntityAssignments/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/TrustProducts/{trust_product_sid}/EntityAssignments/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_trust_products_trust_product_sid_entity_assignments_sid(
    trust_product_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch specific Assigned Item Instance.

    Args:
        trust_product_sid:
            Trust product sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/TrustProducts/{trust_product_sid}/EntityAssignments/{sid}?](
    https://trusthub.twilio.com/v1/TrustProducts/{trust_product_sid}/EntityAssignments/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/TrustProducts/{trust_product_sid}/EntityAssignments/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_trust_products_trust_product_sid_evaluations(
    trust_product_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of Evaluations associated to the trust_product resource.

    Args:
        trust_product_sid:
            Trust product sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/TrustProducts/{trust_product_sid}/Evaluations?&page_size=%s](
    https://trusthub.twilio.com/v1/TrustProducts/{trust_product_sid}/Evaluations?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/TrustProducts/{trust_product_sid}/Evaluations"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_trust_products_trust_product_sid_evaluations(
    trust_product_sid: str,
    twilio_credentials: "TwilioCredentials",
    policy_sid: str = None,
) -> Dict[str, Any]:
    """
    Create a new Evaluation.

    Args:
        trust_product_sid:
            Trust product sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        policy_sid:
            The unique string of a policy that is associated to the customer_profile
            resource.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/TrustProducts/{trust_product_sid}/Evaluations?](
    https://trusthub.twilio.com/v1/TrustProducts/{trust_product_sid}/Evaluations?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/TrustProducts/{trust_product_sid}/Evaluations"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "policy_sid": policy_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_trust_products_trust_product_sid_evaluations_sid(
    trust_product_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch specific Evaluation Instance.

    Args:
        trust_product_sid:
            Trust product sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://trusthub.twilio.com/v1/TrustProducts/{trust_product_sid}/Evaluations/{sid}?](
    https://trusthub.twilio.com/v1/TrustProducts/{trust_product_sid}/Evaluations/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://trusthub.twilio.com/v1/TrustProducts/{trust_product_sid}/Evaluations/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_composition_hooks(
    twilio_credentials: "TwilioCredentials",
    enabled: bool = None,
    date_created_after: str = None,
    date_created_before: str = None,
    friendly_name: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """
    List of all Recording CompositionHook resources.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        enabled:
            Read only CompositionHook resources with an `enabled` value that matches
            this parameter.
        date_created_after:
            Read only CompositionHook resources created on or after this [ISO
            8601](https://en.wikipedia.org/wiki/ISO_8601) datetime with
            time zone.
        date_created_before:
            Read only CompositionHook resources created before this [ISO
            8601](https://en.wikipedia.org/wiki/ISO_8601) datetime with
            time zone.
        friendly_name:
            Read only CompositionHook resources with friendly names that match this
            string. The match is not case sensitive and can include
            asterisk `*` characters as wildcard match.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://video.twilio.com/v1/CompositionHooks?&enabled=%s&date_created_after=%s&date_created_before=%s&friendly_name=%s&page_size=%s](
    https://video.twilio.com/v1/CompositionHooks?&enabled=%s&date_created_after=%s&date_created_before=%s&friendly_name=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://video.twilio.com/v1/CompositionHooks"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "enabled": enabled,
        "date_created_after": date_created_after,
        "date_created_before": date_created_before,
        "friendly_name": friendly_name,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_composition_hooks(
    twilio_credentials: "TwilioCredentials",
    audio_sources: list = None,
    audio_sources_excluded: list = None,
    enabled: bool = None,
    format: str = None,
    friendly_name: str = None,
    resolution: str = None,
    status_callback: str = None,
    status_callback_method: str = None,
    trim: bool = None,
    video_layout: str = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        audio_sources:
            An array of track names from the same group room to merge into the
            compositions created by the composition hook. Can include
            zero or more track names. A composition triggered by the
            composition hook includes all audio sources specified in
            `audio_sources` except those specified in
            `audio_sources_excluded`. The track names in this parameter
            can include an asterisk as a wild card character, which
            matches zero or more characters in a track name. For
            example, `student*` includes tracks named `student` as well
            as `studentTeam`.
        audio_sources_excluded:
            An array of track names to exclude. A composition triggered by the
            composition hook includes all audio sources specified in
            `audio_sources` except for those specified in
            `audio_sources_excluded`. The track names in this parameter
            can include an asterisk as a wild card character, which
            matches zero or more characters in a track name. For
            example, `student*` excludes `student` as well as
            `studentTeam`. This parameter can also be empty.
        enabled:
            Whether the composition hook is active. When `true`, the composition
            hook will be triggered for every completed Group Room in the
            account. When `false`, the composition hook will never be
            triggered.
        format:
            The container format of the media files used by the compositions created
            by the composition hook. Can be: `mp4` or `webm` and the
            default is `webm`. If `mp4` or `webm`, `audio_sources` must
            have one or more tracks and/or a `video_layout` element must
            contain a valid `video_sources` list, otherwise an error
            occurs.
        friendly_name:
            A descriptive string that you create to describe the resource. It can be
            up to  100 characters long and it must be unique within the
            account.
        resolution:
            A string that describes the columns (width) and rows (height) of the
            generated composed video in pixels. Defaults to `640x480`.
            The string's format is `{width}x{height}` where:
            * 16 <= `{width}` <= 1280 * 16 <= `{height}` <= 1280 *
            `{width}` * `{height}` <= 921,600  Typical values are:
            * HD = `1280x720` * PAL = `1024x576` * VGA = `640x480` * CIF
            = `320x240`  Note that the `resolution` imposes an aspect
            ratio to the resulting composition. When the original video
            tracks are constrained by the aspect ratio, they are scaled
            to fit. See [Specifying Video
            Layouts](https://www.twilio.com/docs/video/api/compositions-
            resource
            specifying-video-layouts) for more info.
        status_callback:
            The URL we should call using the `status_callback_method` to send status
            information to your application on every composition event.
            If not provided, status callback events will not be
            dispatched.
        status_callback_method:
            The HTTP method we should use to call `status_callback`. Can be: `POST`
            or `GET` and the default is `POST`.
        trim:
            Whether to clip the intervals where there is no active media in the
            Compositions triggered by the composition hook. The default
            is `true`. Compositions with `trim` enabled are shorter when
            the Room is created and no Participant joins for a while as
            well as if all the Participants leave the room and join
            later, because those gaps will be removed. See [Specifying
            Video
            Layouts](https://www.twilio.com/docs/video/api/compositions-
            resource
            specifying-video-layouts) for more info.
        video_layout:
            An object that describes the video layout of the composition hook in
            terms of regions. See [Specifying Video
            Layouts](https://www.twilio.com/docs/video/api/compositions-
            resource
            specifying-video-layouts) for more info.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://video.twilio.com/v1/CompositionHooks?](
    https://video.twilio.com/v1/CompositionHooks?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://video.twilio.com/v1/CompositionHooks"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "audio_sources": audio_sources,
        "audio_sources_excluded": audio_sources_excluded,
        "enabled": enabled,
        "format": format,
        "friendly_name": friendly_name,
        "resolution": resolution,
        "status_callback": status_callback,
        "status_callback_method": status_callback_method,
        "trim": trim,
        "video_layout": video_layout,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_composition_hooks_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete a Recording CompositionHook resource identified by a `CompositionHook
    SID`.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://video.twilio.com/v1/CompositionHooks/{sid}?](
    https://video.twilio.com/v1/CompositionHooks/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://video.twilio.com/v1/CompositionHooks/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_composition_hooks_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Returns a single CompositionHook resource identified by a CompositionHook SID.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://video.twilio.com/v1/CompositionHooks/{sid}?](
    https://video.twilio.com/v1/CompositionHooks/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://video.twilio.com/v1/CompositionHooks/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_composition_hooks_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    audio_sources: list = None,
    audio_sources_excluded: list = None,
    enabled: bool = None,
    format: str = None,
    friendly_name: str = None,
    resolution: str = None,
    status_callback: str = None,
    status_callback_method: str = None,
    trim: bool = None,
    video_layout: str = None,
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        audio_sources:
            An array of track names from the same group room to merge into the
            compositions created by the composition hook. Can include
            zero or more track names. A composition triggered by the
            composition hook includes all audio sources specified in
            `audio_sources` except those specified in
            `audio_sources_excluded`. The track names in this parameter
            can include an asterisk as a wild card character, which
            matches zero or more characters in a track name. For
            example, `student*` includes tracks named `student` as well
            as `studentTeam`.
        audio_sources_excluded:
            An array of track names to exclude. A composition triggered by the
            composition hook includes all audio sources specified in
            `audio_sources` except for those specified in
            `audio_sources_excluded`. The track names in this parameter
            can include an asterisk as a wild card character, which
            matches zero or more characters in a track name. For
            example, `student*` excludes `student` as well as
            `studentTeam`. This parameter can also be empty.
        enabled:
            Whether the composition hook is active. When `true`, the composition
            hook will be triggered for every completed Group Room in the
            account. When `false`, the composition hook never triggers.
        format:
            The container format of the media files used by the compositions created
            by the composition hook. Can be: `mp4` or `webm` and the
            default is `webm`. If `mp4` or `webm`, `audio_sources` must
            have one or more tracks and/or a `video_layout` element must
            contain a valid `video_sources` list, otherwise an error
            occurs.
        friendly_name:
            A descriptive string that you create to describe the resource. It can be
            up to  100 characters long and it must be unique within the
            account.
        resolution:
            A string that describes the columns (width) and rows (height) of the
            generated composed video in pixels. Defaults to `640x480`.
            The string's format is `{width}x{height}` where:
            * 16 <= `{width}` <= 1280 * 16 <= `{height}` <= 1280 *
            `{width}` * `{height}` <= 921,600  Typical values are:
            * HD = `1280x720` * PAL = `1024x576` * VGA = `640x480` * CIF
            = `320x240`  Note that the `resolution` imposes an aspect
            ratio to the resulting composition. When the original video
            tracks are constrained by the aspect ratio, they are scaled
            to fit. See [Specifying Video
            Layouts](https://www.twilio.com/docs/video/api/compositions-
            resource
            specifying-video-layouts) for more info.
        status_callback:
            The URL we should call using the `status_callback_method` to send status
            information to your application on every composition event.
            If not provided, status callback events will not be
            dispatched.
        status_callback_method:
            The HTTP method we should use to call `status_callback`. Can be: `POST`
            or `GET` and the default is `POST`.
        trim:
            Whether to clip the intervals where there is no active media in the
            compositions triggered by the composition hook. The default
            is `true`. Compositions with `trim` enabled are shorter when
            the Room is created and no Participant joins for a while as
            well as if all the Participants leave the room and join
            later, because those gaps will be removed. See [Specifying
            Video
            Layouts](https://www.twilio.com/docs/video/api/compositions-
            resource
            specifying-video-layouts) for more info.
        video_layout:
            A JSON object that describes the video layout of the composition hook in
            terms of regions. See [Specifying Video
            Layouts](https://www.twilio.com/docs/video/api/compositions-
            resource
            specifying-video-layouts) for more info.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://video.twilio.com/v1/CompositionHooks/{sid}?](
    https://video.twilio.com/v1/CompositionHooks/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://video.twilio.com/v1/CompositionHooks/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "audio_sources": audio_sources,
        "audio_sources_excluded": audio_sources_excluded,
        "enabled": enabled,
        "format": format,
        "friendly_name": friendly_name,
        "resolution": resolution,
        "status_callback": status_callback,
        "status_callback_method": status_callback_method,
        "trim": trim,
        "video_layout": video_layout,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_composition_settings_default(
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://video.twilio.com/v1/CompositionSettings/Default?](
    https://video.twilio.com/v1/CompositionSettings/Default?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://video.twilio.com/v1/CompositionSettings/Default"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_composition_settings_default(
    twilio_credentials: "TwilioCredentials",
    aws_credentials_sid: str = None,
    aws_s3_url: str = None,
    aws_storage_enabled: bool = None,
    encryption_enabled: bool = None,
    encryption_key_sid: str = None,
    friendly_name: str = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        aws_credentials_sid:
            The SID of the stored Credential resource.
        aws_s3_url:
            The URL of the AWS S3 bucket where the compositions should be stored. We
            only support DNS-compliant URLs like `https://documentation-
            example-twilio-bucket/compositions`, where `compositions` is
            the path in which you want the compositions to be stored.
            This URL accepts only URI-valid characters, as described in
            the <a href='https://tools.ietf.org/html/rfc3986
            section-2'>RFC 3986</a>.
        aws_storage_enabled:
            Whether all compositions should be written to the `aws_s3_url`. When
            `false`, all compositions are stored in our cloud.
        encryption_enabled:
            Whether all compositions should be stored in an encrypted form. The
            default is `false`.
        encryption_key_sid:
            The SID of the Public Key resource to use for encryption.
        friendly_name:
            A descriptive string that you create to describe the resource and show
            to the user in the console.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://video.twilio.com/v1/CompositionSettings/Default?](
    https://video.twilio.com/v1/CompositionSettings/Default?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://video.twilio.com/v1/CompositionSettings/Default"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "aws_credentials_sid": aws_credentials_sid,
        "aws_s3_url": aws_s3_url,
        "aws_storage_enabled": aws_storage_enabled,
        "encryption_enabled": encryption_enabled,
        "encryption_key_sid": encryption_key_sid,
        "friendly_name": friendly_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_compositions(
    twilio_credentials: "TwilioCredentials",
    status: str = None,
    date_created_after: str = None,
    date_created_before: str = None,
    room_sid: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """
    List of all Recording compositions.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        status:
            Read only Composition resources with this status. Can be: `enqueued`,
            `processing`, `completed`, `deleted`, or `failed`.
        date_created_after:
            Read only Composition resources created on or after this [ISO
            8601](https://en.wikipedia.org/wiki/ISO_8601) date-time with
            time zone.
        date_created_before:
            Read only Composition resources created before this ISO 8601 date-time
            with time zone.
        room_sid:
            Read only Composition resources with this Room SID.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://video.twilio.com/v1/Compositions?&status=%s&date_created_after=%s&date_created_before=%s&room_sid=%s&page_size=%s](
    https://video.twilio.com/v1/Compositions?&status=%s&date_created_after=%s&date_created_before=%s&room_sid=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://video.twilio.com/v1/Compositions"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "status": status,
        "date_created_after": date_created_after,
        "date_created_before": date_created_before,
        "room_sid": room_sid,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_compositions(
    twilio_credentials: "TwilioCredentials",
    audio_sources: list = None,
    audio_sources_excluded: list = None,
    format: str = None,
    resolution: str = None,
    room_sid: str = None,
    status_callback: str = None,
    status_callback_method: str = None,
    trim: bool = None,
    video_layout: str = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        audio_sources:
            An array of track names from the same group room to merge into the new
            composition. Can include zero or more track names. The new
            composition includes all audio sources specified in
            `audio_sources` except for those specified in
            `audio_sources_excluded`. The track names in this parameter
            can include an asterisk as a wild card character, which will
            match zero or more characters in a track name. For example,
            `student*` includes `student` as well as `studentTeam`.
            Please, be aware that either video_layout or audio_sources
            have to be provided to get a valid creation request.
        audio_sources_excluded:
            An array of track names to exclude. The new composition includes all
            audio sources specified in `audio_sources` except for those
            specified in `audio_sources_excluded`. The track names in
            this parameter can include an asterisk as a wild card
            character, which will match zero or more characters in a
            track name. For example, `student*` excludes `student` as
            well as `studentTeam`. This parameter can also be empty.
        format:
            The container format of the composition's media files. Can be: `mp4` or
            `webm` and the default is `webm`. If you specify `mp4` or
            `webm`, you must also specify one or more `audio_sources`
            and/or a `video_layout` element that contains a valid
            `video_sources` list, otherwise an error occurs.
        resolution:
            A string that describes the columns (width) and rows (height) of the
            generated composed video in pixels. Defaults to `640x480`.
            The string's format is `{width}x{height}` where:
            * 16 <= `{width}` <= 1280 * 16 <= `{height}` <= 1280 *
            `{width}` * `{height}` <= 921,600  Typical values are:
            * HD = `1280x720` * PAL = `1024x576` * VGA = `640x480` * CIF
            = `320x240`  Note that the `resolution` imposes an aspect
            ratio to the resulting composition. When the original video
            tracks are constrained by the aspect ratio, they are scaled
            to fit. See [Specifying Video
            Layouts](https://www.twilio.com/docs/video/api/compositions-
            resource
            specifying-video-layouts) for more info.
        room_sid:
            The SID of the Group Room with the media tracks to be used as
            composition sources.
        status_callback:
            The URL we should call using the `status_callback_method` to send status
            information to your application on every composition event.
            If not provided, status callback events will not be
            dispatched.
        status_callback_method:
            The HTTP method we should use to call `status_callback`. Can be: `POST`
            or `GET` and the default is `POST`.
        trim:
            Whether to clip the intervals where there is no active media in the
            composition. The default is `true`. Compositions with `trim`
            enabled are shorter when the Room is created and no
            Participant joins for a while as well as if all the
            Participants leave the room and join later, because those
            gaps will be removed. See [Specifying Video
            Layouts](https://www.twilio.com/docs/video/api/compositions-
            resource
            specifying-video-layouts) for more info.
        video_layout:
            An object that describes the video layout of the composition in terms of
            regions. See [Specifying Video
            Layouts](https://www.twilio.com/docs/video/api/compositions-
            resource
            specifying-video-layouts) for more info. Please, be aware
            that either video_layout or audio_sources have to be
            provided to get a valid creation request.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://video.twilio.com/v1/Compositions?](
    https://video.twilio.com/v1/Compositions?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://video.twilio.com/v1/Compositions"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "audio_sources": audio_sources,
        "audio_sources_excluded": audio_sources_excluded,
        "format": format,
        "resolution": resolution,
        "room_sid": room_sid,
        "status_callback": status_callback,
        "status_callback_method": status_callback_method,
        "trim": trim,
        "video_layout": video_layout,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_compositions_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete a Recording Composition resource identified by a Composition SID.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://video.twilio.com/v1/Compositions/{sid}?](
    https://video.twilio.com/v1/Compositions/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://video.twilio.com/v1/Compositions/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_compositions_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Returns a single Composition resource identified by a Composition SID.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://video.twilio.com/v1/Compositions/{sid}?](
    https://video.twilio.com/v1/Compositions/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://video.twilio.com/v1/Compositions/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_recording_settings_default(
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://video.twilio.com/v1/RecordingSettings/Default?](
    https://video.twilio.com/v1/RecordingSettings/Default?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://video.twilio.com/v1/RecordingSettings/Default"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_recording_settings_default(
    twilio_credentials: "TwilioCredentials",
    aws_credentials_sid: str = None,
    aws_s3_url: str = None,
    aws_storage_enabled: bool = None,
    encryption_enabled: bool = None,
    encryption_key_sid: str = None,
    friendly_name: str = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        aws_credentials_sid:
            The SID of the stored Credential resource.
        aws_s3_url:
            The URL of the AWS S3 bucket where the recordings should be stored. We
            only support DNS-compliant URLs like `https://documentation-
            example-twilio-bucket/recordings`, where `recordings` is the
            path in which you want the recordings to be stored. This URL
            accepts only URI-valid characters, as described in the <a
            href='https://tools.ietf.org/html/rfc3986
            section-2'>RFC 3986</a>.
        aws_storage_enabled:
            Whether all recordings should be written to the `aws_s3_url`. When
            `false`, all recordings are stored in our cloud.
        encryption_enabled:
            Whether all recordings should be stored in an encrypted form. The
            default is `false`.
        encryption_key_sid:
            The SID of the Public Key resource to use for encryption.
        friendly_name:
            A descriptive string that you create to describe the resource and be
            shown to users in the console.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://video.twilio.com/v1/RecordingSettings/Default?](
    https://video.twilio.com/v1/RecordingSettings/Default?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://video.twilio.com/v1/RecordingSettings/Default"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "aws_credentials_sid": aws_credentials_sid,
        "aws_s3_url": aws_s3_url,
        "aws_storage_enabled": aws_storage_enabled,
        "encryption_enabled": encryption_enabled,
        "encryption_key_sid": encryption_key_sid,
        "friendly_name": friendly_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_recordings(
    twilio_credentials: "TwilioCredentials",
    status: str = None,
    source_sid: str = None,
    grouping_sid: list = None,
    date_created_after: str = None,
    date_created_before: str = None,
    media_type: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """
    List of all Track recordings.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        status:
            Read only the recordings that have this status. Can be: `processing`,
            `completed`, or `deleted`.
        source_sid:
            Read only the recordings that have this `source_sid`.
        grouping_sid:
            Read only recordings with this `grouping_sid`, which may include a
            `participant_sid` and/or a `room_sid`.
        date_created_after:
            Read only recordings that started on or after this [ISO
            8601](https://en.wikipedia.org/wiki/ISO_8601) date-time with
            time zone.
        date_created_before:
            Read only recordings that started before this [ISO
            8601](https://en.wikipedia.org/wiki/ISO_8601) date-time with
            time zone, given as `YYYY-MM-DDThh:mm:ss+|-hh:mm` or `YYYY-
            MM-DDThh:mm:ssZ`.
        media_type:
            Read only recordings that have this media type. Can be either `audio` or
            `video`.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://video.twilio.com/v1/Recordings?&status=%s&source_sid=%s&grouping_sid=%s&date_created_after=%s&date_created_before=%s&media_type=%s&page_size=%s](
    https://video.twilio.com/v1/Recordings?&status=%s&source_sid=%s&grouping_sid=%s&date_created_after=%s&date_created_before=%s&media_type=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://video.twilio.com/v1/Recordings"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "status": status,
        "source_sid": source_sid,
        "grouping_sid": grouping_sid,
        "date_created_after": date_created_after,
        "date_created_before": date_created_before,
        "media_type": media_type,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def delete_v1_recordings_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete a Recording resource identified by a Recording SID.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://video.twilio.com/v1/Recordings/{sid}?](
    https://video.twilio.com/v1/Recordings/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://video.twilio.com/v1/Recordings/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_recordings_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Returns a single Recording resource identified by a Recording SID.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://video.twilio.com/v1/Recordings/{sid}?](
    https://video.twilio.com/v1/Recordings/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://video.twilio.com/v1/Recordings/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_rooms(
    twilio_credentials: "TwilioCredentials",
    status: str = None,
    unique_name: str = None,
    date_created_after: str = None,
    date_created_before: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        status:
            Read only the rooms with this status. Can be: `in-progress` (default) or
            `completed`.
        unique_name:
            Read only rooms with the this `unique_name`.
        date_created_after:
            Read only rooms that started on or after this date, given as `YYYY-MM-
            DD`.
        date_created_before:
            Read only rooms that started before this date, given as `YYYY-MM-DD`.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://video.twilio.com/v1/Rooms?&status=%s&unique_name=%s&date_created_after=%s&date_created_before=%s&page_size=%s](
    https://video.twilio.com/v1/Rooms?&status=%s&unique_name=%s&date_created_after=%s&date_created_before=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://video.twilio.com/v1/Rooms"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "status": status,
        "unique_name": unique_name,
        "date_created_after": date_created_after,
        "date_created_before": date_created_before,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_rooms(
    twilio_credentials: "TwilioCredentials",
    audio_only: bool = None,
    empty_room_timeout: int = None,
    enable_turn: bool = None,
    large_room: bool = None,
    max_participant_duration: int = None,
    max_participants: int = None,
    media_region: str = None,
    record_participants_on_connect: bool = None,
    recording_rules: str = None,
    status_callback: str = None,
    status_callback_method: str = None,
    type: str = None,
    unique_name: str = None,
    unused_room_timeout: int = None,
    video_codecs: list = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        audio_only:
            When set to true, indicates that the participants in the room will only
            publish audio. No video tracks will be allowed. Group rooms
            only.
        empty_room_timeout:
            Configures how long (in minutes) a room will remain active after last
            participant leaves. Valid values range from 1 to 60 minutes
            (no fractions).
        enable_turn:
            Deprecated, now always considered to be true.
        large_room:
            When set to true, indicated that this is the large room.
        max_participant_duration:
            The maximum number of seconds a Participant can be connected to the
            room. The maximum possible value is 86400 seconds (24
            hours). The default is 14400 seconds (4 hours).
        max_participants:
            The maximum number of concurrent Participants allowed in the room. Peer-
            to-peer rooms can have up to 10 Participants. Small Group
            rooms can have up to 4 Participants. Group rooms can have up
            to 50 Participants.
        media_region:
            The region for the media server in Group Rooms.  Can be: one of the
            [available Media
            Regions](https://www.twilio.com/docs/video/ip-address-
            whitelisting
            group-rooms-media-servers). ***This feature is not available
            in `peer-to-peer` rooms.***.
        record_participants_on_connect:
            Whether to start recording when Participants connect. ***This feature is
            not available in `peer-to-peer` rooms.***.
        recording_rules:
            A collection of Recording Rules that describe how to include or exclude
            matching tracks for recording.
        status_callback:
            The URL we should call using the `status_callback_method` to send status
            information to your application on every room event. See
            [Status
            Callbacks](https://www.twilio.com/docs/video/api/status-
            callbacks) for more info.
        status_callback_method:
            The HTTP method we should use to call `status_callback`. Can be `POST`
            or `GET`.
        type:
            The type of room. Can be: `go`, `peer-to-peer`, `group-small`, or
            `group`. The default value is `group`.
        unique_name:
            An application-defined string that uniquely identifies the resource. It
            can be used as a `room_sid` in place of the resource's `sid`
            in the URL to address the resource, assuming it does not
            contain any [reserved
            characters](https://tools.ietf.org/html/rfc3986
            section-2.2) that would need to be URL encoded. This value
            is unique for `in-progress` rooms. SDK clients can use this
            name to connect to the room. REST API clients can use this
            name in place of the Room SID to interact with the room as
            long as the room is `in-progress`.
        unused_room_timeout:
            Configures how long (in minutes) a room will remain active if no one
            joins. Valid values range from 1 to 60 minutes (no
            fractions).
        video_codecs:
            An array of the video codecs that are supported when publishing a track
            in the room.  Can be: `VP8` and `H264`.  ***This feature is
            not available in `peer-to-peer` rooms***.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://video.twilio.com/v1/Rooms?](
    https://video.twilio.com/v1/Rooms?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://video.twilio.com/v1/Rooms"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "audio_only": audio_only,
        "empty_room_timeout": empty_room_timeout,
        "enable_turn": enable_turn,
        "large_room": large_room,
        "max_participant_duration": max_participant_duration,
        "max_participants": max_participants,
        "media_region": media_region,
        "record_participants_on_connect": record_participants_on_connect,
        "recording_rules": recording_rules,
        "status_callback": status_callback,
        "status_callback_method": status_callback_method,
        "type": type,
        "unique_name": unique_name,
        "unused_room_timeout": unused_room_timeout,
        "video_codecs": video_codecs,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_rooms_room_sid_participants(
    room_sid: str,
    twilio_credentials: "TwilioCredentials",
    status: str = None,
    identity: str = None,
    date_created_after: str = None,
    date_created_before: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        room_sid:
            Room sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        status:
            Read only the participants with this status. Can be: `connected` or
            `disconnected`. For `in-progress` Rooms the default Status
            is `connected`, for `completed` Rooms only `disconnected`
            Participants are returned.
        identity:
            Read only the Participants with this
            [User](https://www.twilio.com/docs/chat/rest/user-resource)
            `identity` value.
        date_created_after:
            Read only Participants that started after this date in [ISO
            8601](https://en.wikipedia.org/wiki/ISO_8601
            UTC) format.
        date_created_before:
            Read only Participants that started before this date in [ISO
            8601](https://en.wikipedia.org/wiki/ISO_8601
            UTC) format.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://video.twilio.com/v1/Rooms/{room_sid}/Participants?&status=%s&identity=%s&date_created_after=%s&date_created_before=%s&page_size=%s](
    https://video.twilio.com/v1/Rooms/{room_sid}/Participants?&status=%s&identity=%s&date_created_after=%s&date_created_before=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://video.twilio.com/v1/Rooms/{room_sid}/Participants"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "status": status,
        "identity": identity,
        "date_created_after": date_created_after,
        "date_created_before": date_created_before,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_rooms_room_sid_participants_participant_sid_published_tracks(
    room_sid: str,
    participant_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Returns a list of tracks associated with a given Participant. Only `currently`
    Published Tracks are in the list resource.

    Args:
        room_sid:
            Room sid used in formatting the endpoint URL.
        participant_sid:
            Participant sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://video.twilio.com/v1/Rooms/{room_sid}/Participants/{participant_sid}/PublishedTracks?&page_size=%s](
    https://video.twilio.com/v1/Rooms/{room_sid}/Participants/{participant_sid}/PublishedTracks?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://video.twilio.com/v1/Rooms/{room_sid}/Participants/{participant_sid}/PublishedTracks"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_rooms_room_sid_participants_participant_sid_published_tracks_sid(
    room_sid: str,
    participant_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Returns a single Track resource represented by TrackName or SID.

    Args:
        room_sid:
            Room sid used in formatting the endpoint URL.
        participant_sid:
            Participant sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://video.twilio.com/v1/Rooms/{room_sid}/Participants/{participant_sid}/PublishedTracks/{sid}?](
    https://video.twilio.com/v1/Rooms/{room_sid}/Participants/{participant_sid}/PublishedTracks/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://video.twilio.com/v1/Rooms/{room_sid}/Participants/{participant_sid}/PublishedTracks/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_rooms_room_sid_participants_participant_sid_subscribe_rules(
    room_sid: str,
    participant_sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Returns a list of Subscribe Rules for the Participant.

    Args:
        room_sid:
            Room sid used in formatting the endpoint URL.
        participant_sid:
            Participant sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://video.twilio.com/v1/Rooms/{room_sid}/Participants/{participant_sid}/SubscribeRules?](
    https://video.twilio.com/v1/Rooms/{room_sid}/Participants/{participant_sid}/SubscribeRules?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://video.twilio.com/v1/Rooms/{room_sid}/Participants/{participant_sid}/SubscribeRules"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_rooms_room_sid_participants_participant_sid_subscribe_rules(
    room_sid: str,
    participant_sid: str,
    twilio_credentials: "TwilioCredentials",
    rules: str = None,
) -> Dict[str, Any]:
    """
    Update the Subscribe Rules for the Participant.

    Args:
        room_sid:
            Room sid used in formatting the endpoint URL.
        participant_sid:
            Participant sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        rules:
            A JSON-encoded array of subscribe rules. See the [Specifying Subscribe
            Rules](https://www.twilio.com/docs/video/api/track-
            subscriptions
            specifying-sr) section for further information.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://video.twilio.com/v1/Rooms/{room_sid}/Participants/{participant_sid}/SubscribeRules?](
    https://video.twilio.com/v1/Rooms/{room_sid}/Participants/{participant_sid}/SubscribeRules?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 202 | Accepted. |
    """  # noqa
    url = f"https://video.twilio.com/v1/Rooms/{room_sid}/Participants/{participant_sid}/SubscribeRules"  # noqa
    responses = {
        202: "Accepted.",  # noqa
    }

    data = {
        "rules": rules,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_rooms_room_sid_participants_participant_sid_subscribed_tracks(
    room_sid: str,
    participant_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Returns a list of tracks that are subscribed for the participant.

    Args:
        room_sid:
            Room sid used in formatting the endpoint URL.
        participant_sid:
            Participant sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://video.twilio.com/v1/Rooms/{room_sid}/Participants/{participant_sid}/SubscribedTracks?&page_size=%s](
    https://video.twilio.com/v1/Rooms/{room_sid}/Participants/{participant_sid}/SubscribedTracks?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://video.twilio.com/v1/Rooms/{room_sid}/Participants/{participant_sid}/SubscribedTracks"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_rooms_room_sid_participants_participant_sid_subscribed_tracks_sid(
    room_sid: str,
    participant_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Returns a single Track resource represented by `track_sid`.  Note: This is one
    resource with the Video API that requires a SID, be Track Name on the
    subscriber side is not guaranteed to be unique.

    Args:
        room_sid:
            Room sid used in formatting the endpoint URL.
        participant_sid:
            Participant sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://video.twilio.com/v1/Rooms/{room_sid}/Participants/{participant_sid}/SubscribedTracks/{sid}?](
    https://video.twilio.com/v1/Rooms/{room_sid}/Participants/{participant_sid}/SubscribedTracks/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://video.twilio.com/v1/Rooms/{room_sid}/Participants/{participant_sid}/SubscribedTracks/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_rooms_room_sid_participants_sid(
    room_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        room_sid:
            Room sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://video.twilio.com/v1/Rooms/{room_sid}/Participants/{sid}?](
    https://video.twilio.com/v1/Rooms/{room_sid}/Participants/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://video.twilio.com/v1/Rooms/{room_sid}/Participants/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_rooms_room_sid_participants_sid(
    room_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    status: str = None,
) -> Dict[str, Any]:
    """


    Args:
        room_sid:
            Room sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        status:
            The new status of the resource. Can be: `connected` or `disconnected`.
            For `in-progress` Rooms the default Status is `connected`,
            for `completed` Rooms only `disconnected` Participants are
            returned.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://video.twilio.com/v1/Rooms/{room_sid}/Participants/{sid}?](
    https://video.twilio.com/v1/Rooms/{room_sid}/Participants/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://video.twilio.com/v1/Rooms/{room_sid}/Participants/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "status": status,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_rooms_room_sid_recording_rules(
    room_sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Returns a list of Recording Rules for the Room.

    Args:
        room_sid:
            Room sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://video.twilio.com/v1/Rooms/{room_sid}/RecordingRules?](
    https://video.twilio.com/v1/Rooms/{room_sid}/RecordingRules?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://video.twilio.com/v1/Rooms/{room_sid}/RecordingRules"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_rooms_room_sid_recording_rules(
    room_sid: str,
    twilio_credentials: "TwilioCredentials",
    rules: str = None,
) -> Dict[str, Any]:
    """
    Update the Recording Rules for the Room.

    Args:
        room_sid:
            Room sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        rules:
            A JSON-encoded array of recording rules.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://video.twilio.com/v1/Rooms/{room_sid}/RecordingRules?](
    https://video.twilio.com/v1/Rooms/{room_sid}/RecordingRules?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 202 | Accepted. |
    """  # noqa
    url = f"https://video.twilio.com/v1/Rooms/{room_sid}/RecordingRules"  # noqa
    responses = {
        202: "Accepted.",  # noqa
    }

    data = {
        "rules": rules,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_rooms_room_sid_recordings(
    room_sid: str,
    twilio_credentials: "TwilioCredentials",
    status: str = None,
    source_sid: str = None,
    date_created_after: str = None,
    date_created_before: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        room_sid:
            Room sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        status:
            Read only the recordings with this status. Can be: `processing`,
            `completed`, or `deleted`.
        source_sid:
            Read only the recordings that have this `source_sid`.
        date_created_after:
            Read only recordings that started on or after this [ISO
            8601](https://en.wikipedia.org/wiki/ISO_8601) datetime with
            time zone.
        date_created_before:
            Read only Recordings that started before this [ISO
            8601](https://en.wikipedia.org/wiki/ISO_8601) datetime with
            time zone.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://video.twilio.com/v1/Rooms/{room_sid}/Recordings?&status=%s&source_sid=%s&date_created_after=%s&date_created_before=%s&page_size=%s](
    https://video.twilio.com/v1/Rooms/{room_sid}/Recordings?&status=%s&source_sid=%s&date_created_after=%s&date_created_before=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://video.twilio.com/v1/Rooms/{room_sid}/Recordings"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "status": status,
        "source_sid": source_sid,
        "date_created_after": date_created_after,
        "date_created_before": date_created_before,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def delete_v1_rooms_room_sid_recordings_sid(
    room_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        room_sid:
            Room sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://video.twilio.com/v1/Rooms/{room_sid}/Recordings/{sid}?](
    https://video.twilio.com/v1/Rooms/{room_sid}/Recordings/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://video.twilio.com/v1/Rooms/{room_sid}/Recordings/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_rooms_room_sid_recordings_sid(
    room_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        room_sid:
            Room sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://video.twilio.com/v1/Rooms/{room_sid}/Recordings/{sid}?](
    https://video.twilio.com/v1/Rooms/{room_sid}/Recordings/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://video.twilio.com/v1/Rooms/{room_sid}/Recordings/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_rooms_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://video.twilio.com/v1/Rooms/{sid}?](
    https://video.twilio.com/v1/Rooms/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://video.twilio.com/v1/Rooms/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_rooms_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    status: str = None,
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        status:
            The new status of the resource. Set to `completed` to end the room.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://video.twilio.com/v1/Rooms/{sid}?](
    https://video.twilio.com/v1/Rooms/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://video.twilio.com/v1/Rooms/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "status": status,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_archives_date_calls_sid(
    date: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete an archived call record from Bulk Export. Note: this does not also delete
    the record from the Voice API.

    Args:
        date:
            Date used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://voice.twilio.com/v1/Archives/{date}/Calls/{sid}?](
    https://voice.twilio.com/v1/Archives/{date}/Calls/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://voice.twilio.com/v1/Archives/{date}/Calls/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_byoc_trunks(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://voice.twilio.com/v1/ByocTrunks?&page_size=%s](
    https://voice.twilio.com/v1/ByocTrunks?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://voice.twilio.com/v1/ByocTrunks"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_byoc_trunks(
    twilio_credentials: "TwilioCredentials",
    cnam_lookup_enabled: bool = None,
    connection_policy_sid: str = None,
    friendly_name: str = None,
    from_domain_sid: str = None,
    status_callback_method: str = None,
    status_callback_url: str = None,
    voice_fallback_method: str = None,
    voice_fallback_url: str = None,
    voice_method: str = None,
    voice_url: str = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        cnam_lookup_enabled:
            Whether Caller ID Name (CNAM) lookup is enabled for the trunk. If
            enabled, all inbound calls to the BYOC Trunk from the United
            States and Canada automatically perform a CNAM Lookup and
            display Caller ID data on your phone. See [CNAM
            Lookups](https://www.twilio.com/docs/sip-trunking
            CNAM) for more information.
        connection_policy_sid:
            The SID of the Connection Policy that Twilio will use when routing
            traffic to your communications infrastructure.
        friendly_name:
            A descriptive string that you create to describe the resource. It is not
            unique and can be up to 255 characters long.
        from_domain_sid:
            The SID of the SIP Domain that should be used in the `From` header of
            originating calls sent to your SIP infrastructure. If your
            SIP infrastructure allows users to "call back" an incoming
            call, configure this with a [SIP
            Domain](https://www.twilio.com/docs/voice/api/sending-sip)
            to ensure proper routing. If not configured, the from domain
            will default to "sip.twilio.com".
        status_callback_method:
            The HTTP method we should use to call `status_callback_url`. Can be:
            `GET` or `POST`.
        status_callback_url:
            The URL that we should call to pass status parameters (such as call
            ended) to your application.
        voice_fallback_method:
            The HTTP method we should use to call `voice_fallback_url`. Can be:
            `GET` or `POST`.
        voice_fallback_url:
            The URL that we should call when an error occurs while retrieving or
            executing the TwiML from `voice_url`.
        voice_method:
            The HTTP method we should use to call `voice_url`. Can be: `GET` or
            `POST`.
        voice_url:
            The URL we should call when the BYOC Trunk receives a call.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://voice.twilio.com/v1/ByocTrunks?](
    https://voice.twilio.com/v1/ByocTrunks?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://voice.twilio.com/v1/ByocTrunks"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "cnam_lookup_enabled": cnam_lookup_enabled,
        "connection_policy_sid": connection_policy_sid,
        "friendly_name": friendly_name,
        "from_domain_sid": from_domain_sid,
        "status_callback_method": status_callback_method,
        "status_callback_url": status_callback_url,
        "voice_fallback_method": voice_fallback_method,
        "voice_fallback_url": voice_fallback_url,
        "voice_method": voice_method,
        "voice_url": voice_url,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_byoc_trunks_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://voice.twilio.com/v1/ByocTrunks/{sid}?](
    https://voice.twilio.com/v1/ByocTrunks/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://voice.twilio.com/v1/ByocTrunks/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_byoc_trunks_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://voice.twilio.com/v1/ByocTrunks/{sid}?](
    https://voice.twilio.com/v1/ByocTrunks/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://voice.twilio.com/v1/ByocTrunks/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_byoc_trunks_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    cnam_lookup_enabled: bool = None,
    connection_policy_sid: str = None,
    friendly_name: str = None,
    from_domain_sid: str = None,
    status_callback_method: str = None,
    status_callback_url: str = None,
    voice_fallback_method: str = None,
    voice_fallback_url: str = None,
    voice_method: str = None,
    voice_url: str = None,
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        cnam_lookup_enabled:
            Whether Caller ID Name (CNAM) lookup is enabled for the trunk. If
            enabled, all inbound calls to the BYOC Trunk from the United
            States and Canada automatically perform a CNAM Lookup and
            display Caller ID data on your phone. See [CNAM
            Lookups](https://www.twilio.com/docs/sip-trunking
            CNAM) for more information.
        connection_policy_sid:
            The SID of the Connection Policy that Twilio will use when routing
            traffic to your communications infrastructure.
        friendly_name:
            A descriptive string that you create to describe the resource. It is not
            unique and can be up to 255 characters long.
        from_domain_sid:
            The SID of the SIP Domain that should be used in the `From` header of
            originating calls sent to your SIP infrastructure. If your
            SIP infrastructure allows users to "call back" an incoming
            call, configure this with a [SIP
            Domain](https://www.twilio.com/docs/voice/api/sending-sip)
            to ensure proper routing. If not configured, the from domain
            will default to "sip.twilio.com".
        status_callback_method:
            The HTTP method we should use to call `status_callback_url`. Can be:
            `GET` or `POST`.
        status_callback_url:
            The URL that we should call to pass status parameters (such as call
            ended) to your application.
        voice_fallback_method:
            The HTTP method we should use to call `voice_fallback_url`. Can be:
            `GET` or `POST`.
        voice_fallback_url:
            The URL that we should call when an error occurs while retrieving or
            executing the TwiML requested by `voice_url`.
        voice_method:
            The HTTP method we should use to call `voice_url`.
        voice_url:
            The URL we should call when the BYOC Trunk receives a call.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://voice.twilio.com/v1/ByocTrunks/{sid}?](
    https://voice.twilio.com/v1/ByocTrunks/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://voice.twilio.com/v1/ByocTrunks/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "cnam_lookup_enabled": cnam_lookup_enabled,
        "connection_policy_sid": connection_policy_sid,
        "friendly_name": friendly_name,
        "from_domain_sid": from_domain_sid,
        "status_callback_method": status_callback_method,
        "status_callback_url": status_callback_url,
        "voice_fallback_method": voice_fallback_method,
        "voice_fallback_url": voice_fallback_url,
        "voice_method": voice_method,
        "voice_url": voice_url,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_connection_policies(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://voice.twilio.com/v1/ConnectionPolicies?&page_size=%s](
    https://voice.twilio.com/v1/ConnectionPolicies?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://voice.twilio.com/v1/ConnectionPolicies"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_connection_policies(
    twilio_credentials: "TwilioCredentials",
    friendly_name: str = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        friendly_name:
            A descriptive string that you create to describe the resource. It is not
            unique and can be up to 255 characters long.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://voice.twilio.com/v1/ConnectionPolicies?](
    https://voice.twilio.com/v1/ConnectionPolicies?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://voice.twilio.com/v1/ConnectionPolicies"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "friendly_name": friendly_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_connection_policies_connection_policy_sid_targets(
    connection_policy_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        connection_policy_sid:
            Connection policy sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://voice.twilio.com/v1/ConnectionPolicies/{connection_policy_sid}/Targets?&page_size=%s](
    https://voice.twilio.com/v1/ConnectionPolicies/{connection_policy_sid}/Targets?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://voice.twilio.com/v1/ConnectionPolicies/{connection_policy_sid}/Targets"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_connection_policies_connection_policy_sid_targets(
    connection_policy_sid: str,
    twilio_credentials: "TwilioCredentials",
    enabled: bool = None,
    friendly_name: str = None,
    priority: int = None,
    target: str = None,
    weight: int = None,
) -> Dict[str, Any]:
    """


    Args:
        connection_policy_sid:
            Connection policy sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        enabled:
            Whether the Target is enabled. The default is `true`.
        friendly_name:
            A descriptive string that you create to describe the resource. It is not
            unique and can be up to 255 characters long.
        priority:
            The relative importance of the target. Can be an integer from 0 to
            65535, inclusive, and the default is 10. The lowest number
            represents the most important target.
        target:
            The SIP address you want Twilio to route your calls to. This must be a
            `sip:` schema. `sips` is NOT supported.
        weight:
            The value that determines the relative share of the load the Target
            should receive compared to other Targets with the same
            priority. Can be an integer from 1 to 65535, inclusive, and
            the default is 10. Targets with higher values receive more
            load than those with lower ones with the same priority.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://voice.twilio.com/v1/ConnectionPolicies/{connection_policy_sid}/Targets?](
    https://voice.twilio.com/v1/ConnectionPolicies/{connection_policy_sid}/Targets?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = f"https://voice.twilio.com/v1/ConnectionPolicies/{connection_policy_sid}/Targets"  # noqa
    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "enabled": enabled,
        "friendly_name": friendly_name,
        "priority": priority,
        "target": target,
        "weight": weight,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_connection_policies_connection_policy_sid_targets_sid(
    connection_policy_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        connection_policy_sid:
            Connection policy sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://voice.twilio.com/v1/ConnectionPolicies/{connection_policy_sid}/Targets/{sid}?](
    https://voice.twilio.com/v1/ConnectionPolicies/{connection_policy_sid}/Targets/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://voice.twilio.com/v1/ConnectionPolicies/{connection_policy_sid}/Targets/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_connection_policies_connection_policy_sid_targets_sid(
    connection_policy_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        connection_policy_sid:
            Connection policy sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://voice.twilio.com/v1/ConnectionPolicies/{connection_policy_sid}/Targets/{sid}?](
    https://voice.twilio.com/v1/ConnectionPolicies/{connection_policy_sid}/Targets/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://voice.twilio.com/v1/ConnectionPolicies/{connection_policy_sid}/Targets/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_connection_policies_connection_policy_sid_targets_sid(
    connection_policy_sid: str,
    sid: str,
    twilio_credentials: "TwilioCredentials",
    enabled: bool = None,
    friendly_name: str = None,
    priority: int = None,
    target: str = None,
    weight: int = None,
) -> Dict[str, Any]:
    """


    Args:
        connection_policy_sid:
            Connection policy sid used in formatting the endpoint URL.
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        enabled:
            Whether the Target is enabled.
        friendly_name:
            A descriptive string that you create to describe the resource. It is not
            unique and can be up to 255 characters long.
        priority:
            The relative importance of the target. Can be an integer from 0 to
            65535, inclusive. The lowest number represents the most
            important target.
        target:
            The SIP address you want Twilio to route your calls to. This must be a
            `sip:` schema. `sips` is NOT supported.
        weight:
            The value that determines the relative share of the load the Target
            should receive compared to other Targets with the same
            priority. Can be an integer from 1 to 65535, inclusive.
            Targets with higher values receive more load than those with
            lower ones with the same priority.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://voice.twilio.com/v1/ConnectionPolicies/{connection_policy_sid}/Targets/{sid}?](
    https://voice.twilio.com/v1/ConnectionPolicies/{connection_policy_sid}/Targets/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://voice.twilio.com/v1/ConnectionPolicies/{connection_policy_sid}/Targets/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "enabled": enabled,
        "friendly_name": friendly_name,
        "priority": priority,
        "target": target,
        "weight": weight,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_connection_policies_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://voice.twilio.com/v1/ConnectionPolicies/{sid}?](
    https://voice.twilio.com/v1/ConnectionPolicies/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://voice.twilio.com/v1/ConnectionPolicies/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_connection_policies_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://voice.twilio.com/v1/ConnectionPolicies/{sid}?](
    https://voice.twilio.com/v1/ConnectionPolicies/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://voice.twilio.com/v1/ConnectionPolicies/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_connection_policies_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    friendly_name: str = None,
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        friendly_name:
            A descriptive string that you create to describe the resource. It is not
            unique and can be up to 255 characters long.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://voice.twilio.com/v1/ConnectionPolicies/{sid}?](
    https://voice.twilio.com/v1/ConnectionPolicies/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://voice.twilio.com/v1/ConnectionPolicies/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "friendly_name": friendly_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def post_v1_dialing_permissions_bulk_country_updates(
    twilio_credentials: "TwilioCredentials",
    update_request: str = None,
) -> Dict[str, Any]:
    """
    Create a bulk update request to change voice dialing country permissions of one
    or more countries identified by the corresponding [ISO country
    code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        update_request:
            URL encoded JSON array of update objects. example : `[ { "iso_code":
            "GB", "low_risk_numbers_enabled": "true",
            "high_risk_special_numbers_enabled":"true",
            "high_risk_tollfraud_numbers_enabled": "false" } ]`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://voice.twilio.com/v1/DialingPermissions/BulkCountryUpdates?](
    https://voice.twilio.com/v1/DialingPermissions/BulkCountryUpdates?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://voice.twilio.com/v1/DialingPermissions/BulkCountryUpdates"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "update_request": update_request,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_dialing_permissions_countries(
    twilio_credentials: "TwilioCredentials",
    iso_code: str = None,
    continent: str = None,
    country_code: str = None,
    low_risk_numbers_enabled: bool = None,
    high_risk_special_numbers_enabled: bool = None,
    high_risk_tollfraud_numbers_enabled: bool = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve all voice dialing country permissions for this account.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        iso_code:
            Filter to retrieve the country permissions by specifying the [ISO
            country
            code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
        continent:
            Filter to retrieve the country permissions by specifying the continent.
        country_code:
            Filter the results by specified [country
            codes](https://www.itu.int/itudoc/itu-t/ob-
            lists/icc/e164_763.html).
        low_risk_numbers_enabled:
            Filter to retrieve the country permissions with dialing to low-risk
            numbers enabled. Can be: `true` or `false`.
        high_risk_special_numbers_enabled:
            Filter to retrieve the country permissions with dialing to high-risk
            special service numbers enabled. Can be: `true` or `false`.
        high_risk_tollfraud_numbers_enabled:
            Filter to retrieve the country permissions with dialing to high-risk
            [toll fraud](https://www.twilio.com/learn/voice-and-
            video/toll-fraud) numbers enabled. Can be: `true` or
            `false`.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://voice.twilio.com/v1/DialingPermissions/Countries?&iso_code=%s&continent=%s&country_code=%s&low_risk_numbers_enabled=%s&high_risk_special_numbers_enabled=%s&high_risk_tollfraud_numbers_enabled=%s&page_size=%s](
    https://voice.twilio.com/v1/DialingPermissions/Countries?&iso_code=%s&continent=%s&country_code=%s&low_risk_numbers_enabled=%s&high_risk_special_numbers_enabled=%s&high_risk_tollfraud_numbers_enabled=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://voice.twilio.com/v1/DialingPermissions/Countries"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "iso_code": iso_code,
        "continent": continent,
        "country_code": country_code,
        "low_risk_numbers_enabled": low_risk_numbers_enabled,
        "high_risk_special_numbers_enabled": high_risk_special_numbers_enabled,
        "high_risk_tollfraud_numbers_enabled": high_risk_tollfraud_numbers_enabled,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_dialing_permissions_countries_iso_code(
    iso_code: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Retrieve voice dialing country permissions identified by the given ISO country
    code.

    Args:
        iso_code:
            Iso code used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://voice.twilio.com/v1/DialingPermissions/Countries/{iso_code}?](
    https://voice.twilio.com/v1/DialingPermissions/Countries/{iso_code}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://voice.twilio.com/v1/DialingPermissions/Countries/{iso_code}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_dialing_permissions_countries_iso_code_high_risk_special_prefixes(
    iso_code: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Fetch the high-risk special services prefixes from the country resource
    corresponding to the [ISO country
    code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).

    Args:
        iso_code:
            Iso code used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://voice.twilio.com/v1/DialingPermissions/Countries/{iso_code}/HighRiskSpecialPrefixes?&page_size=%s](
    https://voice.twilio.com/v1/DialingPermissions/Countries/{iso_code}/HighRiskSpecialPrefixes?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://voice.twilio.com/v1/DialingPermissions/Countries/{iso_code}/HighRiskSpecialPrefixes"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_ip_records(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://voice.twilio.com/v1/IpRecords?&page_size=%s](
    https://voice.twilio.com/v1/IpRecords?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://voice.twilio.com/v1/IpRecords"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_ip_records(
    twilio_credentials: "TwilioCredentials",
    cidr_prefix_length: int = None,
    friendly_name: str = None,
    ip_address: str = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        cidr_prefix_length:
            An integer representing the length of the
            [CIDR](https://tools.ietf.org/html/rfc4632) prefix to use
            with this IP address. By default the entire IP address is
            used, which for IPv4 is value 32.
        friendly_name:
            A descriptive string that you create to describe the resource. It is not
            unique and can be up to 255 characters long.
        ip_address:
            An IP address in dotted decimal notation, IPv4 only.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://voice.twilio.com/v1/IpRecords?](
    https://voice.twilio.com/v1/IpRecords?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://voice.twilio.com/v1/IpRecords"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "cidr_prefix_length": cidr_prefix_length,
        "friendly_name": friendly_name,
        "ip_address": ip_address,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_ip_records_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://voice.twilio.com/v1/IpRecords/{sid}?](
    https://voice.twilio.com/v1/IpRecords/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://voice.twilio.com/v1/IpRecords/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_ip_records_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://voice.twilio.com/v1/IpRecords/{sid}?](
    https://voice.twilio.com/v1/IpRecords/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://voice.twilio.com/v1/IpRecords/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_ip_records_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    friendly_name: str = None,
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        friendly_name:
            A descriptive string that you create to describe the resource. It is not
            unique and can be up to 255 characters long.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://voice.twilio.com/v1/IpRecords/{sid}?](
    https://voice.twilio.com/v1/IpRecords/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://voice.twilio.com/v1/IpRecords/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "friendly_name": friendly_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_settings(
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Retrieve voice dialing permissions inheritance for the sub-account.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://voice.twilio.com/v1/Settings?](
    https://voice.twilio.com/v1/Settings?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://voice.twilio.com/v1/Settings"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_settings(
    twilio_credentials: "TwilioCredentials",
    dialing_permissions_inheritance: bool = None,
) -> Dict[str, Any]:
    """
    Update voice dialing permissions inheritance for the sub-account.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        dialing_permissions_inheritance:
            `true` for the sub-account to inherit voice dialing permissions from the
            Master Project; otherwise `false`.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://voice.twilio.com/v1/Settings?](
    https://voice.twilio.com/v1/Settings?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 202 | Accepted. |
    """  # noqa
    url = "https://voice.twilio.com/v1/Settings"  # noqa

    responses = {
        202: "Accepted.",  # noqa
    }

    data = {
        "dialing_permissions_inheritance": dialing_permissions_inheritance,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_source_ip_mappings(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://voice.twilio.com/v1/SourceIpMappings?&page_size=%s](
    https://voice.twilio.com/v1/SourceIpMappings?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://voice.twilio.com/v1/SourceIpMappings"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_source_ip_mappings(
    twilio_credentials: "TwilioCredentials",
    ip_record_sid: str = None,
    sip_domain_sid: str = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        ip_record_sid:
            The Twilio-provided string that uniquely identifies the IP Record
            resource to map from.
        sip_domain_sid:
            The SID of the SIP Domain that the IP Record should be mapped to.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://voice.twilio.com/v1/SourceIpMappings?](
    https://voice.twilio.com/v1/SourceIpMappings?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://voice.twilio.com/v1/SourceIpMappings"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "ip_record_sid": ip_record_sid,
        "sip_domain_sid": sip_domain_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_source_ip_mappings_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://voice.twilio.com/v1/SourceIpMappings/{sid}?](
    https://voice.twilio.com/v1/SourceIpMappings/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://voice.twilio.com/v1/SourceIpMappings/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_source_ip_mappings_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://voice.twilio.com/v1/SourceIpMappings/{sid}?](
    https://voice.twilio.com/v1/SourceIpMappings/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://voice.twilio.com/v1/SourceIpMappings/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_source_ip_mappings_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    sip_domain_sid: str = None,
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        sip_domain_sid:
            The SID of the SIP Domain that the IP Record should be mapped to.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://voice.twilio.com/v1/SourceIpMappings/{sid}?](
    https://voice.twilio.com/v1/SourceIpMappings/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://voice.twilio.com/v1/SourceIpMappings/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "sip_domain_sid": sip_domain_sid,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_commands(
    twilio_credentials: "TwilioCredentials",
    sim: str = None,
    status: str = None,
    direction: str = None,
    transport: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of Commands from your account.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        sim:
            The `sid` or `unique_name` of the [Sim
            resources](https://www.twilio.com/docs/wireless/api/sim-
            resource) to read.
        status:
            The status of the resources to read. Can be: `queued`, `sent`,
            `delivered`, `received`, or `failed`.
        direction:
            Only return Commands with this direction value.
        transport:
            Only return Commands with this transport value. Can be: `sms` or `ip`.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://wireless.twilio.com/v1/Commands?&sim=%s&status=%s&direction=%s&transport=%s&page_size=%s](
    https://wireless.twilio.com/v1/Commands?&sim=%s&status=%s&direction=%s&transport=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://wireless.twilio.com/v1/Commands"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "sim": sim,
        "status": status,
        "direction": direction,
        "transport": transport,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_commands(
    twilio_credentials: "TwilioCredentials",
    callback_method: str = None,
    callback_url: str = None,
    command: str = None,
    command_mode: str = None,
    delivery_receipt_requested: bool = None,
    include_sid: str = None,
    sim: str = None,
) -> Dict[str, Any]:
    """
    Send a Command to a Sim.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        callback_method:
            The HTTP method we use to call `callback_url`. Can be: `POST` or `GET`,
            and the default is `POST`.
        callback_url:
            The URL we call using the `callback_url` when the Command has finished
            sending, whether the command was delivered or it failed.
        command:
            The message body of the Command. Can be plain text in text mode or a
            Base64 encoded byte string in binary mode.
        command_mode:
            The mode to use when sending the SMS message. Can be: `text` or
            `binary`. The default SMS mode is `text`.
        delivery_receipt_requested:
            Whether to request delivery receipt from the recipient. For Commands
            that request delivery receipt, the Command state transitions
            to 'delivered' once the server has received a delivery
            receipt from the device. The default value is `true`.
        include_sid:
            Whether to include the SID of the command in the message body. Can be:
            `none`, `start`, or `end`, and the default behavior is
            `none`. When sending a Command to a SIM in text mode, we can
            automatically include the SID of the Command in the message
            body, which could be used to ensure that the device does not
            process the same Command more than once.  A value of `start`
            will prepend the message with the Command SID, and `end`
            will append it to the end, separating the Command SID from
            the message body with a space. The length of the Command SID
            is included in the 160 character limit so the SMS body must
            be 128 characters or less before the Command SID is
            included.
        sim:
            The `sid` or `unique_name` of the
            [SIM](https://www.twilio.com/docs/wireless/api/sim-resource)
            to send the Command to.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://wireless.twilio.com/v1/Commands?](
    https://wireless.twilio.com/v1/Commands?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://wireless.twilio.com/v1/Commands"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "callback_method": callback_method,
        "callback_url": callback_url,
        "command": command,
        "command_mode": command_mode,
        "delivery_receipt_requested": delivery_receipt_requested,
        "include_sid": include_sid,
        "sim": sim,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_commands_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete a Command instance from your account.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://wireless.twilio.com/v1/Commands/{sid}?](
    https://wireless.twilio.com/v1/Commands/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://wireless.twilio.com/v1/Commands/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_commands_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a Command instance from your account.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://wireless.twilio.com/v1/Commands/{sid}?](
    https://wireless.twilio.com/v1/Commands/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://wireless.twilio.com/v1/Commands/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def get_v1_rate_plans(
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://wireless.twilio.com/v1/RatePlans?&page_size=%s](
    https://wireless.twilio.com/v1/RatePlans?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://wireless.twilio.com/v1/RatePlans"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def post_v1_rate_plans(
    twilio_credentials: "TwilioCredentials",
    data_enabled: bool = None,
    data_limit: int = None,
    data_metering: str = None,
    friendly_name: str = None,
    international_roaming: list = None,
    international_roaming_data_limit: int = None,
    messaging_enabled: bool = None,
    national_roaming_data_limit: int = None,
    national_roaming_enabled: bool = None,
    unique_name: str = None,
    voice_enabled: bool = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        data_enabled:
            Whether SIMs can use GPRS/3G/4G/LTE data connectivity.
        data_limit:
            The total data usage (download and upload combined) in Megabytes that
            the Network allows during one month on the home network
            (T-Mobile USA). The metering period begins the day of
            activation and ends on the same day in the following month.
            Can be up to 2TB and the default value is `1000`.
        data_metering:
            The model used to meter data usage. Can be: `payg` and `quota-1`,
            `quota-10`, and `quota-50`. Learn more about the available
            [data metering
            models](https://www.twilio.com/docs/wireless/api/rateplan-
            resource
            payg-vs-quota-data-plans).
        friendly_name:
            A descriptive string that you create to describe the resource. It does
            not have to be unique.
        international_roaming:
            The list of services that SIMs capable of using GPRS/3G/4G/LTE data
            connectivity can use outside of the United States. Can
            contain: `data` and `messaging`.
        international_roaming_data_limit:
            The total data usage (download and upload combined) in Megabytes that
            the Network allows during one month when roaming outside the
            United States. Can be up to 2TB.
        messaging_enabled:
            Whether SIMs can make, send, and receive SMS using
            [Commands](https://www.twilio.com/docs/wireless/api/command-
            resource).
        national_roaming_data_limit:
            The total data usage (download and upload combined) in Megabytes that
            the Network allows during one month on non-home networks in
            the United States. The metering period begins the day of
            activation and ends on the same day in the following month.
            Can be up to 2TB. See [national
            roaming](https://www.twilio.com/docs/wireless/api/rateplan-
            resource
            national-roaming) for more info.
        national_roaming_enabled:
            Whether SIMs can roam on networks other than the home network (T-Mobile
            USA) in the United States. See [national
            roaming](https://www.twilio.com/docs/wireless/api/rateplan-
            resource
            national-roaming).
        unique_name:
            An application-defined string that uniquely identifies the resource. It
            can be used in place of the resource's `sid` in the URL to
            address the resource.
        voice_enabled:
            Deprecated.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://wireless.twilio.com/v1/RatePlans?](
    https://wireless.twilio.com/v1/RatePlans?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 201 | Created. |
    """  # noqa
    url = "https://wireless.twilio.com/v1/RatePlans"  # noqa

    responses = {
        201: "Created.",  # noqa
    }

    data = {
        "data_enabled": data_enabled,
        "data_limit": data_limit,
        "data_metering": data_metering,
        "friendly_name": friendly_name,
        "international_roaming": international_roaming,
        "international_roaming_data_limit": international_roaming_data_limit,
        "messaging_enabled": messaging_enabled,
        "national_roaming_data_limit": national_roaming_data_limit,
        "national_roaming_enabled": national_roaming_enabled,
        "unique_name": unique_name,
        "voice_enabled": voice_enabled,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def delete_v1_rate_plans_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://wireless.twilio.com/v1/RatePlans/{sid}?](
    https://wireless.twilio.com/v1/RatePlans/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://wireless.twilio.com/v1/RatePlans/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_rate_plans_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://wireless.twilio.com/v1/RatePlans/{sid}?](
    https://wireless.twilio.com/v1/RatePlans/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://wireless.twilio.com/v1/RatePlans/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_rate_plans_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    friendly_name: str = None,
    unique_name: str = None,
) -> Dict[str, Any]:
    """


    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        friendly_name:
            A descriptive string that you create to describe the resource. It does
            not have to be unique.
        unique_name:
            An application-defined string that uniquely identifies the resource. It
            can be used in place of the resource's `sid` in the URL to
            address the resource.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://wireless.twilio.com/v1/RatePlans/{sid}?](
    https://wireless.twilio.com/v1/RatePlans/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://wireless.twilio.com/v1/RatePlans/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "friendly_name": friendly_name,
        "unique_name": unique_name,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_sims(
    twilio_credentials: "TwilioCredentials",
    status: str = None,
    iccid: str = None,
    rate_plan: str = None,
    e_id: str = None,
    sim_registration_code: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """
    Retrieve a list of Sim resources on your Account.

    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        status:
            Only return Sim resources with this status.
        iccid:
            Only return Sim resources with this ICCID. This will return a list with
            a maximum size of 1.
        rate_plan:
            The SID or unique name of a [RatePlan
            resource](https://www.twilio.com/docs/wireless/api/rateplan-
            resource). Only return Sim resources assigned to this
            RatePlan resource.
        e_id:
            Deprecated.
        sim_registration_code:
            Only return Sim resources with this registration code. This will return
            a list with a maximum size of 1.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://wireless.twilio.com/v1/Sims?&status=%s&iccid=%s&rate_plan=%s&e_id=%s&sim_registration_code=%s&page_size=%s](
    https://wireless.twilio.com/v1/Sims?&status=%s&iccid=%s&rate_plan=%s&e_id=%s&sim_registration_code=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://wireless.twilio.com/v1/Sims"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "status": status,
        "iccid": iccid,
        "rate_plan": rate_plan,
        "e_id": e_id,
        "sim_registration_code": sim_registration_code,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def delete_v1_sims_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Delete a Sim resource on your Account.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://wireless.twilio.com/v1/Sims/{sid}?](
    https://wireless.twilio.com/v1/Sims/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 204 | The resource was deleted successfully. |
    """  # noqa
    url = f"https://wireless.twilio.com/v1/Sims/{sid}"  # noqa
    responses = {
        204: "The resource was deleted successfully.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.DELETE,
        responses=responses,
    )
    return result


@task
async def get_v1_sims_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
) -> Dict[str, Any]:
    """
    Fetch a Sim resource on your Account.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://wireless.twilio.com/v1/Sims/{sid}?](
    https://wireless.twilio.com/v1/Sims/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://wireless.twilio.com/v1/Sims/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        responses=responses,
    )
    return result


@task
async def post_v1_sims_sid(
    sid: str,
    twilio_credentials: "TwilioCredentials",
    account_sid: str = None,
    callback_method: str = None,
    callback_url: str = None,
    commands_callback_method: str = None,
    commands_callback_url: str = None,
    friendly_name: str = None,
    rate_plan: str = None,
    reset_status: str = None,
    sms_fallback_method: str = None,
    sms_fallback_url: str = None,
    sms_method: str = None,
    sms_url: str = None,
    status: str = None,
    unique_name: str = None,
    voice_fallback_method: str = None,
    voice_fallback_url: str = None,
    voice_method: str = None,
    voice_url: str = None,
) -> Dict[str, Any]:
    """
    Updates the given properties of a Sim resource on your Account.

    Args:
        sid:
            Sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        account_sid:
            The SID of the [Account](https://www.twilio.com/docs/iam/api/account) to
            which the Sim resource should belong. The Account SID can
            only be that of the requesting Account or that of a
            [Subaccount](https://www.twilio.com/docs/iam/api/subaccounts)
            of the requesting Account. Only valid when the Sim
            resource's status is `new`. For more information, see the
            [Move SIMs between Subaccounts
            documentation](https://www.twilio.com/docs/wireless/api/sim-
            resource
            move-sims-between-subaccounts).
        callback_method:
            The HTTP method we should use to call `callback_url`. Can be: `POST` or
            `GET`. The default is `POST`.
        callback_url:
            The URL we should call using the `callback_url` when the SIM has
            finished updating. When the SIM transitions from `new` to
            `ready` or from any status to `deactivated`, we call this
            URL when the status changes to an intermediate status
            (`ready` or `deactivated`) and again when the status changes
            to its final status (`active` or `canceled`).
        commands_callback_method:
            The HTTP method we should use to call `commands_callback_url`. Can be:
            `POST` or `GET`. The default is `POST`.
        commands_callback_url:
            The URL we should call using the `commands_callback_method` when the SIM
            sends a
            [Command](https://www.twilio.com/docs/wireless/api/command-
            resource). Your server should respond with an HTTP status
            code in the 200 range; any response body is ignored.
        friendly_name:
            A descriptive string that you create to describe the Sim resource. It
            does not need to be unique.
        rate_plan:
            The SID or unique name of the [RatePlan
            resource](https://www.twilio.com/docs/wireless/api/rateplan-
            resource) to which the Sim resource should be assigned.
        reset_status:
            Initiate a connectivity reset on the SIM. Set to `resetting` to initiate
            a connectivity reset on the SIM. No other value is valid.
        sms_fallback_method:
            The HTTP method we should use to call `sms_fallback_url`. Can be: `GET`
            or `POST`. Default is `POST`.
        sms_fallback_url:
            The URL we should call using the `sms_fallback_method` when an error
            occurs while retrieving or executing the TwiML requested
            from `sms_url`.
        sms_method:
            The HTTP method we should use to call `sms_url`. Can be: `GET` or
            `POST`. Default is `POST`.
        sms_url:
            The URL we should call using the `sms_method` when the SIM-connected
            device sends an SMS message that is not a
            [Command](https://www.twilio.com/docs/wireless/api/command-
            resource).
        status:
            The new status of the Sim resource. Can be: `ready`, `active`,
            `suspended`, or `deactivated`.
        unique_name:
            An application-defined string that uniquely identifies the resource. It
            can be used in place of the `sid` in the URL path to address
            the resource.
        voice_fallback_method:
            Deprecated.
        voice_fallback_url:
            Deprecated.
        voice_method:
            Deprecated.
        voice_url:
            Deprecated.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://wireless.twilio.com/v1/Sims/{sid}?](
    https://wireless.twilio.com/v1/Sims/{sid}?)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://wireless.twilio.com/v1/Sims/{sid}"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    data = {
        "account_sid": account_sid,
        "callback_method": callback_method,
        "callback_url": callback_url,
        "commands_callback_method": commands_callback_method,
        "commands_callback_url": commands_callback_url,
        "friendly_name": friendly_name,
        "rate_plan": rate_plan,
        "reset_status": reset_status,
        "sms_fallback_method": sms_fallback_method,
        "sms_fallback_url": sms_fallback_url,
        "sms_method": sms_method,
        "sms_url": sms_url,
        "status": status,
        "unique_name": unique_name,
        "voice_fallback_method": voice_fallback_method,
        "voice_fallback_url": voice_fallback_url,
        "voice_method": voice_method,
        "voice_url": voice_url,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.POST,
        responses=responses,
        data=data,
    )
    return result


@task
async def get_v1_sims_sim_sid_data_sessions(
    sim_sid: str,
    twilio_credentials: "TwilioCredentials",
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        sim_sid:
            Sim sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://wireless.twilio.com/v1/Sims/{sim_sid}/DataSessions?&page_size=%s](
    https://wireless.twilio.com/v1/Sims/{sim_sid}/DataSessions?&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://wireless.twilio.com/v1/Sims/{sim_sid}/DataSessions"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_sims_sim_sid_usage_records(
    sim_sid: str,
    twilio_credentials: "TwilioCredentials",
    end: str = None,
    start: str = None,
    granularity: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        sim_sid:
            Sim sid used in formatting the endpoint URL.
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        end:
            Only include usage that occurred on or before this date, specified in
            [ISO 8601](https://www.iso.org/iso-8601-date-and-time-
            format.html). The default is the current time.
        start:
            Only include usage that has occurred on or after this date, specified in
            [ISO 8601](https://www.iso.org/iso-8601-date-and-time-
            format.html). The default is one month before the `end`
            parameter value.
        granularity:
            How to summarize the usage by time. Can be: `daily`, `hourly`, or `all`.
            The default is `all`. A value of `all` returns one Usage
            Record that describes the usage for the entire period.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://wireless.twilio.com/v1/Sims/{sim_sid}/UsageRecords?&end=%s&start=%s&granularity=%s&page_size=%s](
    https://wireless.twilio.com/v1/Sims/{sim_sid}/UsageRecords?&end=%s&start=%s&granularity=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = f"https://wireless.twilio.com/v1/Sims/{sim_sid}/UsageRecords"  # noqa
    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "end": end,
        "start": start,
        "granularity": granularity,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result


@task
async def get_v1_usage_records(
    twilio_credentials: "TwilioCredentials",
    end: str = None,
    start: str = None,
    granularity: str = None,
    page_size: int = None,
) -> Dict[str, Any]:
    """


    Args:
        twilio_credentials:
            Credentials to use for authentication with Twilio.
        end:
            Only include usage that has occurred on or before this date. Format is
            [ISO 8601](https://www.iso.org/iso-8601-date-and-time-
            format.html).
        start:
            Only include usage that has occurred on or after this date. Format is
            [ISO 8601](https://www.iso.org/iso-8601-date-and-time-
            format.html).
        granularity:
            How to summarize the usage by time. Can be: `daily`, `hourly`, or `all`.
            A value of `all` returns one Usage Record that describes the
            usage for the entire period.
        page_size:
            How many resources to return in each list page. The default is 50, and
            the maximum is 1000.

    Returns:
        A dict of the response.

    <h4>API Endpoint URL Format:</h4>
    To format the URL, replace the placeholders, `%s`, with desired values.<br>
    [https://wireless.twilio.com/v1/UsageRecords?&end=%s&start=%s&granularity=%s&page_size=%s](
    https://wireless.twilio.com/v1/UsageRecords?&end=%s&start=%s&granularity=%s&page_size=%s)

    <h4>API Responses:</h4>
    | Response | Description |
    | --- | --- |
    | 200 | OK. |
    """  # noqa
    url = "https://wireless.twilio.com/v1/UsageRecords"  # noqa

    responses = {
        200: "OK.",  # noqa
    }

    params = {
        "end": end,
        "start": start,
        "granularity": granularity,
        "page_size": page_size,
    }

    result = await execute_endpoint.fn(
        url,
        twilio_credentials,
        http_method=HTTPMethod.GET,
        params=params,
        responses=responses,
    )
    return result
